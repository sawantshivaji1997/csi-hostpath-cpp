// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hostpath.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hostpath_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hostpath_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hostpath_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hostpath_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hostpath_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_hostpath_2eproto_metadata_getter(int index);
namespace hostpath {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class HostPathState;
struct HostPathStateDefaultTypeInternal;
extern HostPathStateDefaultTypeInternal _HostPathState_default_instance_;
class Volume;
struct VolumeDefaultTypeInternal;
extern VolumeDefaultTypeInternal _Volume_default_instance_;
}  // namespace hostpath
PROTOBUF_NAMESPACE_OPEN
template<> ::hostpath::Config* Arena::CreateMaybeMessage<::hostpath::Config>(Arena*);
template<> ::hostpath::HostPathState* Arena::CreateMaybeMessage<::hostpath::HostPathState>(Arena*);
template<> ::hostpath::Volume* Arena::CreateMaybeMessage<::hostpath::Volume>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hostpath {

// ===================================================================

class Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hostpath.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  virtual ~Config();
  explicit constexpr Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hostpath.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_hostpath_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointFieldNumber = 1,
    kNodeNameFieldNumber = 2,
    kDriverNameFieldNumber = 3,
    kVendorVersionFieldNumber = 4,
    kStateDirectoryFieldNumber = 5,
  };
  // string endpoint = 1;
  void clear_endpoint();
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // string node_name = 2;
  void clear_node_name();
  const std::string& node_name() const;
  void set_node_name(const std::string& value);
  void set_node_name(std::string&& value);
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  std::string* mutable_node_name();
  std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // string driver_name = 3;
  void clear_driver_name();
  const std::string& driver_name() const;
  void set_driver_name(const std::string& value);
  void set_driver_name(std::string&& value);
  void set_driver_name(const char* value);
  void set_driver_name(const char* value, size_t size);
  std::string* mutable_driver_name();
  std::string* release_driver_name();
  void set_allocated_driver_name(std::string* driver_name);
  private:
  const std::string& _internal_driver_name() const;
  void _internal_set_driver_name(const std::string& value);
  std::string* _internal_mutable_driver_name();
  public:

  // string vendor_version = 4;
  void clear_vendor_version();
  const std::string& vendor_version() const;
  void set_vendor_version(const std::string& value);
  void set_vendor_version(std::string&& value);
  void set_vendor_version(const char* value);
  void set_vendor_version(const char* value, size_t size);
  std::string* mutable_vendor_version();
  std::string* release_vendor_version();
  void set_allocated_vendor_version(std::string* vendor_version);
  private:
  const std::string& _internal_vendor_version() const;
  void _internal_set_vendor_version(const std::string& value);
  std::string* _internal_mutable_vendor_version();
  public:

  // string state_directory = 5;
  void clear_state_directory();
  const std::string& state_directory() const;
  void set_state_directory(const std::string& value);
  void set_state_directory(std::string&& value);
  void set_state_directory(const char* value);
  void set_state_directory(const char* value, size_t size);
  std::string* mutable_state_directory();
  std::string* release_state_directory();
  void set_allocated_state_directory(std::string* state_directory);
  private:
  const std::string& _internal_state_directory() const;
  void _internal_set_state_directory(const std::string& value);
  std::string* _internal_mutable_state_directory();
  public:

  // @@protoc_insertion_point(class_scope:hostpath.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_directory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hostpath_2eproto;
};
// -------------------------------------------------------------------

class Volume PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hostpath.Volume) */ {
 public:
  inline Volume() : Volume(nullptr) {}
  virtual ~Volume();
  explicit constexpr Volume(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Volume(const Volume& from);
  Volume(Volume&& from) noexcept
    : Volume() {
    *this = ::std::move(from);
  }

  inline Volume& operator=(const Volume& from) {
    CopyFrom(from);
    return *this;
  }
  inline Volume& operator=(Volume&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Volume& default_instance() {
    return *internal_default_instance();
  }
  static inline const Volume* internal_default_instance() {
    return reinterpret_cast<const Volume*>(
               &_Volume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Volume& a, Volume& b) {
    a.Swap(&b);
  }
  inline void Swap(Volume* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Volume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Volume* New() const final {
    return CreateMaybeMessage<Volume>(nullptr);
  }

  Volume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Volume>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Volume& from);
  void MergeFrom(const Volume& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Volume* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hostpath.Volume";
  }
  protected:
  explicit Volume(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_hostpath_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeNameFieldNumber = 1,
    kVolumeIdFieldNumber = 2,
    kImageFileNameFieldNumber = 4,
    kImageFilePathFieldNumber = 5,
    kVolSizeFieldNumber = 3,
  };
  // string volume_name = 1;
  void clear_volume_name();
  const std::string& volume_name() const;
  void set_volume_name(const std::string& value);
  void set_volume_name(std::string&& value);
  void set_volume_name(const char* value);
  void set_volume_name(const char* value, size_t size);
  std::string* mutable_volume_name();
  std::string* release_volume_name();
  void set_allocated_volume_name(std::string* volume_name);
  private:
  const std::string& _internal_volume_name() const;
  void _internal_set_volume_name(const std::string& value);
  std::string* _internal_mutable_volume_name();
  public:

  // string volume_id = 2;
  void clear_volume_id();
  const std::string& volume_id() const;
  void set_volume_id(const std::string& value);
  void set_volume_id(std::string&& value);
  void set_volume_id(const char* value);
  void set_volume_id(const char* value, size_t size);
  std::string* mutable_volume_id();
  std::string* release_volume_id();
  void set_allocated_volume_id(std::string* volume_id);
  private:
  const std::string& _internal_volume_id() const;
  void _internal_set_volume_id(const std::string& value);
  std::string* _internal_mutable_volume_id();
  public:

  // string image_file_name = 4;
  void clear_image_file_name();
  const std::string& image_file_name() const;
  void set_image_file_name(const std::string& value);
  void set_image_file_name(std::string&& value);
  void set_image_file_name(const char* value);
  void set_image_file_name(const char* value, size_t size);
  std::string* mutable_image_file_name();
  std::string* release_image_file_name();
  void set_allocated_image_file_name(std::string* image_file_name);
  private:
  const std::string& _internal_image_file_name() const;
  void _internal_set_image_file_name(const std::string& value);
  std::string* _internal_mutable_image_file_name();
  public:

  // string image_file_path = 5;
  void clear_image_file_path();
  const std::string& image_file_path() const;
  void set_image_file_path(const std::string& value);
  void set_image_file_path(std::string&& value);
  void set_image_file_path(const char* value);
  void set_image_file_path(const char* value, size_t size);
  std::string* mutable_image_file_path();
  std::string* release_image_file_path();
  void set_allocated_image_file_path(std::string* image_file_path);
  private:
  const std::string& _internal_image_file_path() const;
  void _internal_set_image_file_path(const std::string& value);
  std::string* _internal_mutable_image_file_path();
  public:

  // uint64 vol_size = 3;
  void clear_vol_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 vol_size() const;
  void set_vol_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_vol_size() const;
  void _internal_set_vol_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hostpath.Volume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_file_path_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vol_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hostpath_2eproto;
};
// -------------------------------------------------------------------

class HostPathState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hostpath.HostPathState) */ {
 public:
  inline HostPathState() : HostPathState(nullptr) {}
  virtual ~HostPathState();
  explicit constexpr HostPathState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostPathState(const HostPathState& from);
  HostPathState(HostPathState&& from) noexcept
    : HostPathState() {
    *this = ::std::move(from);
  }

  inline HostPathState& operator=(const HostPathState& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostPathState& operator=(HostPathState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostPathState& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostPathState* internal_default_instance() {
    return reinterpret_cast<const HostPathState*>(
               &_HostPathState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HostPathState& a, HostPathState& b) {
    a.Swap(&b);
  }
  inline void Swap(HostPathState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostPathState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostPathState* New() const final {
    return CreateMaybeMessage<HostPathState>(nullptr);
  }

  HostPathState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostPathState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostPathState& from);
  void MergeFrom(const HostPathState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostPathState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hostpath.HostPathState";
  }
  protected:
  explicit HostPathState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_hostpath_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeListFieldNumber = 1,
  };
  // repeated .hostpath.Volume volume_list = 1;
  int volume_list_size() const;
  private:
  int _internal_volume_list_size() const;
  public:
  void clear_volume_list();
  ::hostpath::Volume* mutable_volume_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hostpath::Volume >*
      mutable_volume_list();
  private:
  const ::hostpath::Volume& _internal_volume_list(int index) const;
  ::hostpath::Volume* _internal_add_volume_list();
  public:
  const ::hostpath::Volume& volume_list(int index) const;
  ::hostpath::Volume* add_volume_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hostpath::Volume >&
      volume_list() const;

  // @@protoc_insertion_point(class_scope:hostpath.HostPathState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hostpath::Volume > volume_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hostpath_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// string endpoint = 1;
inline void Config::clear_endpoint() {
  endpoint_.ClearToEmpty();
}
inline const std::string& Config::endpoint() const {
  // @@protoc_insertion_point(field_get:hostpath.Config.endpoint)
  return _internal_endpoint();
}
inline void Config::set_endpoint(const std::string& value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:hostpath.Config.endpoint)
}
inline std::string* Config::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:hostpath.Config.endpoint)
  return _internal_mutable_endpoint();
}
inline const std::string& Config::_internal_endpoint() const {
  return endpoint_.Get();
}
inline void Config::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Config::set_endpoint(std::string&& value) {
  
  endpoint_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hostpath.Config.endpoint)
}
inline void Config::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:hostpath.Config.endpoint)
}
inline void Config::set_endpoint(const char* value,
    size_t size) {
  
  endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hostpath.Config.endpoint)
}
inline std::string* Config::_internal_mutable_endpoint() {
  
  return endpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Config::release_endpoint() {
  // @@protoc_insertion_point(field_release:hostpath.Config.endpoint)
  return endpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Config::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hostpath.Config.endpoint)
}

// string node_name = 2;
inline void Config::clear_node_name() {
  node_name_.ClearToEmpty();
}
inline const std::string& Config::node_name() const {
  // @@protoc_insertion_point(field_get:hostpath.Config.node_name)
  return _internal_node_name();
}
inline void Config::set_node_name(const std::string& value) {
  _internal_set_node_name(value);
  // @@protoc_insertion_point(field_set:hostpath.Config.node_name)
}
inline std::string* Config::mutable_node_name() {
  // @@protoc_insertion_point(field_mutable:hostpath.Config.node_name)
  return _internal_mutable_node_name();
}
inline const std::string& Config::_internal_node_name() const {
  return node_name_.Get();
}
inline void Config::_internal_set_node_name(const std::string& value) {
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Config::set_node_name(std::string&& value) {
  
  node_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hostpath.Config.node_name)
}
inline void Config::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:hostpath.Config.node_name)
}
inline void Config::set_node_name(const char* value,
    size_t size) {
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hostpath.Config.node_name)
}
inline std::string* Config::_internal_mutable_node_name() {
  
  return node_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Config::release_node_name() {
  // @@protoc_insertion_point(field_release:hostpath.Config.node_name)
  return node_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Config::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hostpath.Config.node_name)
}

// string driver_name = 3;
inline void Config::clear_driver_name() {
  driver_name_.ClearToEmpty();
}
inline const std::string& Config::driver_name() const {
  // @@protoc_insertion_point(field_get:hostpath.Config.driver_name)
  return _internal_driver_name();
}
inline void Config::set_driver_name(const std::string& value) {
  _internal_set_driver_name(value);
  // @@protoc_insertion_point(field_set:hostpath.Config.driver_name)
}
inline std::string* Config::mutable_driver_name() {
  // @@protoc_insertion_point(field_mutable:hostpath.Config.driver_name)
  return _internal_mutable_driver_name();
}
inline const std::string& Config::_internal_driver_name() const {
  return driver_name_.Get();
}
inline void Config::_internal_set_driver_name(const std::string& value) {
  
  driver_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Config::set_driver_name(std::string&& value) {
  
  driver_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hostpath.Config.driver_name)
}
inline void Config::set_driver_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  driver_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:hostpath.Config.driver_name)
}
inline void Config::set_driver_name(const char* value,
    size_t size) {
  
  driver_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hostpath.Config.driver_name)
}
inline std::string* Config::_internal_mutable_driver_name() {
  
  return driver_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Config::release_driver_name() {
  // @@protoc_insertion_point(field_release:hostpath.Config.driver_name)
  return driver_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Config::set_allocated_driver_name(std::string* driver_name) {
  if (driver_name != nullptr) {
    
  } else {
    
  }
  driver_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hostpath.Config.driver_name)
}

// string vendor_version = 4;
inline void Config::clear_vendor_version() {
  vendor_version_.ClearToEmpty();
}
inline const std::string& Config::vendor_version() const {
  // @@protoc_insertion_point(field_get:hostpath.Config.vendor_version)
  return _internal_vendor_version();
}
inline void Config::set_vendor_version(const std::string& value) {
  _internal_set_vendor_version(value);
  // @@protoc_insertion_point(field_set:hostpath.Config.vendor_version)
}
inline std::string* Config::mutable_vendor_version() {
  // @@protoc_insertion_point(field_mutable:hostpath.Config.vendor_version)
  return _internal_mutable_vendor_version();
}
inline const std::string& Config::_internal_vendor_version() const {
  return vendor_version_.Get();
}
inline void Config::_internal_set_vendor_version(const std::string& value) {
  
  vendor_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Config::set_vendor_version(std::string&& value) {
  
  vendor_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hostpath.Config.vendor_version)
}
inline void Config::set_vendor_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendor_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:hostpath.Config.vendor_version)
}
inline void Config::set_vendor_version(const char* value,
    size_t size) {
  
  vendor_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hostpath.Config.vendor_version)
}
inline std::string* Config::_internal_mutable_vendor_version() {
  
  return vendor_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Config::release_vendor_version() {
  // @@protoc_insertion_point(field_release:hostpath.Config.vendor_version)
  return vendor_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Config::set_allocated_vendor_version(std::string* vendor_version) {
  if (vendor_version != nullptr) {
    
  } else {
    
  }
  vendor_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hostpath.Config.vendor_version)
}

// string state_directory = 5;
inline void Config::clear_state_directory() {
  state_directory_.ClearToEmpty();
}
inline const std::string& Config::state_directory() const {
  // @@protoc_insertion_point(field_get:hostpath.Config.state_directory)
  return _internal_state_directory();
}
inline void Config::set_state_directory(const std::string& value) {
  _internal_set_state_directory(value);
  // @@protoc_insertion_point(field_set:hostpath.Config.state_directory)
}
inline std::string* Config::mutable_state_directory() {
  // @@protoc_insertion_point(field_mutable:hostpath.Config.state_directory)
  return _internal_mutable_state_directory();
}
inline const std::string& Config::_internal_state_directory() const {
  return state_directory_.Get();
}
inline void Config::_internal_set_state_directory(const std::string& value) {
  
  state_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Config::set_state_directory(std::string&& value) {
  
  state_directory_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hostpath.Config.state_directory)
}
inline void Config::set_state_directory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:hostpath.Config.state_directory)
}
inline void Config::set_state_directory(const char* value,
    size_t size) {
  
  state_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hostpath.Config.state_directory)
}
inline std::string* Config::_internal_mutable_state_directory() {
  
  return state_directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Config::release_state_directory() {
  // @@protoc_insertion_point(field_release:hostpath.Config.state_directory)
  return state_directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Config::set_allocated_state_directory(std::string* state_directory) {
  if (state_directory != nullptr) {
    
  } else {
    
  }
  state_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_directory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hostpath.Config.state_directory)
}

// -------------------------------------------------------------------

// Volume

// string volume_name = 1;
inline void Volume::clear_volume_name() {
  volume_name_.ClearToEmpty();
}
inline const std::string& Volume::volume_name() const {
  // @@protoc_insertion_point(field_get:hostpath.Volume.volume_name)
  return _internal_volume_name();
}
inline void Volume::set_volume_name(const std::string& value) {
  _internal_set_volume_name(value);
  // @@protoc_insertion_point(field_set:hostpath.Volume.volume_name)
}
inline std::string* Volume::mutable_volume_name() {
  // @@protoc_insertion_point(field_mutable:hostpath.Volume.volume_name)
  return _internal_mutable_volume_name();
}
inline const std::string& Volume::_internal_volume_name() const {
  return volume_name_.Get();
}
inline void Volume::_internal_set_volume_name(const std::string& value) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Volume::set_volume_name(std::string&& value) {
  
  volume_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hostpath.Volume.volume_name)
}
inline void Volume::set_volume_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:hostpath.Volume.volume_name)
}
inline void Volume::set_volume_name(const char* value,
    size_t size) {
  
  volume_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hostpath.Volume.volume_name)
}
inline std::string* Volume::_internal_mutable_volume_name() {
  
  return volume_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Volume::release_volume_name() {
  // @@protoc_insertion_point(field_release:hostpath.Volume.volume_name)
  return volume_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Volume::set_allocated_volume_name(std::string* volume_name) {
  if (volume_name != nullptr) {
    
  } else {
    
  }
  volume_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hostpath.Volume.volume_name)
}

// string volume_id = 2;
inline void Volume::clear_volume_id() {
  volume_id_.ClearToEmpty();
}
inline const std::string& Volume::volume_id() const {
  // @@protoc_insertion_point(field_get:hostpath.Volume.volume_id)
  return _internal_volume_id();
}
inline void Volume::set_volume_id(const std::string& value) {
  _internal_set_volume_id(value);
  // @@protoc_insertion_point(field_set:hostpath.Volume.volume_id)
}
inline std::string* Volume::mutable_volume_id() {
  // @@protoc_insertion_point(field_mutable:hostpath.Volume.volume_id)
  return _internal_mutable_volume_id();
}
inline const std::string& Volume::_internal_volume_id() const {
  return volume_id_.Get();
}
inline void Volume::_internal_set_volume_id(const std::string& value) {
  
  volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Volume::set_volume_id(std::string&& value) {
  
  volume_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hostpath.Volume.volume_id)
}
inline void Volume::set_volume_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:hostpath.Volume.volume_id)
}
inline void Volume::set_volume_id(const char* value,
    size_t size) {
  
  volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hostpath.Volume.volume_id)
}
inline std::string* Volume::_internal_mutable_volume_id() {
  
  return volume_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Volume::release_volume_id() {
  // @@protoc_insertion_point(field_release:hostpath.Volume.volume_id)
  return volume_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Volume::set_allocated_volume_id(std::string* volume_id) {
  if (volume_id != nullptr) {
    
  } else {
    
  }
  volume_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hostpath.Volume.volume_id)
}

// uint64 vol_size = 3;
inline void Volume::clear_vol_size() {
  vol_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Volume::_internal_vol_size() const {
  return vol_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Volume::vol_size() const {
  // @@protoc_insertion_point(field_get:hostpath.Volume.vol_size)
  return _internal_vol_size();
}
inline void Volume::_internal_set_vol_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  vol_size_ = value;
}
inline void Volume::set_vol_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_vol_size(value);
  // @@protoc_insertion_point(field_set:hostpath.Volume.vol_size)
}

// string image_file_name = 4;
inline void Volume::clear_image_file_name() {
  image_file_name_.ClearToEmpty();
}
inline const std::string& Volume::image_file_name() const {
  // @@protoc_insertion_point(field_get:hostpath.Volume.image_file_name)
  return _internal_image_file_name();
}
inline void Volume::set_image_file_name(const std::string& value) {
  _internal_set_image_file_name(value);
  // @@protoc_insertion_point(field_set:hostpath.Volume.image_file_name)
}
inline std::string* Volume::mutable_image_file_name() {
  // @@protoc_insertion_point(field_mutable:hostpath.Volume.image_file_name)
  return _internal_mutable_image_file_name();
}
inline const std::string& Volume::_internal_image_file_name() const {
  return image_file_name_.Get();
}
inline void Volume::_internal_set_image_file_name(const std::string& value) {
  
  image_file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Volume::set_image_file_name(std::string&& value) {
  
  image_file_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hostpath.Volume.image_file_name)
}
inline void Volume::set_image_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:hostpath.Volume.image_file_name)
}
inline void Volume::set_image_file_name(const char* value,
    size_t size) {
  
  image_file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hostpath.Volume.image_file_name)
}
inline std::string* Volume::_internal_mutable_image_file_name() {
  
  return image_file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Volume::release_image_file_name() {
  // @@protoc_insertion_point(field_release:hostpath.Volume.image_file_name)
  return image_file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Volume::set_allocated_image_file_name(std::string* image_file_name) {
  if (image_file_name != nullptr) {
    
  } else {
    
  }
  image_file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hostpath.Volume.image_file_name)
}

// string image_file_path = 5;
inline void Volume::clear_image_file_path() {
  image_file_path_.ClearToEmpty();
}
inline const std::string& Volume::image_file_path() const {
  // @@protoc_insertion_point(field_get:hostpath.Volume.image_file_path)
  return _internal_image_file_path();
}
inline void Volume::set_image_file_path(const std::string& value) {
  _internal_set_image_file_path(value);
  // @@protoc_insertion_point(field_set:hostpath.Volume.image_file_path)
}
inline std::string* Volume::mutable_image_file_path() {
  // @@protoc_insertion_point(field_mutable:hostpath.Volume.image_file_path)
  return _internal_mutable_image_file_path();
}
inline const std::string& Volume::_internal_image_file_path() const {
  return image_file_path_.Get();
}
inline void Volume::_internal_set_image_file_path(const std::string& value) {
  
  image_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Volume::set_image_file_path(std::string&& value) {
  
  image_file_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hostpath.Volume.image_file_path)
}
inline void Volume::set_image_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:hostpath.Volume.image_file_path)
}
inline void Volume::set_image_file_path(const char* value,
    size_t size) {
  
  image_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hostpath.Volume.image_file_path)
}
inline std::string* Volume::_internal_mutable_image_file_path() {
  
  return image_file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Volume::release_image_file_path() {
  // @@protoc_insertion_point(field_release:hostpath.Volume.image_file_path)
  return image_file_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Volume::set_allocated_image_file_path(std::string* image_file_path) {
  if (image_file_path != nullptr) {
    
  } else {
    
  }
  image_file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_file_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hostpath.Volume.image_file_path)
}

// -------------------------------------------------------------------

// HostPathState

// repeated .hostpath.Volume volume_list = 1;
inline int HostPathState::_internal_volume_list_size() const {
  return volume_list_.size();
}
inline int HostPathState::volume_list_size() const {
  return _internal_volume_list_size();
}
inline void HostPathState::clear_volume_list() {
  volume_list_.Clear();
}
inline ::hostpath::Volume* HostPathState::mutable_volume_list(int index) {
  // @@protoc_insertion_point(field_mutable:hostpath.HostPathState.volume_list)
  return volume_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hostpath::Volume >*
HostPathState::mutable_volume_list() {
  // @@protoc_insertion_point(field_mutable_list:hostpath.HostPathState.volume_list)
  return &volume_list_;
}
inline const ::hostpath::Volume& HostPathState::_internal_volume_list(int index) const {
  return volume_list_.Get(index);
}
inline const ::hostpath::Volume& HostPathState::volume_list(int index) const {
  // @@protoc_insertion_point(field_get:hostpath.HostPathState.volume_list)
  return _internal_volume_list(index);
}
inline ::hostpath::Volume* HostPathState::_internal_add_volume_list() {
  return volume_list_.Add();
}
inline ::hostpath::Volume* HostPathState::add_volume_list() {
  // @@protoc_insertion_point(field_add:hostpath.HostPathState.volume_list)
  return _internal_add_volume_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hostpath::Volume >&
HostPathState::volume_list() const {
  // @@protoc_insertion_point(field_list:hostpath.HostPathState.volume_list)
  return volume_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hostpath

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hostpath_2eproto
