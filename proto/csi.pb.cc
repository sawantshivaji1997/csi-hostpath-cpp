// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csi.proto

#include "csi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace csi {
namespace v1 {
constexpr GetPluginInfoRequest::GetPluginInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetPluginInfoRequestDefaultTypeInternal {
  constexpr GetPluginInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPluginInfoRequestDefaultTypeInternal() {}
  union {
    GetPluginInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPluginInfoRequestDefaultTypeInternal _GetPluginInfoRequest_default_instance_;
constexpr GetPluginInfoResponse_ManifestEntry_DoNotUse::GetPluginInfoResponse_ManifestEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetPluginInfoResponse_ManifestEntry_DoNotUseDefaultTypeInternal {
  constexpr GetPluginInfoResponse_ManifestEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPluginInfoResponse_ManifestEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetPluginInfoResponse_ManifestEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPluginInfoResponse_ManifestEntry_DoNotUseDefaultTypeInternal _GetPluginInfoResponse_ManifestEntry_DoNotUse_default_instance_;
constexpr GetPluginInfoResponse::GetPluginInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : manifest_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vendor_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetPluginInfoResponseDefaultTypeInternal {
  constexpr GetPluginInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPluginInfoResponseDefaultTypeInternal() {}
  union {
    GetPluginInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPluginInfoResponseDefaultTypeInternal _GetPluginInfoResponse_default_instance_;
constexpr GetPluginCapabilitiesRequest::GetPluginCapabilitiesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetPluginCapabilitiesRequestDefaultTypeInternal {
  constexpr GetPluginCapabilitiesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPluginCapabilitiesRequestDefaultTypeInternal() {}
  union {
    GetPluginCapabilitiesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPluginCapabilitiesRequestDefaultTypeInternal _GetPluginCapabilitiesRequest_default_instance_;
constexpr GetPluginCapabilitiesResponse::GetPluginCapabilitiesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : capabilities_(){}
struct GetPluginCapabilitiesResponseDefaultTypeInternal {
  constexpr GetPluginCapabilitiesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPluginCapabilitiesResponseDefaultTypeInternal() {}
  union {
    GetPluginCapabilitiesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPluginCapabilitiesResponseDefaultTypeInternal _GetPluginCapabilitiesResponse_default_instance_;
constexpr PluginCapability_Service::PluginCapability_Service(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
{}
struct PluginCapability_ServiceDefaultTypeInternal {
  constexpr PluginCapability_ServiceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PluginCapability_ServiceDefaultTypeInternal() {}
  union {
    PluginCapability_Service _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PluginCapability_ServiceDefaultTypeInternal _PluginCapability_Service_default_instance_;
constexpr PluginCapability_VolumeExpansion::PluginCapability_VolumeExpansion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
{}
struct PluginCapability_VolumeExpansionDefaultTypeInternal {
  constexpr PluginCapability_VolumeExpansionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PluginCapability_VolumeExpansionDefaultTypeInternal() {}
  union {
    PluginCapability_VolumeExpansion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PluginCapability_VolumeExpansionDefaultTypeInternal _PluginCapability_VolumeExpansion_default_instance_;
constexpr PluginCapability::PluginCapability(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PluginCapabilityDefaultTypeInternal {
  constexpr PluginCapabilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PluginCapabilityDefaultTypeInternal() {}
  union {
    PluginCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PluginCapabilityDefaultTypeInternal _PluginCapability_default_instance_;
constexpr ProbeRequest::ProbeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ProbeRequestDefaultTypeInternal {
  constexpr ProbeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProbeRequestDefaultTypeInternal() {}
  union {
    ProbeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProbeRequestDefaultTypeInternal _ProbeRequest_default_instance_;
constexpr ProbeResponse::ProbeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ready_(nullptr){}
struct ProbeResponseDefaultTypeInternal {
  constexpr ProbeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProbeResponseDefaultTypeInternal() {}
  union {
    ProbeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProbeResponseDefaultTypeInternal _ProbeResponse_default_instance_;
constexpr CreateVolumeRequest_ParametersEntry_DoNotUse::CreateVolumeRequest_ParametersEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateVolumeRequest_ParametersEntry_DoNotUseDefaultTypeInternal {
  constexpr CreateVolumeRequest_ParametersEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateVolumeRequest_ParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateVolumeRequest_ParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateVolumeRequest_ParametersEntry_DoNotUseDefaultTypeInternal _CreateVolumeRequest_ParametersEntry_DoNotUse_default_instance_;
constexpr CreateVolumeRequest_SecretsEntry_DoNotUse::CreateVolumeRequest_SecretsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal {
  constexpr CreateVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateVolumeRequest_SecretsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal _CreateVolumeRequest_SecretsEntry_DoNotUse_default_instance_;
constexpr CreateVolumeRequest::CreateVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_capabilities_()
  , parameters_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , secrets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , capacity_range_(nullptr)
  , volume_content_source_(nullptr)
  , accessibility_requirements_(nullptr){}
struct CreateVolumeRequestDefaultTypeInternal {
  constexpr CreateVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateVolumeRequestDefaultTypeInternal() {}
  union {
    CreateVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateVolumeRequestDefaultTypeInternal _CreateVolumeRequest_default_instance_;
constexpr VolumeContentSource_SnapshotSource::VolumeContentSource_SnapshotSource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : snapshot_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VolumeContentSource_SnapshotSourceDefaultTypeInternal {
  constexpr VolumeContentSource_SnapshotSourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeContentSource_SnapshotSourceDefaultTypeInternal() {}
  union {
    VolumeContentSource_SnapshotSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeContentSource_SnapshotSourceDefaultTypeInternal _VolumeContentSource_SnapshotSource_default_instance_;
constexpr VolumeContentSource_VolumeSource::VolumeContentSource_VolumeSource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VolumeContentSource_VolumeSourceDefaultTypeInternal {
  constexpr VolumeContentSource_VolumeSourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeContentSource_VolumeSourceDefaultTypeInternal() {}
  union {
    VolumeContentSource_VolumeSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeContentSource_VolumeSourceDefaultTypeInternal _VolumeContentSource_VolumeSource_default_instance_;
constexpr VolumeContentSource::VolumeContentSource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct VolumeContentSourceDefaultTypeInternal {
  constexpr VolumeContentSourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeContentSourceDefaultTypeInternal() {}
  union {
    VolumeContentSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeContentSourceDefaultTypeInternal _VolumeContentSource_default_instance_;
constexpr CreateVolumeResponse::CreateVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_(nullptr){}
struct CreateVolumeResponseDefaultTypeInternal {
  constexpr CreateVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateVolumeResponseDefaultTypeInternal() {}
  union {
    CreateVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateVolumeResponseDefaultTypeInternal _CreateVolumeResponse_default_instance_;
constexpr VolumeCapability_BlockVolume::VolumeCapability_BlockVolume(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct VolumeCapability_BlockVolumeDefaultTypeInternal {
  constexpr VolumeCapability_BlockVolumeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeCapability_BlockVolumeDefaultTypeInternal() {}
  union {
    VolumeCapability_BlockVolume _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeCapability_BlockVolumeDefaultTypeInternal _VolumeCapability_BlockVolume_default_instance_;
constexpr VolumeCapability_MountVolume::VolumeCapability_MountVolume(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mount_flags_()
  , fs_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VolumeCapability_MountVolumeDefaultTypeInternal {
  constexpr VolumeCapability_MountVolumeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeCapability_MountVolumeDefaultTypeInternal() {}
  union {
    VolumeCapability_MountVolume _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeCapability_MountVolumeDefaultTypeInternal _VolumeCapability_MountVolume_default_instance_;
constexpr VolumeCapability_AccessMode::VolumeCapability_AccessMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_(0)
{}
struct VolumeCapability_AccessModeDefaultTypeInternal {
  constexpr VolumeCapability_AccessModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeCapability_AccessModeDefaultTypeInternal() {}
  union {
    VolumeCapability_AccessMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeCapability_AccessModeDefaultTypeInternal _VolumeCapability_AccessMode_default_instance_;
constexpr VolumeCapability::VolumeCapability(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : access_mode_(nullptr)
  , _oneof_case_{}{}
struct VolumeCapabilityDefaultTypeInternal {
  constexpr VolumeCapabilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeCapabilityDefaultTypeInternal() {}
  union {
    VolumeCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeCapabilityDefaultTypeInternal _VolumeCapability_default_instance_;
constexpr CapacityRange::CapacityRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : required_bytes_(PROTOBUF_LONGLONG(0))
  , limit_bytes_(PROTOBUF_LONGLONG(0)){}
struct CapacityRangeDefaultTypeInternal {
  constexpr CapacityRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CapacityRangeDefaultTypeInternal() {}
  union {
    CapacityRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CapacityRangeDefaultTypeInternal _CapacityRange_default_instance_;
constexpr Volume_VolumeContextEntry_DoNotUse::Volume_VolumeContextEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Volume_VolumeContextEntry_DoNotUseDefaultTypeInternal {
  constexpr Volume_VolumeContextEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Volume_VolumeContextEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Volume_VolumeContextEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Volume_VolumeContextEntry_DoNotUseDefaultTypeInternal _Volume_VolumeContextEntry_DoNotUse_default_instance_;
constexpr Volume::Volume(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_context_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , accessible_topology_()
  , volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_source_(nullptr)
  , capacity_bytes_(PROTOBUF_LONGLONG(0)){}
struct VolumeDefaultTypeInternal {
  constexpr VolumeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeDefaultTypeInternal() {}
  union {
    Volume _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeDefaultTypeInternal _Volume_default_instance_;
constexpr TopologyRequirement::TopologyRequirement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requisite_()
  , preferred_(){}
struct TopologyRequirementDefaultTypeInternal {
  constexpr TopologyRequirementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TopologyRequirementDefaultTypeInternal() {}
  union {
    TopologyRequirement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TopologyRequirementDefaultTypeInternal _TopologyRequirement_default_instance_;
constexpr Topology_SegmentsEntry_DoNotUse::Topology_SegmentsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Topology_SegmentsEntry_DoNotUseDefaultTypeInternal {
  constexpr Topology_SegmentsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Topology_SegmentsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Topology_SegmentsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Topology_SegmentsEntry_DoNotUseDefaultTypeInternal _Topology_SegmentsEntry_DoNotUse_default_instance_;
constexpr Topology::Topology(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segments_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct TopologyDefaultTypeInternal {
  constexpr TopologyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TopologyDefaultTypeInternal() {}
  union {
    Topology _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TopologyDefaultTypeInternal _Topology_default_instance_;
constexpr DeleteVolumeRequest_SecretsEntry_DoNotUse::DeleteVolumeRequest_SecretsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeleteVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal {
  constexpr DeleteVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DeleteVolumeRequest_SecretsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal _DeleteVolumeRequest_SecretsEntry_DoNotUse_default_instance_;
constexpr DeleteVolumeRequest::DeleteVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secrets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteVolumeRequestDefaultTypeInternal {
  constexpr DeleteVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteVolumeRequestDefaultTypeInternal() {}
  union {
    DeleteVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteVolumeRequestDefaultTypeInternal _DeleteVolumeRequest_default_instance_;
constexpr DeleteVolumeResponse::DeleteVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeleteVolumeResponseDefaultTypeInternal {
  constexpr DeleteVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteVolumeResponseDefaultTypeInternal() {}
  union {
    DeleteVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteVolumeResponseDefaultTypeInternal _DeleteVolumeResponse_default_instance_;
constexpr ControllerPublishVolumeRequest_SecretsEntry_DoNotUse::ControllerPublishVolumeRequest_SecretsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ControllerPublishVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal {
  constexpr ControllerPublishVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerPublishVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ControllerPublishVolumeRequest_SecretsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerPublishVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal _ControllerPublishVolumeRequest_SecretsEntry_DoNotUse_default_instance_;
constexpr ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse::ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal {
  constexpr ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal _ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse_default_instance_;
constexpr ControllerPublishVolumeRequest::ControllerPublishVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secrets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , volume_context_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_capability_(nullptr)
  , readonly_(false){}
struct ControllerPublishVolumeRequestDefaultTypeInternal {
  constexpr ControllerPublishVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerPublishVolumeRequestDefaultTypeInternal() {}
  union {
    ControllerPublishVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerPublishVolumeRequestDefaultTypeInternal _ControllerPublishVolumeRequest_default_instance_;
constexpr ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse::ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ControllerPublishVolumeResponse_PublishContextEntry_DoNotUseDefaultTypeInternal {
  constexpr ControllerPublishVolumeResponse_PublishContextEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerPublishVolumeResponse_PublishContextEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerPublishVolumeResponse_PublishContextEntry_DoNotUseDefaultTypeInternal _ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse_default_instance_;
constexpr ControllerPublishVolumeResponse::ControllerPublishVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publish_context_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ControllerPublishVolumeResponseDefaultTypeInternal {
  constexpr ControllerPublishVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerPublishVolumeResponseDefaultTypeInternal() {}
  union {
    ControllerPublishVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerPublishVolumeResponseDefaultTypeInternal _ControllerPublishVolumeResponse_default_instance_;
constexpr ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse::ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal {
  constexpr ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal _ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse_default_instance_;
constexpr ControllerUnpublishVolumeRequest::ControllerUnpublishVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secrets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ControllerUnpublishVolumeRequestDefaultTypeInternal {
  constexpr ControllerUnpublishVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerUnpublishVolumeRequestDefaultTypeInternal() {}
  union {
    ControllerUnpublishVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerUnpublishVolumeRequestDefaultTypeInternal _ControllerUnpublishVolumeRequest_default_instance_;
constexpr ControllerUnpublishVolumeResponse::ControllerUnpublishVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ControllerUnpublishVolumeResponseDefaultTypeInternal {
  constexpr ControllerUnpublishVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerUnpublishVolumeResponseDefaultTypeInternal() {}
  union {
    ControllerUnpublishVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerUnpublishVolumeResponseDefaultTypeInternal _ControllerUnpublishVolumeResponse_default_instance_;
constexpr ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse::ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal {
  constexpr ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal _ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse_default_instance_;
constexpr ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse::ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUseDefaultTypeInternal {
  constexpr ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUseDefaultTypeInternal _ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse_default_instance_;
constexpr ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse::ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUseDefaultTypeInternal {
  constexpr ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUseDefaultTypeInternal _ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse_default_instance_;
constexpr ValidateVolumeCapabilitiesRequest::ValidateVolumeCapabilitiesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_context_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , volume_capabilities_()
  , parameters_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , secrets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ValidateVolumeCapabilitiesRequestDefaultTypeInternal {
  constexpr ValidateVolumeCapabilitiesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateVolumeCapabilitiesRequestDefaultTypeInternal() {}
  union {
    ValidateVolumeCapabilitiesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateVolumeCapabilitiesRequestDefaultTypeInternal _ValidateVolumeCapabilitiesRequest_default_instance_;
constexpr ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse::ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUseDefaultTypeInternal {
  constexpr ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUseDefaultTypeInternal _ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse_default_instance_;
constexpr ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse::ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUseDefaultTypeInternal {
  constexpr ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUseDefaultTypeInternal _ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse_default_instance_;
constexpr ValidateVolumeCapabilitiesResponse_Confirmed::ValidateVolumeCapabilitiesResponse_Confirmed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_context_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , volume_capabilities_()
  , parameters_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ValidateVolumeCapabilitiesResponse_ConfirmedDefaultTypeInternal {
  constexpr ValidateVolumeCapabilitiesResponse_ConfirmedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateVolumeCapabilitiesResponse_ConfirmedDefaultTypeInternal() {}
  union {
    ValidateVolumeCapabilitiesResponse_Confirmed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateVolumeCapabilitiesResponse_ConfirmedDefaultTypeInternal _ValidateVolumeCapabilitiesResponse_Confirmed_default_instance_;
constexpr ValidateVolumeCapabilitiesResponse::ValidateVolumeCapabilitiesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , confirmed_(nullptr){}
struct ValidateVolumeCapabilitiesResponseDefaultTypeInternal {
  constexpr ValidateVolumeCapabilitiesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateVolumeCapabilitiesResponseDefaultTypeInternal() {}
  union {
    ValidateVolumeCapabilitiesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateVolumeCapabilitiesResponseDefaultTypeInternal _ValidateVolumeCapabilitiesResponse_default_instance_;
constexpr ListVolumesRequest::ListVolumesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : starting_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_entries_(0){}
struct ListVolumesRequestDefaultTypeInternal {
  constexpr ListVolumesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListVolumesRequestDefaultTypeInternal() {}
  union {
    ListVolumesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListVolumesRequestDefaultTypeInternal _ListVolumesRequest_default_instance_;
constexpr ListVolumesResponse_VolumeStatus::ListVolumesResponse_VolumeStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : published_node_ids_()
  , volume_condition_(nullptr){}
struct ListVolumesResponse_VolumeStatusDefaultTypeInternal {
  constexpr ListVolumesResponse_VolumeStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListVolumesResponse_VolumeStatusDefaultTypeInternal() {}
  union {
    ListVolumesResponse_VolumeStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListVolumesResponse_VolumeStatusDefaultTypeInternal _ListVolumesResponse_VolumeStatus_default_instance_;
constexpr ListVolumesResponse_Entry::ListVolumesResponse_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_(nullptr)
  , status_(nullptr){}
struct ListVolumesResponse_EntryDefaultTypeInternal {
  constexpr ListVolumesResponse_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListVolumesResponse_EntryDefaultTypeInternal() {}
  union {
    ListVolumesResponse_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListVolumesResponse_EntryDefaultTypeInternal _ListVolumesResponse_Entry_default_instance_;
constexpr ListVolumesResponse::ListVolumesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , next_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListVolumesResponseDefaultTypeInternal {
  constexpr ListVolumesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListVolumesResponseDefaultTypeInternal() {}
  union {
    ListVolumesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListVolumesResponseDefaultTypeInternal _ListVolumesResponse_default_instance_;
constexpr ControllerGetVolumeRequest::ControllerGetVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ControllerGetVolumeRequestDefaultTypeInternal {
  constexpr ControllerGetVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerGetVolumeRequestDefaultTypeInternal() {}
  union {
    ControllerGetVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerGetVolumeRequestDefaultTypeInternal _ControllerGetVolumeRequest_default_instance_;
constexpr ControllerGetVolumeResponse_VolumeStatus::ControllerGetVolumeResponse_VolumeStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : published_node_ids_()
  , volume_condition_(nullptr){}
struct ControllerGetVolumeResponse_VolumeStatusDefaultTypeInternal {
  constexpr ControllerGetVolumeResponse_VolumeStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerGetVolumeResponse_VolumeStatusDefaultTypeInternal() {}
  union {
    ControllerGetVolumeResponse_VolumeStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerGetVolumeResponse_VolumeStatusDefaultTypeInternal _ControllerGetVolumeResponse_VolumeStatus_default_instance_;
constexpr ControllerGetVolumeResponse::ControllerGetVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_(nullptr)
  , status_(nullptr){}
struct ControllerGetVolumeResponseDefaultTypeInternal {
  constexpr ControllerGetVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerGetVolumeResponseDefaultTypeInternal() {}
  union {
    ControllerGetVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerGetVolumeResponseDefaultTypeInternal _ControllerGetVolumeResponse_default_instance_;
constexpr GetCapacityRequest_ParametersEntry_DoNotUse::GetCapacityRequest_ParametersEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetCapacityRequest_ParametersEntry_DoNotUseDefaultTypeInternal {
  constexpr GetCapacityRequest_ParametersEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCapacityRequest_ParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetCapacityRequest_ParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCapacityRequest_ParametersEntry_DoNotUseDefaultTypeInternal _GetCapacityRequest_ParametersEntry_DoNotUse_default_instance_;
constexpr GetCapacityRequest::GetCapacityRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_capabilities_()
  , parameters_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , accessible_topology_(nullptr){}
struct GetCapacityRequestDefaultTypeInternal {
  constexpr GetCapacityRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCapacityRequestDefaultTypeInternal() {}
  union {
    GetCapacityRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCapacityRequestDefaultTypeInternal _GetCapacityRequest_default_instance_;
constexpr GetCapacityResponse::GetCapacityResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : maximum_volume_size_(nullptr)
  , minimum_volume_size_(nullptr)
  , available_capacity_(PROTOBUF_LONGLONG(0)){}
struct GetCapacityResponseDefaultTypeInternal {
  constexpr GetCapacityResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCapacityResponseDefaultTypeInternal() {}
  union {
    GetCapacityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCapacityResponseDefaultTypeInternal _GetCapacityResponse_default_instance_;
constexpr ControllerGetCapabilitiesRequest::ControllerGetCapabilitiesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ControllerGetCapabilitiesRequestDefaultTypeInternal {
  constexpr ControllerGetCapabilitiesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerGetCapabilitiesRequestDefaultTypeInternal() {}
  union {
    ControllerGetCapabilitiesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerGetCapabilitiesRequestDefaultTypeInternal _ControllerGetCapabilitiesRequest_default_instance_;
constexpr ControllerGetCapabilitiesResponse::ControllerGetCapabilitiesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : capabilities_(){}
struct ControllerGetCapabilitiesResponseDefaultTypeInternal {
  constexpr ControllerGetCapabilitiesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerGetCapabilitiesResponseDefaultTypeInternal() {}
  union {
    ControllerGetCapabilitiesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerGetCapabilitiesResponseDefaultTypeInternal _ControllerGetCapabilitiesResponse_default_instance_;
constexpr ControllerServiceCapability_RPC::ControllerServiceCapability_RPC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
{}
struct ControllerServiceCapability_RPCDefaultTypeInternal {
  constexpr ControllerServiceCapability_RPCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerServiceCapability_RPCDefaultTypeInternal() {}
  union {
    ControllerServiceCapability_RPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerServiceCapability_RPCDefaultTypeInternal _ControllerServiceCapability_RPC_default_instance_;
constexpr ControllerServiceCapability::ControllerServiceCapability(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ControllerServiceCapabilityDefaultTypeInternal {
  constexpr ControllerServiceCapabilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerServiceCapabilityDefaultTypeInternal() {}
  union {
    ControllerServiceCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerServiceCapabilityDefaultTypeInternal _ControllerServiceCapability_default_instance_;
constexpr CreateSnapshotRequest_SecretsEntry_DoNotUse::CreateSnapshotRequest_SecretsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateSnapshotRequest_SecretsEntry_DoNotUseDefaultTypeInternal {
  constexpr CreateSnapshotRequest_SecretsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateSnapshotRequest_SecretsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateSnapshotRequest_SecretsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateSnapshotRequest_SecretsEntry_DoNotUseDefaultTypeInternal _CreateSnapshotRequest_SecretsEntry_DoNotUse_default_instance_;
constexpr CreateSnapshotRequest_ParametersEntry_DoNotUse::CreateSnapshotRequest_ParametersEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateSnapshotRequest_ParametersEntry_DoNotUseDefaultTypeInternal {
  constexpr CreateSnapshotRequest_ParametersEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateSnapshotRequest_ParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateSnapshotRequest_ParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateSnapshotRequest_ParametersEntry_DoNotUseDefaultTypeInternal _CreateSnapshotRequest_ParametersEntry_DoNotUse_default_instance_;
constexpr CreateSnapshotRequest::CreateSnapshotRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secrets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , parameters_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , source_volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateSnapshotRequestDefaultTypeInternal {
  constexpr CreateSnapshotRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateSnapshotRequestDefaultTypeInternal() {}
  union {
    CreateSnapshotRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateSnapshotRequestDefaultTypeInternal _CreateSnapshotRequest_default_instance_;
constexpr CreateSnapshotResponse::CreateSnapshotResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : snapshot_(nullptr){}
struct CreateSnapshotResponseDefaultTypeInternal {
  constexpr CreateSnapshotResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateSnapshotResponseDefaultTypeInternal() {}
  union {
    CreateSnapshotResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateSnapshotResponseDefaultTypeInternal _CreateSnapshotResponse_default_instance_;
constexpr Snapshot::Snapshot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : snapshot_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creation_time_(nullptr)
  , size_bytes_(PROTOBUF_LONGLONG(0))
  , ready_to_use_(false){}
struct SnapshotDefaultTypeInternal {
  constexpr SnapshotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnapshotDefaultTypeInternal() {}
  union {
    Snapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnapshotDefaultTypeInternal _Snapshot_default_instance_;
constexpr DeleteSnapshotRequest_SecretsEntry_DoNotUse::DeleteSnapshotRequest_SecretsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeleteSnapshotRequest_SecretsEntry_DoNotUseDefaultTypeInternal {
  constexpr DeleteSnapshotRequest_SecretsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteSnapshotRequest_SecretsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DeleteSnapshotRequest_SecretsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteSnapshotRequest_SecretsEntry_DoNotUseDefaultTypeInternal _DeleteSnapshotRequest_SecretsEntry_DoNotUse_default_instance_;
constexpr DeleteSnapshotRequest::DeleteSnapshotRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secrets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , snapshot_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteSnapshotRequestDefaultTypeInternal {
  constexpr DeleteSnapshotRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteSnapshotRequestDefaultTypeInternal() {}
  union {
    DeleteSnapshotRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteSnapshotRequestDefaultTypeInternal _DeleteSnapshotRequest_default_instance_;
constexpr DeleteSnapshotResponse::DeleteSnapshotResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeleteSnapshotResponseDefaultTypeInternal {
  constexpr DeleteSnapshotResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteSnapshotResponseDefaultTypeInternal() {}
  union {
    DeleteSnapshotResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteSnapshotResponseDefaultTypeInternal _DeleteSnapshotResponse_default_instance_;
constexpr ListSnapshotsRequest_SecretsEntry_DoNotUse::ListSnapshotsRequest_SecretsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListSnapshotsRequest_SecretsEntry_DoNotUseDefaultTypeInternal {
  constexpr ListSnapshotsRequest_SecretsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSnapshotsRequest_SecretsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ListSnapshotsRequest_SecretsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSnapshotsRequest_SecretsEntry_DoNotUseDefaultTypeInternal _ListSnapshotsRequest_SecretsEntry_DoNotUse_default_instance_;
constexpr ListSnapshotsRequest::ListSnapshotsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secrets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , starting_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , snapshot_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_entries_(0){}
struct ListSnapshotsRequestDefaultTypeInternal {
  constexpr ListSnapshotsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSnapshotsRequestDefaultTypeInternal() {}
  union {
    ListSnapshotsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSnapshotsRequestDefaultTypeInternal _ListSnapshotsRequest_default_instance_;
constexpr ListSnapshotsResponse_Entry::ListSnapshotsResponse_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : snapshot_(nullptr){}
struct ListSnapshotsResponse_EntryDefaultTypeInternal {
  constexpr ListSnapshotsResponse_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSnapshotsResponse_EntryDefaultTypeInternal() {}
  union {
    ListSnapshotsResponse_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSnapshotsResponse_EntryDefaultTypeInternal _ListSnapshotsResponse_Entry_default_instance_;
constexpr ListSnapshotsResponse::ListSnapshotsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , next_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListSnapshotsResponseDefaultTypeInternal {
  constexpr ListSnapshotsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSnapshotsResponseDefaultTypeInternal() {}
  union {
    ListSnapshotsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSnapshotsResponseDefaultTypeInternal _ListSnapshotsResponse_default_instance_;
constexpr ControllerExpandVolumeRequest_SecretsEntry_DoNotUse::ControllerExpandVolumeRequest_SecretsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ControllerExpandVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal {
  constexpr ControllerExpandVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerExpandVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ControllerExpandVolumeRequest_SecretsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerExpandVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal _ControllerExpandVolumeRequest_SecretsEntry_DoNotUse_default_instance_;
constexpr ControllerExpandVolumeRequest::ControllerExpandVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secrets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , capacity_range_(nullptr)
  , volume_capability_(nullptr){}
struct ControllerExpandVolumeRequestDefaultTypeInternal {
  constexpr ControllerExpandVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerExpandVolumeRequestDefaultTypeInternal() {}
  union {
    ControllerExpandVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerExpandVolumeRequestDefaultTypeInternal _ControllerExpandVolumeRequest_default_instance_;
constexpr ControllerExpandVolumeResponse::ControllerExpandVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : capacity_bytes_(PROTOBUF_LONGLONG(0))
  , node_expansion_required_(false){}
struct ControllerExpandVolumeResponseDefaultTypeInternal {
  constexpr ControllerExpandVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerExpandVolumeResponseDefaultTypeInternal() {}
  union {
    ControllerExpandVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerExpandVolumeResponseDefaultTypeInternal _ControllerExpandVolumeResponse_default_instance_;
constexpr NodeStageVolumeRequest_PublishContextEntry_DoNotUse::NodeStageVolumeRequest_PublishContextEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodeStageVolumeRequest_PublishContextEntry_DoNotUseDefaultTypeInternal {
  constexpr NodeStageVolumeRequest_PublishContextEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeStageVolumeRequest_PublishContextEntry_DoNotUseDefaultTypeInternal() {}
  union {
    NodeStageVolumeRequest_PublishContextEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeStageVolumeRequest_PublishContextEntry_DoNotUseDefaultTypeInternal _NodeStageVolumeRequest_PublishContextEntry_DoNotUse_default_instance_;
constexpr NodeStageVolumeRequest_SecretsEntry_DoNotUse::NodeStageVolumeRequest_SecretsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodeStageVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal {
  constexpr NodeStageVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeStageVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    NodeStageVolumeRequest_SecretsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeStageVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal _NodeStageVolumeRequest_SecretsEntry_DoNotUse_default_instance_;
constexpr NodeStageVolumeRequest_VolumeContextEntry_DoNotUse::NodeStageVolumeRequest_VolumeContextEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodeStageVolumeRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal {
  constexpr NodeStageVolumeRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeStageVolumeRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal() {}
  union {
    NodeStageVolumeRequest_VolumeContextEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeStageVolumeRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal _NodeStageVolumeRequest_VolumeContextEntry_DoNotUse_default_instance_;
constexpr NodeStageVolumeRequest::NodeStageVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publish_context_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , secrets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , volume_context_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , staging_target_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_capability_(nullptr){}
struct NodeStageVolumeRequestDefaultTypeInternal {
  constexpr NodeStageVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeStageVolumeRequestDefaultTypeInternal() {}
  union {
    NodeStageVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeStageVolumeRequestDefaultTypeInternal _NodeStageVolumeRequest_default_instance_;
constexpr NodeStageVolumeResponse::NodeStageVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodeStageVolumeResponseDefaultTypeInternal {
  constexpr NodeStageVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeStageVolumeResponseDefaultTypeInternal() {}
  union {
    NodeStageVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeStageVolumeResponseDefaultTypeInternal _NodeStageVolumeResponse_default_instance_;
constexpr NodeUnstageVolumeRequest::NodeUnstageVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , staging_target_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NodeUnstageVolumeRequestDefaultTypeInternal {
  constexpr NodeUnstageVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeUnstageVolumeRequestDefaultTypeInternal() {}
  union {
    NodeUnstageVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeUnstageVolumeRequestDefaultTypeInternal _NodeUnstageVolumeRequest_default_instance_;
constexpr NodeUnstageVolumeResponse::NodeUnstageVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodeUnstageVolumeResponseDefaultTypeInternal {
  constexpr NodeUnstageVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeUnstageVolumeResponseDefaultTypeInternal() {}
  union {
    NodeUnstageVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeUnstageVolumeResponseDefaultTypeInternal _NodeUnstageVolumeResponse_default_instance_;
constexpr NodePublishVolumeRequest_PublishContextEntry_DoNotUse::NodePublishVolumeRequest_PublishContextEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodePublishVolumeRequest_PublishContextEntry_DoNotUseDefaultTypeInternal {
  constexpr NodePublishVolumeRequest_PublishContextEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodePublishVolumeRequest_PublishContextEntry_DoNotUseDefaultTypeInternal() {}
  union {
    NodePublishVolumeRequest_PublishContextEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodePublishVolumeRequest_PublishContextEntry_DoNotUseDefaultTypeInternal _NodePublishVolumeRequest_PublishContextEntry_DoNotUse_default_instance_;
constexpr NodePublishVolumeRequest_SecretsEntry_DoNotUse::NodePublishVolumeRequest_SecretsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodePublishVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal {
  constexpr NodePublishVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodePublishVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    NodePublishVolumeRequest_SecretsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodePublishVolumeRequest_SecretsEntry_DoNotUseDefaultTypeInternal _NodePublishVolumeRequest_SecretsEntry_DoNotUse_default_instance_;
constexpr NodePublishVolumeRequest_VolumeContextEntry_DoNotUse::NodePublishVolumeRequest_VolumeContextEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodePublishVolumeRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal {
  constexpr NodePublishVolumeRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodePublishVolumeRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal() {}
  union {
    NodePublishVolumeRequest_VolumeContextEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodePublishVolumeRequest_VolumeContextEntry_DoNotUseDefaultTypeInternal _NodePublishVolumeRequest_VolumeContextEntry_DoNotUse_default_instance_;
constexpr NodePublishVolumeRequest::NodePublishVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publish_context_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , secrets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , volume_context_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , staging_target_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_capability_(nullptr)
  , readonly_(false){}
struct NodePublishVolumeRequestDefaultTypeInternal {
  constexpr NodePublishVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodePublishVolumeRequestDefaultTypeInternal() {}
  union {
    NodePublishVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodePublishVolumeRequestDefaultTypeInternal _NodePublishVolumeRequest_default_instance_;
constexpr NodePublishVolumeResponse::NodePublishVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodePublishVolumeResponseDefaultTypeInternal {
  constexpr NodePublishVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodePublishVolumeResponseDefaultTypeInternal() {}
  union {
    NodePublishVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodePublishVolumeResponseDefaultTypeInternal _NodePublishVolumeResponse_default_instance_;
constexpr NodeUnpublishVolumeRequest::NodeUnpublishVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NodeUnpublishVolumeRequestDefaultTypeInternal {
  constexpr NodeUnpublishVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeUnpublishVolumeRequestDefaultTypeInternal() {}
  union {
    NodeUnpublishVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeUnpublishVolumeRequestDefaultTypeInternal _NodeUnpublishVolumeRequest_default_instance_;
constexpr NodeUnpublishVolumeResponse::NodeUnpublishVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodeUnpublishVolumeResponseDefaultTypeInternal {
  constexpr NodeUnpublishVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeUnpublishVolumeResponseDefaultTypeInternal() {}
  union {
    NodeUnpublishVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeUnpublishVolumeResponseDefaultTypeInternal _NodeUnpublishVolumeResponse_default_instance_;
constexpr NodeGetVolumeStatsRequest::NodeGetVolumeStatsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , staging_target_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NodeGetVolumeStatsRequestDefaultTypeInternal {
  constexpr NodeGetVolumeStatsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeGetVolumeStatsRequestDefaultTypeInternal() {}
  union {
    NodeGetVolumeStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeGetVolumeStatsRequestDefaultTypeInternal _NodeGetVolumeStatsRequest_default_instance_;
constexpr NodeGetVolumeStatsResponse::NodeGetVolumeStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : usage_()
  , volume_condition_(nullptr){}
struct NodeGetVolumeStatsResponseDefaultTypeInternal {
  constexpr NodeGetVolumeStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeGetVolumeStatsResponseDefaultTypeInternal() {}
  union {
    NodeGetVolumeStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeGetVolumeStatsResponseDefaultTypeInternal _NodeGetVolumeStatsResponse_default_instance_;
constexpr VolumeUsage::VolumeUsage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : available_(PROTOBUF_LONGLONG(0))
  , total_(PROTOBUF_LONGLONG(0))
  , used_(PROTOBUF_LONGLONG(0))
  , unit_(0)
{}
struct VolumeUsageDefaultTypeInternal {
  constexpr VolumeUsageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeUsageDefaultTypeInternal() {}
  union {
    VolumeUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeUsageDefaultTypeInternal _VolumeUsage_default_instance_;
constexpr VolumeCondition::VolumeCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , abnormal_(false){}
struct VolumeConditionDefaultTypeInternal {
  constexpr VolumeConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeConditionDefaultTypeInternal() {}
  union {
    VolumeCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeConditionDefaultTypeInternal _VolumeCondition_default_instance_;
constexpr NodeGetCapabilitiesRequest::NodeGetCapabilitiesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodeGetCapabilitiesRequestDefaultTypeInternal {
  constexpr NodeGetCapabilitiesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeGetCapabilitiesRequestDefaultTypeInternal() {}
  union {
    NodeGetCapabilitiesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeGetCapabilitiesRequestDefaultTypeInternal _NodeGetCapabilitiesRequest_default_instance_;
constexpr NodeGetCapabilitiesResponse::NodeGetCapabilitiesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : capabilities_(){}
struct NodeGetCapabilitiesResponseDefaultTypeInternal {
  constexpr NodeGetCapabilitiesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeGetCapabilitiesResponseDefaultTypeInternal() {}
  union {
    NodeGetCapabilitiesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeGetCapabilitiesResponseDefaultTypeInternal _NodeGetCapabilitiesResponse_default_instance_;
constexpr NodeServiceCapability_RPC::NodeServiceCapability_RPC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
{}
struct NodeServiceCapability_RPCDefaultTypeInternal {
  constexpr NodeServiceCapability_RPCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeServiceCapability_RPCDefaultTypeInternal() {}
  union {
    NodeServiceCapability_RPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeServiceCapability_RPCDefaultTypeInternal _NodeServiceCapability_RPC_default_instance_;
constexpr NodeServiceCapability::NodeServiceCapability(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct NodeServiceCapabilityDefaultTypeInternal {
  constexpr NodeServiceCapabilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeServiceCapabilityDefaultTypeInternal() {}
  union {
    NodeServiceCapability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeServiceCapabilityDefaultTypeInternal _NodeServiceCapability_default_instance_;
constexpr NodeGetInfoRequest::NodeGetInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodeGetInfoRequestDefaultTypeInternal {
  constexpr NodeGetInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeGetInfoRequestDefaultTypeInternal() {}
  union {
    NodeGetInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeGetInfoRequestDefaultTypeInternal _NodeGetInfoRequest_default_instance_;
constexpr NodeGetInfoResponse::NodeGetInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accessible_topology_(nullptr)
  , max_volumes_per_node_(PROTOBUF_LONGLONG(0)){}
struct NodeGetInfoResponseDefaultTypeInternal {
  constexpr NodeGetInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeGetInfoResponseDefaultTypeInternal() {}
  union {
    NodeGetInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeGetInfoResponseDefaultTypeInternal _NodeGetInfoResponse_default_instance_;
constexpr NodeExpandVolumeRequest::NodeExpandVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , staging_target_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , capacity_range_(nullptr)
  , volume_capability_(nullptr){}
struct NodeExpandVolumeRequestDefaultTypeInternal {
  constexpr NodeExpandVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExpandVolumeRequestDefaultTypeInternal() {}
  union {
    NodeExpandVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExpandVolumeRequestDefaultTypeInternal _NodeExpandVolumeRequest_default_instance_;
constexpr NodeExpandVolumeResponse::NodeExpandVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : capacity_bytes_(PROTOBUF_LONGLONG(0)){}
struct NodeExpandVolumeResponseDefaultTypeInternal {
  constexpr NodeExpandVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExpandVolumeResponseDefaultTypeInternal() {}
  union {
    NodeExpandVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExpandVolumeResponseDefaultTypeInternal _NodeExpandVolumeResponse_default_instance_;
}  // namespace v1
}  // namespace csi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_csi_2eproto[101];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_csi_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_csi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_csi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetPluginInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetPluginInfoResponse_ManifestEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetPluginInfoResponse_ManifestEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetPluginInfoResponse_ManifestEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetPluginInfoResponse_ManifestEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetPluginInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetPluginInfoResponse, name_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetPluginInfoResponse, vendor_version_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetPluginInfoResponse, manifest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetPluginCapabilitiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetPluginCapabilitiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetPluginCapabilitiesResponse, capabilities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::PluginCapability_Service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::PluginCapability_Service, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::PluginCapability_VolumeExpansion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::PluginCapability_VolumeExpansion, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::PluginCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::csi::v1::PluginCapability, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::csi::v1::PluginCapability, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ProbeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ProbeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ProbeResponse, ready_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest_ParametersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest_SecretsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest_SecretsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest_SecretsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest_SecretsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest, name_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest, capacity_range_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest, volume_capabilities_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest, parameters_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest, secrets_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest, volume_content_source_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeRequest, accessibility_requirements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeContentSource_SnapshotSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeContentSource_SnapshotSource, snapshot_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeContentSource_VolumeSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeContentSource_VolumeSource, volume_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeContentSource, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeContentSource, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeContentSource, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateVolumeResponse, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeCapability_BlockVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeCapability_MountVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeCapability_MountVolume, fs_type_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeCapability_MountVolume, mount_flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeCapability_AccessMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeCapability_AccessMode, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeCapability, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeCapability, access_mode_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeCapability, access_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::CapacityRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::CapacityRange, required_bytes_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CapacityRange, limit_bytes_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::Volume_VolumeContextEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::Volume_VolumeContextEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::Volume_VolumeContextEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::Volume_VolumeContextEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::Volume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::Volume, capacity_bytes_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::Volume, volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::Volume, volume_context_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::Volume, content_source_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::Volume, accessible_topology_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::TopologyRequirement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::TopologyRequirement, requisite_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::TopologyRequirement, preferred_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::Topology_SegmentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::Topology_SegmentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::Topology_SegmentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::Topology_SegmentsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::Topology, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::Topology, segments_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteVolumeRequest_SecretsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteVolumeRequest_SecretsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteVolumeRequest_SecretsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteVolumeRequest_SecretsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteVolumeRequest, volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteVolumeRequest, secrets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest_SecretsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest_SecretsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest_SecretsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest_SecretsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest, volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest, node_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest, volume_capability_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest, readonly_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest, secrets_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeRequest, volume_context_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerPublishVolumeResponse, publish_context_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerUnpublishVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerUnpublishVolumeRequest, volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerUnpublishVolumeRequest, node_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerUnpublishVolumeRequest, secrets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerUnpublishVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest, volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest, volume_context_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest, volume_capabilities_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest, parameters_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesRequest, secrets_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed, volume_context_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed, volume_capabilities_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse, confirmed_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ValidateVolumeCapabilitiesResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListVolumesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListVolumesRequest, max_entries_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListVolumesRequest, starting_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListVolumesResponse_VolumeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListVolumesResponse_VolumeStatus, published_node_ids_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListVolumesResponse_VolumeStatus, volume_condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListVolumesResponse_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListVolumesResponse_Entry, volume_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListVolumesResponse_Entry, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListVolumesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListVolumesResponse, entries_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListVolumesResponse, next_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerGetVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerGetVolumeRequest, volume_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerGetVolumeResponse_VolumeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerGetVolumeResponse_VolumeStatus, published_node_ids_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerGetVolumeResponse_VolumeStatus, volume_condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerGetVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerGetVolumeResponse, volume_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerGetVolumeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetCapacityRequest_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetCapacityRequest_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetCapacityRequest_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetCapacityRequest_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetCapacityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetCapacityRequest, volume_capabilities_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetCapacityRequest, parameters_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetCapacityRequest, accessible_topology_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetCapacityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetCapacityResponse, available_capacity_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetCapacityResponse, maximum_volume_size_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::GetCapacityResponse, minimum_volume_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerGetCapabilitiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerGetCapabilitiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerGetCapabilitiesResponse, capabilities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerServiceCapability_RPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerServiceCapability_RPC, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerServiceCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerServiceCapability, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerServiceCapability, type_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotRequest_SecretsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotRequest_SecretsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotRequest_SecretsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotRequest_SecretsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotRequest_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotRequest_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotRequest_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotRequest_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotRequest, source_volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotRequest, name_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotRequest, secrets_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotRequest, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::CreateSnapshotResponse, snapshot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::Snapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::Snapshot, size_bytes_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::Snapshot, snapshot_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::Snapshot, source_volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::Snapshot, creation_time_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::Snapshot, ready_to_use_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteSnapshotRequest_SecretsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteSnapshotRequest_SecretsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteSnapshotRequest_SecretsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteSnapshotRequest_SecretsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteSnapshotRequest, snapshot_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteSnapshotRequest, secrets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::DeleteSnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsRequest_SecretsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsRequest_SecretsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsRequest_SecretsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsRequest_SecretsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsRequest, max_entries_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsRequest, starting_token_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsRequest, source_volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsRequest, snapshot_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsRequest, secrets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsResponse_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsResponse_Entry, snapshot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsResponse, entries_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ListSnapshotsResponse, next_token_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerExpandVolumeRequest_SecretsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerExpandVolumeRequest_SecretsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerExpandVolumeRequest_SecretsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerExpandVolumeRequest_SecretsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerExpandVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerExpandVolumeRequest, volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerExpandVolumeRequest, capacity_range_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerExpandVolumeRequest, secrets_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerExpandVolumeRequest, volume_capability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerExpandVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerExpandVolumeResponse, capacity_bytes_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::ControllerExpandVolumeResponse, node_expansion_required_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest_PublishContextEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest_PublishContextEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest_PublishContextEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest_PublishContextEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest_SecretsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest_SecretsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest_SecretsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest_SecretsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest_VolumeContextEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest_VolumeContextEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest_VolumeContextEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest_VolumeContextEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest, volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest, publish_context_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest, staging_target_path_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest, volume_capability_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest, secrets_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeRequest, volume_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeStageVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeUnstageVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeUnstageVolumeRequest, volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeUnstageVolumeRequest, staging_target_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeUnstageVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest_PublishContextEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest_PublishContextEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest_PublishContextEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest_PublishContextEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest_SecretsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest_SecretsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest_SecretsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest_SecretsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest_VolumeContextEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest_VolumeContextEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest_VolumeContextEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest_VolumeContextEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest, volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest, publish_context_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest, staging_target_path_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest, target_path_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest, volume_capability_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest, readonly_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest, secrets_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeRequest, volume_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodePublishVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeUnpublishVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeUnpublishVolumeRequest, volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeUnpublishVolumeRequest, target_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeUnpublishVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetVolumeStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetVolumeStatsRequest, volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetVolumeStatsRequest, volume_path_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetVolumeStatsRequest, staging_target_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetVolumeStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetVolumeStatsResponse, usage_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetVolumeStatsResponse, volume_condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeUsage, available_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeUsage, total_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeUsage, used_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeUsage, unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeCondition, abnormal_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::VolumeCondition, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetCapabilitiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetCapabilitiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetCapabilitiesResponse, capabilities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeServiceCapability_RPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeServiceCapability_RPC, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeServiceCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeServiceCapability, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeServiceCapability, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetInfoResponse, node_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetInfoResponse, max_volumes_per_node_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeGetInfoResponse, accessible_topology_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeExpandVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeExpandVolumeRequest, volume_id_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeExpandVolumeRequest, volume_path_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeExpandVolumeRequest, capacity_range_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeExpandVolumeRequest, staging_target_path_),
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeExpandVolumeRequest, volume_capability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeExpandVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::csi::v1::NodeExpandVolumeResponse, capacity_bytes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::csi::v1::GetPluginInfoRequest)},
  { 5, 12, sizeof(::csi::v1::GetPluginInfoResponse_ManifestEntry_DoNotUse)},
  { 14, -1, sizeof(::csi::v1::GetPluginInfoResponse)},
  { 22, -1, sizeof(::csi::v1::GetPluginCapabilitiesRequest)},
  { 27, -1, sizeof(::csi::v1::GetPluginCapabilitiesResponse)},
  { 33, -1, sizeof(::csi::v1::PluginCapability_Service)},
  { 39, -1, sizeof(::csi::v1::PluginCapability_VolumeExpansion)},
  { 45, -1, sizeof(::csi::v1::PluginCapability)},
  { 53, -1, sizeof(::csi::v1::ProbeRequest)},
  { 58, -1, sizeof(::csi::v1::ProbeResponse)},
  { 64, 71, sizeof(::csi::v1::CreateVolumeRequest_ParametersEntry_DoNotUse)},
  { 73, 80, sizeof(::csi::v1::CreateVolumeRequest_SecretsEntry_DoNotUse)},
  { 82, -1, sizeof(::csi::v1::CreateVolumeRequest)},
  { 94, -1, sizeof(::csi::v1::VolumeContentSource_SnapshotSource)},
  { 100, -1, sizeof(::csi::v1::VolumeContentSource_VolumeSource)},
  { 106, -1, sizeof(::csi::v1::VolumeContentSource)},
  { 114, -1, sizeof(::csi::v1::CreateVolumeResponse)},
  { 120, -1, sizeof(::csi::v1::VolumeCapability_BlockVolume)},
  { 125, -1, sizeof(::csi::v1::VolumeCapability_MountVolume)},
  { 132, -1, sizeof(::csi::v1::VolumeCapability_AccessMode)},
  { 138, -1, sizeof(::csi::v1::VolumeCapability)},
  { 147, -1, sizeof(::csi::v1::CapacityRange)},
  { 154, 161, sizeof(::csi::v1::Volume_VolumeContextEntry_DoNotUse)},
  { 163, -1, sizeof(::csi::v1::Volume)},
  { 173, -1, sizeof(::csi::v1::TopologyRequirement)},
  { 180, 187, sizeof(::csi::v1::Topology_SegmentsEntry_DoNotUse)},
  { 189, -1, sizeof(::csi::v1::Topology)},
  { 195, 202, sizeof(::csi::v1::DeleteVolumeRequest_SecretsEntry_DoNotUse)},
  { 204, -1, sizeof(::csi::v1::DeleteVolumeRequest)},
  { 211, -1, sizeof(::csi::v1::DeleteVolumeResponse)},
  { 216, 223, sizeof(::csi::v1::ControllerPublishVolumeRequest_SecretsEntry_DoNotUse)},
  { 225, 232, sizeof(::csi::v1::ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse)},
  { 234, -1, sizeof(::csi::v1::ControllerPublishVolumeRequest)},
  { 245, 252, sizeof(::csi::v1::ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse)},
  { 254, -1, sizeof(::csi::v1::ControllerPublishVolumeResponse)},
  { 260, 267, sizeof(::csi::v1::ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse)},
  { 269, -1, sizeof(::csi::v1::ControllerUnpublishVolumeRequest)},
  { 277, -1, sizeof(::csi::v1::ControllerUnpublishVolumeResponse)},
  { 282, 289, sizeof(::csi::v1::ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse)},
  { 291, 298, sizeof(::csi::v1::ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse)},
  { 300, 307, sizeof(::csi::v1::ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse)},
  { 309, -1, sizeof(::csi::v1::ValidateVolumeCapabilitiesRequest)},
  { 319, 326, sizeof(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse)},
  { 328, 335, sizeof(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse)},
  { 337, -1, sizeof(::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed)},
  { 345, -1, sizeof(::csi::v1::ValidateVolumeCapabilitiesResponse)},
  { 352, -1, sizeof(::csi::v1::ListVolumesRequest)},
  { 359, -1, sizeof(::csi::v1::ListVolumesResponse_VolumeStatus)},
  { 366, -1, sizeof(::csi::v1::ListVolumesResponse_Entry)},
  { 373, -1, sizeof(::csi::v1::ListVolumesResponse)},
  { 380, -1, sizeof(::csi::v1::ControllerGetVolumeRequest)},
  { 386, -1, sizeof(::csi::v1::ControllerGetVolumeResponse_VolumeStatus)},
  { 393, -1, sizeof(::csi::v1::ControllerGetVolumeResponse)},
  { 400, 407, sizeof(::csi::v1::GetCapacityRequest_ParametersEntry_DoNotUse)},
  { 409, -1, sizeof(::csi::v1::GetCapacityRequest)},
  { 417, -1, sizeof(::csi::v1::GetCapacityResponse)},
  { 425, -1, sizeof(::csi::v1::ControllerGetCapabilitiesRequest)},
  { 430, -1, sizeof(::csi::v1::ControllerGetCapabilitiesResponse)},
  { 436, -1, sizeof(::csi::v1::ControllerServiceCapability_RPC)},
  { 442, -1, sizeof(::csi::v1::ControllerServiceCapability)},
  { 449, 456, sizeof(::csi::v1::CreateSnapshotRequest_SecretsEntry_DoNotUse)},
  { 458, 465, sizeof(::csi::v1::CreateSnapshotRequest_ParametersEntry_DoNotUse)},
  { 467, -1, sizeof(::csi::v1::CreateSnapshotRequest)},
  { 476, -1, sizeof(::csi::v1::CreateSnapshotResponse)},
  { 482, -1, sizeof(::csi::v1::Snapshot)},
  { 492, 499, sizeof(::csi::v1::DeleteSnapshotRequest_SecretsEntry_DoNotUse)},
  { 501, -1, sizeof(::csi::v1::DeleteSnapshotRequest)},
  { 508, -1, sizeof(::csi::v1::DeleteSnapshotResponse)},
  { 513, 520, sizeof(::csi::v1::ListSnapshotsRequest_SecretsEntry_DoNotUse)},
  { 522, -1, sizeof(::csi::v1::ListSnapshotsRequest)},
  { 532, -1, sizeof(::csi::v1::ListSnapshotsResponse_Entry)},
  { 538, -1, sizeof(::csi::v1::ListSnapshotsResponse)},
  { 545, 552, sizeof(::csi::v1::ControllerExpandVolumeRequest_SecretsEntry_DoNotUse)},
  { 554, -1, sizeof(::csi::v1::ControllerExpandVolumeRequest)},
  { 563, -1, sizeof(::csi::v1::ControllerExpandVolumeResponse)},
  { 570, 577, sizeof(::csi::v1::NodeStageVolumeRequest_PublishContextEntry_DoNotUse)},
  { 579, 586, sizeof(::csi::v1::NodeStageVolumeRequest_SecretsEntry_DoNotUse)},
  { 588, 595, sizeof(::csi::v1::NodeStageVolumeRequest_VolumeContextEntry_DoNotUse)},
  { 597, -1, sizeof(::csi::v1::NodeStageVolumeRequest)},
  { 608, -1, sizeof(::csi::v1::NodeStageVolumeResponse)},
  { 613, -1, sizeof(::csi::v1::NodeUnstageVolumeRequest)},
  { 620, -1, sizeof(::csi::v1::NodeUnstageVolumeResponse)},
  { 625, 632, sizeof(::csi::v1::NodePublishVolumeRequest_PublishContextEntry_DoNotUse)},
  { 634, 641, sizeof(::csi::v1::NodePublishVolumeRequest_SecretsEntry_DoNotUse)},
  { 643, 650, sizeof(::csi::v1::NodePublishVolumeRequest_VolumeContextEntry_DoNotUse)},
  { 652, -1, sizeof(::csi::v1::NodePublishVolumeRequest)},
  { 665, -1, sizeof(::csi::v1::NodePublishVolumeResponse)},
  { 670, -1, sizeof(::csi::v1::NodeUnpublishVolumeRequest)},
  { 677, -1, sizeof(::csi::v1::NodeUnpublishVolumeResponse)},
  { 682, -1, sizeof(::csi::v1::NodeGetVolumeStatsRequest)},
  { 690, -1, sizeof(::csi::v1::NodeGetVolumeStatsResponse)},
  { 697, -1, sizeof(::csi::v1::VolumeUsage)},
  { 706, -1, sizeof(::csi::v1::VolumeCondition)},
  { 713, -1, sizeof(::csi::v1::NodeGetCapabilitiesRequest)},
  { 718, -1, sizeof(::csi::v1::NodeGetCapabilitiesResponse)},
  { 724, -1, sizeof(::csi::v1::NodeServiceCapability_RPC)},
  { 730, -1, sizeof(::csi::v1::NodeServiceCapability)},
  { 737, -1, sizeof(::csi::v1::NodeGetInfoRequest)},
  { 742, -1, sizeof(::csi::v1::NodeGetInfoResponse)},
  { 750, -1, sizeof(::csi::v1::NodeExpandVolumeRequest)},
  { 760, -1, sizeof(::csi::v1::NodeExpandVolumeResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_GetPluginInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_GetPluginInfoResponse_ManifestEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_GetPluginInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_GetPluginCapabilitiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_GetPluginCapabilitiesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_PluginCapability_Service_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_PluginCapability_VolumeExpansion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_PluginCapability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ProbeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ProbeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_CreateVolumeRequest_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_CreateVolumeRequest_SecretsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_CreateVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_VolumeContentSource_SnapshotSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_VolumeContentSource_VolumeSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_VolumeContentSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_CreateVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_VolumeCapability_BlockVolume_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_VolumeCapability_MountVolume_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_VolumeCapability_AccessMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_VolumeCapability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_CapacityRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_Volume_VolumeContextEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_Volume_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_TopologyRequirement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_Topology_SegmentsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_Topology_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_DeleteVolumeRequest_SecretsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_DeleteVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_DeleteVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerPublishVolumeRequest_SecretsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerPublishVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerPublishVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerUnpublishVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerUnpublishVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ValidateVolumeCapabilitiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ValidateVolumeCapabilitiesResponse_Confirmed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ValidateVolumeCapabilitiesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ListVolumesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ListVolumesResponse_VolumeStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ListVolumesResponse_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ListVolumesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerGetVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerGetVolumeResponse_VolumeStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerGetVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_GetCapacityRequest_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_GetCapacityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_GetCapacityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerGetCapabilitiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerGetCapabilitiesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerServiceCapability_RPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerServiceCapability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_CreateSnapshotRequest_SecretsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_CreateSnapshotRequest_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_CreateSnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_CreateSnapshotResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_Snapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_DeleteSnapshotRequest_SecretsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_DeleteSnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_DeleteSnapshotResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ListSnapshotsRequest_SecretsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ListSnapshotsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ListSnapshotsResponse_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ListSnapshotsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerExpandVolumeRequest_SecretsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerExpandVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_ControllerExpandVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeStageVolumeRequest_PublishContextEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeStageVolumeRequest_SecretsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeStageVolumeRequest_VolumeContextEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeStageVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeStageVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeUnstageVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeUnstageVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodePublishVolumeRequest_PublishContextEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodePublishVolumeRequest_SecretsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodePublishVolumeRequest_VolumeContextEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodePublishVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodePublishVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeUnpublishVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeUnpublishVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeGetVolumeStatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeGetVolumeStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_VolumeUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_VolumeCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeGetCapabilitiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeGetCapabilitiesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeServiceCapability_RPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeServiceCapability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeGetInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeGetInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeExpandVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::csi::v1::_NodeExpandVolumeResponse_default_instance_),
};

const char descriptor_table_protodef_csi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tcsi.proto\022\006csi.v1\032 google/protobuf/des"
  "criptor.proto\032\037google/protobuf/timestamp"
  ".proto\032\036google/protobuf/wrappers.proto\"\026"
  "\n\024GetPluginInfoRequest\"\255\001\n\025GetPluginInfo"
  "Response\022\014\n\004name\030\001 \001(\t\022\026\n\016vendor_version"
  "\030\002 \001(\t\022=\n\010manifest\030\003 \003(\0132+.csi.v1.GetPlu"
  "ginInfoResponse.ManifestEntry\032/\n\rManifes"
  "tEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\036"
  "\n\034GetPluginCapabilitiesRequest\"O\n\035GetPlu"
  "ginCapabilitiesResponse\022.\n\014capabilities\030"
  "\001 \003(\0132\030.csi.v1.PluginCapability\"\247\003\n\020Plug"
  "inCapability\0223\n\007service\030\001 \001(\0132 .csi.v1.P"
  "luginCapability.ServiceH\000\022D\n\020volume_expa"
  "nsion\030\002 \001(\0132(.csi.v1.PluginCapability.Vo"
  "lumeExpansionH\000\032\221\001\n\007Service\0223\n\004type\030\001 \001("
  "\0162%.csi.v1.PluginCapability.Service.Type"
  "\"Q\n\004Type\022\013\n\007UNKNOWN\020\000\022\026\n\022CONTROLLER_SERV"
  "ICE\020\001\022$\n VOLUME_ACCESSIBILITY_CONSTRAINT"
  "S\020\002\032|\n\017VolumeExpansion\022;\n\004type\030\001 \001(\0162-.c"
  "si.v1.PluginCapability.VolumeExpansion.T"
  "ype\",\n\004Type\022\013\n\007UNKNOWN\020\000\022\n\n\006ONLINE\020\001\022\013\n\007"
  "OFFLINE\020\002B\006\n\004type\"\016\n\014ProbeRequest\":\n\rPro"
  "beResponse\022)\n\005ready\030\001 \001(\0132\032.google.proto"
  "buf.BoolValue\"\352\003\n\023CreateVolumeRequest\022\014\n"
  "\004name\030\001 \001(\t\022-\n\016capacity_range\030\002 \001(\0132\025.cs"
  "i.v1.CapacityRange\0225\n\023volume_capabilitie"
  "s\030\003 \003(\0132\030.csi.v1.VolumeCapability\022\?\n\npar"
  "ameters\030\004 \003(\0132+.csi.v1.CreateVolumeReque"
  "st.ParametersEntry\022>\n\007secrets\030\005 \003(\0132(.cs"
  "i.v1.CreateVolumeRequest.SecretsEntryB\003\230"
  "B\001\022:\n\025volume_content_source\030\006 \001(\0132\033.csi."
  "v1.VolumeContentSource\022\?\n\032accessibility_"
  "requirements\030\007 \001(\0132\033.csi.v1.TopologyRequ"
  "irement\0321\n\017ParametersEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t:\0028\001\032.\n\014SecretsEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\343\001\n\023VolumeCon"
  "tentSource\022>\n\010snapshot\030\001 \001(\0132*.csi.v1.Vo"
  "lumeContentSource.SnapshotSourceH\000\022:\n\006vo"
  "lume\030\002 \001(\0132(.csi.v1.VolumeContentSource."
  "VolumeSourceH\000\032%\n\016SnapshotSource\022\023\n\013snap"
  "shot_id\030\001 \001(\t\032!\n\014VolumeSource\022\021\n\tvolume_"
  "id\030\001 \001(\tB\006\n\004type\"6\n\024CreateVolumeResponse"
  "\022\036\n\006volume\030\001 \001(\0132\016.csi.v1.Volume\"\366\003\n\020Vol"
  "umeCapability\0225\n\005block\030\001 \001(\0132$.csi.v1.Vo"
  "lumeCapability.BlockVolumeH\000\0225\n\005mount\030\002 "
  "\001(\0132$.csi.v1.VolumeCapability.MountVolum"
  "eH\000\0228\n\013access_mode\030\003 \001(\0132#.csi.v1.Volume"
  "Capability.AccessMode\032\r\n\013BlockVolume\0323\n\013"
  "MountVolume\022\017\n\007fs_type\030\001 \001(\t\022\023\n\013mount_fl"
  "ags\030\002 \003(\t\032\346\001\n\nAccessMode\0226\n\004mode\030\001 \001(\0162("
  ".csi.v1.VolumeCapability.AccessMode.Mode"
  "\"\237\001\n\004Mode\022\013\n\007UNKNOWN\020\000\022\026\n\022SINGLE_NODE_WR"
  "ITER\020\001\022\033\n\027SINGLE_NODE_READER_ONLY\020\002\022\032\n\026M"
  "ULTI_NODE_READER_ONLY\020\003\022\034\n\030MULTI_NODE_SI"
  "NGLE_WRITER\020\004\022\033\n\027MULTI_NODE_MULTI_WRITER"
  "\020\005B\r\n\013access_type\"<\n\rCapacityRange\022\026\n\016re"
  "quired_bytes\030\001 \001(\003\022\023\n\013limit_bytes\030\002 \001(\003\""
  "\210\002\n\006Volume\022\026\n\016capacity_bytes\030\001 \001(\003\022\021\n\tvo"
  "lume_id\030\002 \001(\t\0229\n\016volume_context\030\003 \003(\0132!."
  "csi.v1.Volume.VolumeContextEntry\0223\n\016cont"
  "ent_source\030\004 \001(\0132\033.csi.v1.VolumeContentS"
  "ource\022-\n\023accessible_topology\030\005 \003(\0132\020.csi"
  ".v1.Topology\0324\n\022VolumeContextEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"_\n\023TopologyRe"
  "quirement\022#\n\trequisite\030\001 \003(\0132\020.csi.v1.To"
  "pology\022#\n\tpreferred\030\002 \003(\0132\020.csi.v1.Topol"
  "ogy\"m\n\010Topology\0220\n\010segments\030\001 \003(\0132\036.csi."
  "v1.Topology.SegmentsEntry\032/\n\rSegmentsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\230\001\n\023D"
  "eleteVolumeRequest\022\021\n\tvolume_id\030\001 \001(\t\022>\n"
  "\007secrets\030\002 \003(\0132(.csi.v1.DeleteVolumeRequ"
  "est.SecretsEntryB\003\230B\001\032.\n\014SecretsEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\026\n\024DeleteV"
  "olumeResponse\"\217\003\n\036ControllerPublishVolum"
  "eRequest\022\021\n\tvolume_id\030\001 \001(\t\022\017\n\007node_id\030\002"
  " \001(\t\0223\n\021volume_capability\030\003 \001(\0132\030.csi.v1"
  ".VolumeCapability\022\020\n\010readonly\030\004 \001(\010\022I\n\007s"
  "ecrets\030\005 \003(\01323.csi.v1.ControllerPublishV"
  "olumeRequest.SecretsEntryB\003\230B\001\022Q\n\016volume"
  "_context\030\006 \003(\01329.csi.v1.ControllerPublis"
  "hVolumeRequest.VolumeContextEntry\032.\n\014Sec"
  "retsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
  "\001\0324\n\022VolumeContextEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\"\256\001\n\037ControllerPublishVol"
  "umeResponse\022T\n\017publish_context\030\001 \003(\0132;.c"
  "si.v1.ControllerPublishVolumeResponse.Pu"
  "blishContextEntry\0325\n\023PublishContextEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\303\001\n Con"
  "trollerUnpublishVolumeRequest\022\021\n\tvolume_"
  "id\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\t\022K\n\007secrets\030\003 \003"
  "(\01325.csi.v1.ControllerUnpublishVolumeReq"
  "uest.SecretsEntryB\003\230B\001\032.\n\014SecretsEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"#\n!Contro"
  "llerUnpublishVolumeResponse\"\371\003\n!Validate"
  "VolumeCapabilitiesRequest\022\021\n\tvolume_id\030\001"
  " \001(\t\022T\n\016volume_context\030\002 \003(\0132<.csi.v1.Va"
  "lidateVolumeCapabilitiesRequest.VolumeCo"
  "ntextEntry\0225\n\023volume_capabilities\030\003 \003(\0132"
  "\030.csi.v1.VolumeCapability\022M\n\nparameters\030"
  "\004 \003(\01329.csi.v1.ValidateVolumeCapabilitie"
  "sRequest.ParametersEntry\022L\n\007secrets\030\005 \003("
  "\01326.csi.v1.ValidateVolumeCapabilitiesReq"
  "uest.SecretsEntryB\003\230B\001\0324\n\022VolumeContextE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0321\n\017"
  "ParametersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t:\0028\001\032.\n\014SecretsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\"\347\003\n\"ValidateVolumeCapabi"
  "litiesResponse\022G\n\tconfirmed\030\001 \001(\01324.csi."
  "v1.ValidateVolumeCapabilitiesResponse.Co"
  "nfirmed\022\017\n\007message\030\002 \001(\t\032\346\002\n\tConfirmed\022_"
  "\n\016volume_context\030\001 \003(\0132G.csi.v1.Validate"
  "VolumeCapabilitiesResponse.Confirmed.Vol"
  "umeContextEntry\0225\n\023volume_capabilities\030\002"
  " \003(\0132\030.csi.v1.VolumeCapability\022X\n\nparame"
  "ters\030\003 \003(\0132D.csi.v1.ValidateVolumeCapabi"
  "litiesResponse.Confirmed.ParametersEntry"
  "\0324\n\022VolumeContextEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001\0321\n\017ParametersEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"A\n\022ListVolumes"
  "Request\022\023\n\013max_entries\030\001 \001(\005\022\026\n\016starting"
  "_token\030\002 \001(\t\"\244\002\n\023ListVolumesResponse\0222\n\007"
  "entries\030\001 \003(\0132!.csi.v1.ListVolumesRespon"
  "se.Entry\022\022\n\nnext_token\030\002 \001(\t\032b\n\014VolumeSt"
  "atus\022\032\n\022published_node_ids\030\001 \003(\t\0226\n\020volu"
  "me_condition\030\002 \001(\0132\027.csi.v1.VolumeCondit"
  "ionB\003\240B\001\032a\n\005Entry\022\036\n\006volume\030\001 \001(\0132\016.csi."
  "v1.Volume\0228\n\006status\030\002 \001(\0132(.csi.v1.ListV"
  "olumesResponse.VolumeStatus\"4\n\032Controlle"
  "rGetVolumeRequest\022\021\n\tvolume_id\030\001 \001(\t:\003\240B"
  "\001\"\343\001\n\033ControllerGetVolumeResponse\022\036\n\006vol"
  "ume\030\001 \001(\0132\016.csi.v1.Volume\022@\n\006status\030\002 \001("
  "\01320.csi.v1.ControllerGetVolumeResponse.V"
  "olumeStatus\032]\n\014VolumeStatus\022\032\n\022published"
  "_node_ids\030\001 \003(\t\0221\n\020volume_condition\030\002 \001("
  "\0132\027.csi.v1.VolumeCondition:\003\240B\001\"\355\001\n\022GetC"
  "apacityRequest\0225\n\023volume_capabilities\030\001 "
  "\003(\0132\030.csi.v1.VolumeCapability\022>\n\nparamet"
  "ers\030\002 \003(\0132*.csi.v1.GetCapacityRequest.Pa"
  "rametersEntry\022-\n\023accessible_topology\030\003 \001"
  "(\0132\020.csi.v1.Topology\0321\n\017ParametersEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\257\001\n\023GetC"
  "apacityResponse\022\032\n\022available_capacity\030\001 "
  "\001(\003\022=\n\023maximum_volume_size\030\002 \001(\0132\033.googl"
  "e.protobuf.Int64ValueB\003\240B\001\022=\n\023minimum_vo"
  "lume_size\030\003 \001(\0132\033.google.protobuf.Int64V"
  "alueB\003\240B\001\"\"\n ControllerGetCapabilitiesRe"
  "quest\"^\n!ControllerGetCapabilitiesRespon"
  "se\0229\n\014capabilities\030\001 \003(\0132#.csi.v1.Contro"
  "llerServiceCapability\"\320\003\n\033ControllerServ"
  "iceCapability\0226\n\003rpc\030\001 \001(\0132\'.csi.v1.Cont"
  "rollerServiceCapability.RPCH\000\032\360\002\n\003RPC\022:\n"
  "\004type\030\001 \001(\0162,.csi.v1.ControllerServiceCa"
  "pability.RPC.Type\"\254\002\n\004Type\022\013\n\007UNKNOWN\020\000\022"
  "\030\n\024CREATE_DELETE_VOLUME\020\001\022\034\n\030PUBLISH_UNP"
  "UBLISH_VOLUME\020\002\022\020\n\014LIST_VOLUMES\020\003\022\020\n\014GET"
  "_CAPACITY\020\004\022\032\n\026CREATE_DELETE_SNAPSHOT\020\005\022"
  "\022\n\016LIST_SNAPSHOTS\020\006\022\020\n\014CLONE_VOLUME\020\007\022\024\n"
  "\020PUBLISH_READONLY\020\010\022\021\n\rEXPAND_VOLUME\020\t\022 "
  "\n\034LIST_VOLUMES_PUBLISHED_NODES\020\n\022\031\n\020VOLU"
  "ME_CONDITION\020\013\032\003\240B\001\022\023\n\nGET_VOLUME\020\014\032\003\240B\001"
  "B\006\n\004type\"\247\002\n\025CreateSnapshotRequest\022\030\n\020so"
  "urce_volume_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022@\n\007se"
  "crets\030\003 \003(\0132*.csi.v1.CreateSnapshotReque"
  "st.SecretsEntryB\003\230B\001\022A\n\nparameters\030\004 \003(\013"
  "2-.csi.v1.CreateSnapshotRequest.Paramete"
  "rsEntry\032.\n\014SecretsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\0321\n\017ParametersEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"<\n\026CreateSnap"
  "shotResponse\022\"\n\010snapshot\030\001 \001(\0132\020.csi.v1."
  "Snapshot\"\226\001\n\010Snapshot\022\022\n\nsize_bytes\030\001 \001("
  "\003\022\023\n\013snapshot_id\030\002 \001(\t\022\030\n\020source_volume_"
  "id\030\003 \001(\t\0221\n\rcreation_time\030\004 \001(\0132\032.google"
  ".protobuf.Timestamp\022\024\n\014ready_to_use\030\005 \001("
  "\010\"\236\001\n\025DeleteSnapshotRequest\022\023\n\013snapshot_"
  "id\030\001 \001(\t\022@\n\007secrets\030\002 \003(\0132*.csi.v1.Delet"
  "eSnapshotRequest.SecretsEntryB\003\230B\001\032.\n\014Se"
  "cretsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
  "8\001\"\030\n\026DeleteSnapshotResponse\"\343\001\n\024ListSna"
  "pshotsRequest\022\023\n\013max_entries\030\001 \001(\005\022\026\n\016st"
  "arting_token\030\002 \001(\t\022\030\n\020source_volume_id\030\003"
  " \001(\t\022\023\n\013snapshot_id\030\004 \001(\t\022\?\n\007secrets\030\005 \003"
  "(\0132).csi.v1.ListSnapshotsRequest.Secrets"
  "EntryB\003\230B\001\032.\n\014SecretsEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t:\0028\001\"\216\001\n\025ListSnapshotsResp"
  "onse\0224\n\007entries\030\001 \003(\0132#.csi.v1.ListSnaps"
  "hotsResponse.Entry\022\022\n\nnext_token\030\002 \001(\t\032+"
  "\n\005Entry\022\"\n\010snapshot\030\001 \001(\0132\020.csi.v1.Snaps"
  "hot\"\220\002\n\035ControllerExpandVolumeRequest\022\021\n"
  "\tvolume_id\030\001 \001(\t\022-\n\016capacity_range\030\002 \001(\013"
  "2\025.csi.v1.CapacityRange\022H\n\007secrets\030\003 \003(\013"
  "22.csi.v1.ControllerExpandVolumeRequest."
  "SecretsEntryB\003\230B\001\0223\n\021volume_capability\030\004"
  " \001(\0132\030.csi.v1.VolumeCapability\032.\n\014Secret"
  "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"Y"
  "\n\036ControllerExpandVolumeResponse\022\026\n\016capa"
  "city_bytes\030\001 \001(\003\022\037\n\027node_expansion_requi"
  "red\030\002 \001(\010\"\365\003\n\026NodeStageVolumeRequest\022\021\n\t"
  "volume_id\030\001 \001(\t\022K\n\017publish_context\030\002 \003(\013"
  "22.csi.v1.NodeStageVolumeRequest.Publish"
  "ContextEntry\022\033\n\023staging_target_path\030\003 \001("
  "\t\0223\n\021volume_capability\030\004 \001(\0132\030.csi.v1.Vo"
  "lumeCapability\022A\n\007secrets\030\005 \003(\0132+.csi.v1"
  ".NodeStageVolumeRequest.SecretsEntryB\003\230B"
  "\001\022I\n\016volume_context\030\006 \003(\01321.csi.v1.NodeS"
  "tageVolumeRequest.VolumeContextEntry\0325\n\023"
  "PublishContextEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t:\0028\001\032.\n\014SecretsEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t:\0028\001\0324\n\022VolumeContextEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\031\n\027Nod"
  "eStageVolumeResponse\"J\n\030NodeUnstageVolum"
  "eRequest\022\021\n\tvolume_id\030\001 \001(\t\022\033\n\023staging_t"
  "arget_path\030\002 \001(\t\"\033\n\031NodeUnstageVolumeRes"
  "ponse\"\244\004\n\030NodePublishVolumeRequest\022\021\n\tvo"
  "lume_id\030\001 \001(\t\022M\n\017publish_context\030\002 \003(\01324"
  ".csi.v1.NodePublishVolumeRequest.Publish"
  "ContextEntry\022\033\n\023staging_target_path\030\003 \001("
  "\t\022\023\n\013target_path\030\004 \001(\t\0223\n\021volume_capabil"
  "ity\030\005 \001(\0132\030.csi.v1.VolumeCapability\022\020\n\010r"
  "eadonly\030\006 \001(\010\022C\n\007secrets\030\007 \003(\0132-.csi.v1."
  "NodePublishVolumeRequest.SecretsEntryB\003\230"
  "B\001\022K\n\016volume_context\030\010 \003(\01323.csi.v1.Node"
  "PublishVolumeRequest.VolumeContextEntry\032"
  "5\n\023PublishContextEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001\032.\n\014SecretsEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0324\n\022VolumeContextE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\033\n\031"
  "NodePublishVolumeResponse\"D\n\032NodeUnpubli"
  "shVolumeRequest\022\021\n\tvolume_id\030\001 \001(\t\022\023\n\013ta"
  "rget_path\030\002 \001(\t\"\035\n\033NodeUnpublishVolumeRe"
  "sponse\"`\n\031NodeGetVolumeStatsRequest\022\021\n\tv"
  "olume_id\030\001 \001(\t\022\023\n\013volume_path\030\002 \001(\t\022\033\n\023s"
  "taging_target_path\030\003 \001(\t\"x\n\032NodeGetVolum"
  "eStatsResponse\022\"\n\005usage\030\001 \003(\0132\023.csi.v1.V"
  "olumeUsage\0226\n\020volume_condition\030\002 \001(\0132\027.c"
  "si.v1.VolumeConditionB\003\240B\001\"\221\001\n\013VolumeUsa"
  "ge\022\021\n\tavailable\030\001 \001(\003\022\r\n\005total\030\002 \001(\003\022\014\n\004"
  "used\030\003 \001(\003\022&\n\004unit\030\004 \001(\0162\030.csi.v1.Volume"
  "Usage.Unit\"*\n\004Unit\022\013\n\007UNKNOWN\020\000\022\t\n\005BYTES"
  "\020\001\022\n\n\006INODES\020\002\"9\n\017VolumeCondition\022\020\n\010abn"
  "ormal\030\001 \001(\010\022\017\n\007message\030\002 \001(\t:\003\240B\001\"\034\n\032Nod"
  "eGetCapabilitiesRequest\"R\n\033NodeGetCapabi"
  "litiesResponse\0223\n\014capabilities\030\001 \003(\0132\035.c"
  "si.v1.NodeServiceCapability\"\202\002\n\025NodeServ"
  "iceCapability\0220\n\003rpc\030\001 \001(\0132!.csi.v1.Node"
  "ServiceCapability.RPCH\000\032\256\001\n\003RPC\0224\n\004type\030"
  "\001 \001(\0162&.csi.v1.NodeServiceCapability.RPC"
  ".Type\"q\n\004Type\022\013\n\007UNKNOWN\020\000\022\030\n\024STAGE_UNST"
  "AGE_VOLUME\020\001\022\024\n\020GET_VOLUME_STATS\020\002\022\021\n\rEX"
  "PAND_VOLUME\020\003\022\031\n\020VOLUME_CONDITION\020\004\032\003\240B\001"
  "B\006\n\004type\"\024\n\022NodeGetInfoRequest\"s\n\023NodeGe"
  "tInfoResponse\022\017\n\007node_id\030\001 \001(\t\022\034\n\024max_vo"
  "lumes_per_node\030\002 \001(\003\022-\n\023accessible_topol"
  "ogy\030\003 \001(\0132\020.csi.v1.Topology\"\302\001\n\027NodeExpa"
  "ndVolumeRequest\022\021\n\tvolume_id\030\001 \001(\t\022\023\n\013vo"
  "lume_path\030\002 \001(\t\022-\n\016capacity_range\030\003 \001(\0132"
  "\025.csi.v1.CapacityRange\022\033\n\023staging_target"
  "_path\030\004 \001(\t\0223\n\021volume_capability\030\005 \001(\0132\030"
  ".csi.v1.VolumeCapability\"2\n\030NodeExpandVo"
  "lumeResponse\022\026\n\016capacity_bytes\030\001 \001(\0032\372\001\n"
  "\010Identity\022N\n\rGetPluginInfo\022\034.csi.v1.GetP"
  "luginInfoRequest\032\035.csi.v1.GetPluginInfoR"
  "esponse\"\000\022f\n\025GetPluginCapabilities\022$.csi"
  ".v1.GetPluginCapabilitiesRequest\032%.csi.v"
  "1.GetPluginCapabilitiesResponse\"\000\0226\n\005Pro"
  "be\022\024.csi.v1.ProbeRequest\032\025.csi.v1.ProbeR"
  "esponse\"\0002\315\t\n\nController\022K\n\014CreateVolume"
  "\022\033.csi.v1.CreateVolumeRequest\032\034.csi.v1.C"
  "reateVolumeResponse\"\000\022K\n\014DeleteVolume\022\033."
  "csi.v1.DeleteVolumeRequest\032\034.csi.v1.Dele"
  "teVolumeResponse\"\000\022l\n\027ControllerPublishV"
  "olume\022&.csi.v1.ControllerPublishVolumeRe"
  "quest\032\'.csi.v1.ControllerPublishVolumeRe"
  "sponse\"\000\022r\n\031ControllerUnpublishVolume\022(."
  "csi.v1.ControllerUnpublishVolumeRequest\032"
  ").csi.v1.ControllerUnpublishVolumeRespon"
  "se\"\000\022u\n\032ValidateVolumeCapabilities\022).csi"
  ".v1.ValidateVolumeCapabilitiesRequest\032*."
  "csi.v1.ValidateVolumeCapabilitiesRespons"
  "e\"\000\022H\n\013ListVolumes\022\032.csi.v1.ListVolumesR"
  "equest\032\033.csi.v1.ListVolumesResponse\"\000\022H\n"
  "\013GetCapacity\022\032.csi.v1.GetCapacityRequest"
  "\032\033.csi.v1.GetCapacityResponse\"\000\022r\n\031Contr"
  "ollerGetCapabilities\022(.csi.v1.Controller"
  "GetCapabilitiesRequest\032).csi.v1.Controll"
  "erGetCapabilitiesResponse\"\000\022Q\n\016CreateSna"
  "pshot\022\035.csi.v1.CreateSnapshotRequest\032\036.c"
  "si.v1.CreateSnapshotResponse\"\000\022Q\n\016Delete"
  "Snapshot\022\035.csi.v1.DeleteSnapshotRequest\032"
  "\036.csi.v1.DeleteSnapshotResponse\"\000\022N\n\rLis"
  "tSnapshots\022\034.csi.v1.ListSnapshotsRequest"
  "\032\035.csi.v1.ListSnapshotsResponse\"\000\022i\n\026Con"
  "trollerExpandVolume\022%.csi.v1.ControllerE"
  "xpandVolumeRequest\032&.csi.v1.ControllerEx"
  "pandVolumeResponse\"\000\022c\n\023ControllerGetVol"
  "ume\022\".csi.v1.ControllerGetVolumeRequest\032"
  "#.csi.v1.ControllerGetVolumeResponse\"\003\240B"
  "\0012\332\005\n\004Node\022T\n\017NodeStageVolume\022\036.csi.v1.N"
  "odeStageVolumeRequest\032\037.csi.v1.NodeStage"
  "VolumeResponse\"\000\022Z\n\021NodeUnstageVolume\022 ."
  "csi.v1.NodeUnstageVolumeRequest\032!.csi.v1"
  ".NodeUnstageVolumeResponse\"\000\022Z\n\021NodePubl"
  "ishVolume\022 .csi.v1.NodePublishVolumeRequ"
  "est\032!.csi.v1.NodePublishVolumeResponse\"\000"
  "\022`\n\023NodeUnpublishVolume\022\".csi.v1.NodeUnp"
  "ublishVolumeRequest\032#.csi.v1.NodeUnpubli"
  "shVolumeResponse\"\000\022]\n\022NodeGetVolumeStats"
  "\022!.csi.v1.NodeGetVolumeStatsRequest\032\".cs"
  "i.v1.NodeGetVolumeStatsResponse\"\000\022W\n\020Nod"
  "eExpandVolume\022\037.csi.v1.NodeExpandVolumeR"
  "equest\032 .csi.v1.NodeExpandVolumeResponse"
  "\"\000\022`\n\023NodeGetCapabilities\022\".csi.v1.NodeG"
  "etCapabilitiesRequest\032#.csi.v1.NodeGetCa"
  "pabilitiesResponse\"\000\022H\n\013NodeGetInfo\022\032.cs"
  "i.v1.NodeGetInfoRequest\032\033.csi.v1.NodeGet"
  "InfoResponse\"\000:1\n\nalpha_enum\022\034.google.pr"
  "otobuf.EnumOptions\030\244\010 \001(\010:<\n\020alpha_enum_"
  "value\022!.google.protobuf.EnumValueOptions"
  "\030\244\010 \001(\010:2\n\ncsi_secret\022\035.google.protobuf."
  "FieldOptions\030\243\010 \001(\010:3\n\013alpha_field\022\035.goo"
  "gle.protobuf.FieldOptions\030\244\010 \001(\010:7\n\ralph"
  "a_message\022\037.google.protobuf.MessageOptio"
  "ns\030\244\010 \001(\010:5\n\014alpha_method\022\036.google.proto"
  "buf.MethodOptions\030\244\010 \001(\010:7\n\ralpha_servic"
  "e\022\037.google.protobuf.ServiceOptions\030\244\010 \001("
  "\010B\005Z\003csib\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_csi_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_csi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_csi_2eproto = {
  false, false, 12976, descriptor_table_protodef_csi_2eproto, "csi.proto", 
  &descriptor_table_csi_2eproto_once, descriptor_table_csi_2eproto_deps, 3, 101,
  schemas, file_default_instances, TableStruct_csi_2eproto::offsets,
  file_level_metadata_csi_2eproto, file_level_enum_descriptors_csi_2eproto, file_level_service_descriptors_csi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_csi_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_csi_2eproto);
  return descriptor_table_csi_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_csi_2eproto(&descriptor_table_csi_2eproto);
namespace csi {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PluginCapability_Service_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_csi_2eproto);
  return file_level_enum_descriptors_csi_2eproto[0];
}
bool PluginCapability_Service_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PluginCapability_Service_Type PluginCapability_Service::UNKNOWN;
constexpr PluginCapability_Service_Type PluginCapability_Service::CONTROLLER_SERVICE;
constexpr PluginCapability_Service_Type PluginCapability_Service::VOLUME_ACCESSIBILITY_CONSTRAINTS;
constexpr PluginCapability_Service_Type PluginCapability_Service::Type_MIN;
constexpr PluginCapability_Service_Type PluginCapability_Service::Type_MAX;
constexpr int PluginCapability_Service::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PluginCapability_VolumeExpansion_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_csi_2eproto);
  return file_level_enum_descriptors_csi_2eproto[1];
}
bool PluginCapability_VolumeExpansion_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PluginCapability_VolumeExpansion_Type PluginCapability_VolumeExpansion::UNKNOWN;
constexpr PluginCapability_VolumeExpansion_Type PluginCapability_VolumeExpansion::ONLINE;
constexpr PluginCapability_VolumeExpansion_Type PluginCapability_VolumeExpansion::OFFLINE;
constexpr PluginCapability_VolumeExpansion_Type PluginCapability_VolumeExpansion::Type_MIN;
constexpr PluginCapability_VolumeExpansion_Type PluginCapability_VolumeExpansion::Type_MAX;
constexpr int PluginCapability_VolumeExpansion::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VolumeCapability_AccessMode_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_csi_2eproto);
  return file_level_enum_descriptors_csi_2eproto[2];
}
bool VolumeCapability_AccessMode_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VolumeCapability_AccessMode_Mode VolumeCapability_AccessMode::UNKNOWN;
constexpr VolumeCapability_AccessMode_Mode VolumeCapability_AccessMode::SINGLE_NODE_WRITER;
constexpr VolumeCapability_AccessMode_Mode VolumeCapability_AccessMode::SINGLE_NODE_READER_ONLY;
constexpr VolumeCapability_AccessMode_Mode VolumeCapability_AccessMode::MULTI_NODE_READER_ONLY;
constexpr VolumeCapability_AccessMode_Mode VolumeCapability_AccessMode::MULTI_NODE_SINGLE_WRITER;
constexpr VolumeCapability_AccessMode_Mode VolumeCapability_AccessMode::MULTI_NODE_MULTI_WRITER;
constexpr VolumeCapability_AccessMode_Mode VolumeCapability_AccessMode::Mode_MIN;
constexpr VolumeCapability_AccessMode_Mode VolumeCapability_AccessMode::Mode_MAX;
constexpr int VolumeCapability_AccessMode::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControllerServiceCapability_RPC_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_csi_2eproto);
  return file_level_enum_descriptors_csi_2eproto[3];
}
bool ControllerServiceCapability_RPC_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::UNKNOWN;
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::CREATE_DELETE_VOLUME;
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::PUBLISH_UNPUBLISH_VOLUME;
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::LIST_VOLUMES;
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::GET_CAPACITY;
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::CREATE_DELETE_SNAPSHOT;
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::LIST_SNAPSHOTS;
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::CLONE_VOLUME;
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::PUBLISH_READONLY;
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::EXPAND_VOLUME;
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::LIST_VOLUMES_PUBLISHED_NODES;
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::VOLUME_CONDITION;
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::GET_VOLUME;
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::Type_MIN;
constexpr ControllerServiceCapability_RPC_Type ControllerServiceCapability_RPC::Type_MAX;
constexpr int ControllerServiceCapability_RPC::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VolumeUsage_Unit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_csi_2eproto);
  return file_level_enum_descriptors_csi_2eproto[4];
}
bool VolumeUsage_Unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VolumeUsage_Unit VolumeUsage::UNKNOWN;
constexpr VolumeUsage_Unit VolumeUsage::BYTES;
constexpr VolumeUsage_Unit VolumeUsage::INODES;
constexpr VolumeUsage_Unit VolumeUsage::Unit_MIN;
constexpr VolumeUsage_Unit VolumeUsage::Unit_MAX;
constexpr int VolumeUsage::Unit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeServiceCapability_RPC_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_csi_2eproto);
  return file_level_enum_descriptors_csi_2eproto[5];
}
bool NodeServiceCapability_RPC_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NodeServiceCapability_RPC_Type NodeServiceCapability_RPC::UNKNOWN;
constexpr NodeServiceCapability_RPC_Type NodeServiceCapability_RPC::STAGE_UNSTAGE_VOLUME;
constexpr NodeServiceCapability_RPC_Type NodeServiceCapability_RPC::GET_VOLUME_STATS;
constexpr NodeServiceCapability_RPC_Type NodeServiceCapability_RPC::EXPAND_VOLUME;
constexpr NodeServiceCapability_RPC_Type NodeServiceCapability_RPC::VOLUME_CONDITION;
constexpr NodeServiceCapability_RPC_Type NodeServiceCapability_RPC::Type_MIN;
constexpr NodeServiceCapability_RPC_Type NodeServiceCapability_RPC::Type_MAX;
constexpr int NodeServiceCapability_RPC::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class GetPluginInfoRequest::_Internal {
 public:
};

GetPluginInfoRequest::GetPluginInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.GetPluginInfoRequest)
}
GetPluginInfoRequest::GetPluginInfoRequest(const GetPluginInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.GetPluginInfoRequest)
}

void GetPluginInfoRequest::SharedCtor() {
}

GetPluginInfoRequest::~GetPluginInfoRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.GetPluginInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPluginInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPluginInfoRequest::ArenaDtor(void* object) {
  GetPluginInfoRequest* _this = reinterpret_cast< GetPluginInfoRequest* >(object);
  (void)_this;
}
void GetPluginInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPluginInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPluginInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.GetPluginInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPluginInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPluginInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.GetPluginInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.GetPluginInfoRequest)
  return target;
}

size_t GetPluginInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.GetPluginInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPluginInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.GetPluginInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPluginInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPluginInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.GetPluginInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.GetPluginInfoRequest)
    MergeFrom(*source);
  }
}

void GetPluginInfoRequest::MergeFrom(const GetPluginInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.GetPluginInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetPluginInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.GetPluginInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPluginInfoRequest::CopyFrom(const GetPluginInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.GetPluginInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPluginInfoRequest::IsInitialized() const {
  return true;
}

void GetPluginInfoRequest::InternalSwap(GetPluginInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPluginInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GetPluginInfoResponse_ManifestEntry_DoNotUse::GetPluginInfoResponse_ManifestEntry_DoNotUse() {}
GetPluginInfoResponse_ManifestEntry_DoNotUse::GetPluginInfoResponse_ManifestEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetPluginInfoResponse_ManifestEntry_DoNotUse::MergeFrom(const GetPluginInfoResponse_ManifestEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetPluginInfoResponse_ManifestEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetPluginInfoResponse_ManifestEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class GetPluginInfoResponse::_Internal {
 public:
};

GetPluginInfoResponse::GetPluginInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  manifest_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.GetPluginInfoResponse)
}
GetPluginInfoResponse::GetPluginInfoResponse(const GetPluginInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  manifest_.MergeFrom(from.manifest_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  vendor_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendor_version().empty()) {
    vendor_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor_version(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.GetPluginInfoResponse)
}

void GetPluginInfoResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vendor_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetPluginInfoResponse::~GetPluginInfoResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.GetPluginInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPluginInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPluginInfoResponse::ArenaDtor(void* object) {
  GetPluginInfoResponse* _this = reinterpret_cast< GetPluginInfoResponse* >(object);
  (void)_this;
}
void GetPluginInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPluginInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPluginInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.GetPluginInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manifest_.Clear();
  name_.ClearToEmpty();
  vendor_version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPluginInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.GetPluginInfoResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vendor_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vendor_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.GetPluginInfoResponse.vendor_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> manifest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&manifest_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPluginInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.GetPluginInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.GetPluginInfoResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string vendor_version = 2;
  if (this->vendor_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_version().data(), static_cast<int>(this->_internal_vendor_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.GetPluginInfoResponse.vendor_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vendor_version(), target);
  }

  // map<string, string> manifest = 3;
  if (!this->_internal_manifest().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.GetPluginInfoResponse.ManifestEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.GetPluginInfoResponse.ManifestEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_manifest().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_manifest().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_manifest().begin();
          it != this->_internal_manifest().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetPluginInfoResponse_ManifestEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_manifest().begin();
          it != this->_internal_manifest().end(); ++it) {
        target = GetPluginInfoResponse_ManifestEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.GetPluginInfoResponse)
  return target;
}

size_t GetPluginInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.GetPluginInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> manifest = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_manifest_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_manifest().begin();
      it != this->_internal_manifest().end(); ++it) {
    total_size += GetPluginInfoResponse_ManifestEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string vendor_version = 2;
  if (this->vendor_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPluginInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.GetPluginInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPluginInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPluginInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.GetPluginInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.GetPluginInfoResponse)
    MergeFrom(*source);
  }
}

void GetPluginInfoResponse::MergeFrom(const GetPluginInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.GetPluginInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  manifest_.MergeFrom(from.manifest_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.vendor_version().size() > 0) {
    _internal_set_vendor_version(from._internal_vendor_version());
  }
}

void GetPluginInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.GetPluginInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPluginInfoResponse::CopyFrom(const GetPluginInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.GetPluginInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPluginInfoResponse::IsInitialized() const {
  return true;
}

void GetPluginInfoResponse::InternalSwap(GetPluginInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  manifest_.Swap(&other->manifest_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vendor_version_.Swap(&other->vendor_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPluginInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetPluginCapabilitiesRequest::_Internal {
 public:
};

GetPluginCapabilitiesRequest::GetPluginCapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.GetPluginCapabilitiesRequest)
}
GetPluginCapabilitiesRequest::GetPluginCapabilitiesRequest(const GetPluginCapabilitiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.GetPluginCapabilitiesRequest)
}

void GetPluginCapabilitiesRequest::SharedCtor() {
}

GetPluginCapabilitiesRequest::~GetPluginCapabilitiesRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.GetPluginCapabilitiesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPluginCapabilitiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPluginCapabilitiesRequest::ArenaDtor(void* object) {
  GetPluginCapabilitiesRequest* _this = reinterpret_cast< GetPluginCapabilitiesRequest* >(object);
  (void)_this;
}
void GetPluginCapabilitiesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPluginCapabilitiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPluginCapabilitiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.GetPluginCapabilitiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPluginCapabilitiesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPluginCapabilitiesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.GetPluginCapabilitiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.GetPluginCapabilitiesRequest)
  return target;
}

size_t GetPluginCapabilitiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.GetPluginCapabilitiesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPluginCapabilitiesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.GetPluginCapabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPluginCapabilitiesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPluginCapabilitiesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.GetPluginCapabilitiesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.GetPluginCapabilitiesRequest)
    MergeFrom(*source);
  }
}

void GetPluginCapabilitiesRequest::MergeFrom(const GetPluginCapabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.GetPluginCapabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetPluginCapabilitiesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.GetPluginCapabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPluginCapabilitiesRequest::CopyFrom(const GetPluginCapabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.GetPluginCapabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPluginCapabilitiesRequest::IsInitialized() const {
  return true;
}

void GetPluginCapabilitiesRequest::InternalSwap(GetPluginCapabilitiesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPluginCapabilitiesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetPluginCapabilitiesResponse::_Internal {
 public:
};

GetPluginCapabilitiesResponse::GetPluginCapabilitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  capabilities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.GetPluginCapabilitiesResponse)
}
GetPluginCapabilitiesResponse::GetPluginCapabilitiesResponse(const GetPluginCapabilitiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      capabilities_(from.capabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.GetPluginCapabilitiesResponse)
}

void GetPluginCapabilitiesResponse::SharedCtor() {
}

GetPluginCapabilitiesResponse::~GetPluginCapabilitiesResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.GetPluginCapabilitiesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPluginCapabilitiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPluginCapabilitiesResponse::ArenaDtor(void* object) {
  GetPluginCapabilitiesResponse* _this = reinterpret_cast< GetPluginCapabilitiesResponse* >(object);
  (void)_this;
}
void GetPluginCapabilitiesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPluginCapabilitiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPluginCapabilitiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.GetPluginCapabilitiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capabilities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPluginCapabilitiesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .csi.v1.PluginCapability capabilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_capabilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPluginCapabilitiesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.GetPluginCapabilitiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .csi.v1.PluginCapability capabilities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_capabilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_capabilities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.GetPluginCapabilitiesResponse)
  return target;
}

size_t GetPluginCapabilitiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.GetPluginCapabilitiesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .csi.v1.PluginCapability capabilities = 1;
  total_size += 1UL * this->_internal_capabilities_size();
  for (const auto& msg : this->capabilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPluginCapabilitiesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.GetPluginCapabilitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPluginCapabilitiesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPluginCapabilitiesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.GetPluginCapabilitiesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.GetPluginCapabilitiesResponse)
    MergeFrom(*source);
  }
}

void GetPluginCapabilitiesResponse::MergeFrom(const GetPluginCapabilitiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.GetPluginCapabilitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  capabilities_.MergeFrom(from.capabilities_);
}

void GetPluginCapabilitiesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.GetPluginCapabilitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPluginCapabilitiesResponse::CopyFrom(const GetPluginCapabilitiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.GetPluginCapabilitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPluginCapabilitiesResponse::IsInitialized() const {
  return true;
}

void GetPluginCapabilitiesResponse::InternalSwap(GetPluginCapabilitiesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  capabilities_.InternalSwap(&other->capabilities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPluginCapabilitiesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PluginCapability_Service::_Internal {
 public:
};

PluginCapability_Service::PluginCapability_Service(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.PluginCapability.Service)
}
PluginCapability_Service::PluginCapability_Service(const PluginCapability_Service& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:csi.v1.PluginCapability.Service)
}

void PluginCapability_Service::SharedCtor() {
type_ = 0;
}

PluginCapability_Service::~PluginCapability_Service() {
  // @@protoc_insertion_point(destructor:csi.v1.PluginCapability.Service)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PluginCapability_Service::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PluginCapability_Service::ArenaDtor(void* object) {
  PluginCapability_Service* _this = reinterpret_cast< PluginCapability_Service* >(object);
  (void)_this;
}
void PluginCapability_Service::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginCapability_Service::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PluginCapability_Service::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.PluginCapability.Service)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginCapability_Service::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.PluginCapability.Service.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::csi::v1::PluginCapability_Service_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginCapability_Service::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.PluginCapability.Service)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.PluginCapability.Service.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.PluginCapability.Service)
  return target;
}

size_t PluginCapability_Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.PluginCapability.Service)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .csi.v1.PluginCapability.Service.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginCapability_Service::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.PluginCapability.Service)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginCapability_Service* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PluginCapability_Service>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.PluginCapability.Service)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.PluginCapability.Service)
    MergeFrom(*source);
  }
}

void PluginCapability_Service::MergeFrom(const PluginCapability_Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.PluginCapability.Service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PluginCapability_Service::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.PluginCapability.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginCapability_Service::CopyFrom(const PluginCapability_Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.PluginCapability.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginCapability_Service::IsInitialized() const {
  return true;
}

void PluginCapability_Service::InternalSwap(PluginCapability_Service* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginCapability_Service::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PluginCapability_VolumeExpansion::_Internal {
 public:
};

PluginCapability_VolumeExpansion::PluginCapability_VolumeExpansion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.PluginCapability.VolumeExpansion)
}
PluginCapability_VolumeExpansion::PluginCapability_VolumeExpansion(const PluginCapability_VolumeExpansion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:csi.v1.PluginCapability.VolumeExpansion)
}

void PluginCapability_VolumeExpansion::SharedCtor() {
type_ = 0;
}

PluginCapability_VolumeExpansion::~PluginCapability_VolumeExpansion() {
  // @@protoc_insertion_point(destructor:csi.v1.PluginCapability.VolumeExpansion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PluginCapability_VolumeExpansion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PluginCapability_VolumeExpansion::ArenaDtor(void* object) {
  PluginCapability_VolumeExpansion* _this = reinterpret_cast< PluginCapability_VolumeExpansion* >(object);
  (void)_this;
}
void PluginCapability_VolumeExpansion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginCapability_VolumeExpansion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PluginCapability_VolumeExpansion::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.PluginCapability.VolumeExpansion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginCapability_VolumeExpansion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.PluginCapability.VolumeExpansion.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::csi::v1::PluginCapability_VolumeExpansion_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginCapability_VolumeExpansion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.PluginCapability.VolumeExpansion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.PluginCapability.VolumeExpansion.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.PluginCapability.VolumeExpansion)
  return target;
}

size_t PluginCapability_VolumeExpansion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.PluginCapability.VolumeExpansion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .csi.v1.PluginCapability.VolumeExpansion.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginCapability_VolumeExpansion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.PluginCapability.VolumeExpansion)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginCapability_VolumeExpansion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PluginCapability_VolumeExpansion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.PluginCapability.VolumeExpansion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.PluginCapability.VolumeExpansion)
    MergeFrom(*source);
  }
}

void PluginCapability_VolumeExpansion::MergeFrom(const PluginCapability_VolumeExpansion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.PluginCapability.VolumeExpansion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PluginCapability_VolumeExpansion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.PluginCapability.VolumeExpansion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginCapability_VolumeExpansion::CopyFrom(const PluginCapability_VolumeExpansion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.PluginCapability.VolumeExpansion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginCapability_VolumeExpansion::IsInitialized() const {
  return true;
}

void PluginCapability_VolumeExpansion::InternalSwap(PluginCapability_VolumeExpansion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginCapability_VolumeExpansion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PluginCapability::_Internal {
 public:
  static const ::csi::v1::PluginCapability_Service& service(const PluginCapability* msg);
  static const ::csi::v1::PluginCapability_VolumeExpansion& volume_expansion(const PluginCapability* msg);
};

const ::csi::v1::PluginCapability_Service&
PluginCapability::_Internal::service(const PluginCapability* msg) {
  return *msg->type_.service_;
}
const ::csi::v1::PluginCapability_VolumeExpansion&
PluginCapability::_Internal::volume_expansion(const PluginCapability* msg) {
  return *msg->type_.volume_expansion_;
}
void PluginCapability::set_allocated_service(::csi::v1::PluginCapability_Service* service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(service);
    if (message_arena != submessage_arena) {
      service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service, submessage_arena);
    }
    set_has_service();
    type_.service_ = service;
  }
  // @@protoc_insertion_point(field_set_allocated:csi.v1.PluginCapability.service)
}
void PluginCapability::set_allocated_volume_expansion(::csi::v1::PluginCapability_VolumeExpansion* volume_expansion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (volume_expansion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(volume_expansion);
    if (message_arena != submessage_arena) {
      volume_expansion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume_expansion, submessage_arena);
    }
    set_has_volume_expansion();
    type_.volume_expansion_ = volume_expansion;
  }
  // @@protoc_insertion_point(field_set_allocated:csi.v1.PluginCapability.volume_expansion)
}
PluginCapability::PluginCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.PluginCapability)
}
PluginCapability::PluginCapability(const PluginCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kService: {
      _internal_mutable_service()->::csi::v1::PluginCapability_Service::MergeFrom(from._internal_service());
      break;
    }
    case kVolumeExpansion: {
      _internal_mutable_volume_expansion()->::csi::v1::PluginCapability_VolumeExpansion::MergeFrom(from._internal_volume_expansion());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.PluginCapability)
}

void PluginCapability::SharedCtor() {
clear_has_type();
}

PluginCapability::~PluginCapability() {
  // @@protoc_insertion_point(destructor:csi.v1.PluginCapability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PluginCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void PluginCapability::ArenaDtor(void* object) {
  PluginCapability* _this = reinterpret_cast< PluginCapability* >(object);
  (void)_this;
}
void PluginCapability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginCapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PluginCapability::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:csi.v1.PluginCapability)
  switch (type_case()) {
    case kService: {
      if (GetArena() == nullptr) {
        delete type_.service_;
      }
      break;
    }
    case kVolumeExpansion: {
      if (GetArena() == nullptr) {
        delete type_.volume_expansion_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void PluginCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.PluginCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginCapability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.PluginCapability.Service service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.PluginCapability.VolumeExpansion volume_expansion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume_expansion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PluginCapability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.PluginCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.PluginCapability.Service service = 1;
  if (_internal_has_service()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::service(this), target, stream);
  }

  // .csi.v1.PluginCapability.VolumeExpansion volume_expansion = 2;
  if (_internal_has_volume_expansion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::volume_expansion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.PluginCapability)
  return target;
}

size_t PluginCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.PluginCapability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .csi.v1.PluginCapability.Service service = 1;
    case kService: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.service_);
      break;
    }
    // .csi.v1.PluginCapability.VolumeExpansion volume_expansion = 2;
    case kVolumeExpansion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.volume_expansion_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginCapability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.PluginCapability)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginCapability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PluginCapability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.PluginCapability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.PluginCapability)
    MergeFrom(*source);
  }
}

void PluginCapability::MergeFrom(const PluginCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.PluginCapability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kService: {
      _internal_mutable_service()->::csi::v1::PluginCapability_Service::MergeFrom(from._internal_service());
      break;
    }
    case kVolumeExpansion: {
      _internal_mutable_volume_expansion()->::csi::v1::PluginCapability_VolumeExpansion::MergeFrom(from._internal_volume_expansion());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void PluginCapability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.PluginCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginCapability::CopyFrom(const PluginCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.PluginCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginCapability::IsInitialized() const {
  return true;
}

void PluginCapability::InternalSwap(PluginCapability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginCapability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProbeRequest::_Internal {
 public:
};

ProbeRequest::ProbeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ProbeRequest)
}
ProbeRequest::ProbeRequest(const ProbeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.ProbeRequest)
}

void ProbeRequest::SharedCtor() {
}

ProbeRequest::~ProbeRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.ProbeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProbeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProbeRequest::ArenaDtor(void* object) {
  ProbeRequest* _this = reinterpret_cast< ProbeRequest* >(object);
  (void)_this;
}
void ProbeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProbeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProbeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ProbeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProbeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProbeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ProbeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ProbeRequest)
  return target;
}

size_t ProbeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ProbeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ProbeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProbeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ProbeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ProbeRequest)
    MergeFrom(*source);
  }
}

void ProbeRequest::MergeFrom(const ProbeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ProbeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProbeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ProbeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbeRequest::CopyFrom(const ProbeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ProbeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbeRequest::IsInitialized() const {
  return true;
}

void ProbeRequest::InternalSwap(ProbeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProbeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProbeResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& ready(const ProbeResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
ProbeResponse::_Internal::ready(const ProbeResponse* msg) {
  return *msg->ready_;
}
void ProbeResponse::clear_ready() {
  if (GetArena() == nullptr && ready_ != nullptr) {
    delete ready_;
  }
  ready_ = nullptr;
}
ProbeResponse::ProbeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ProbeResponse)
}
ProbeResponse::ProbeResponse(const ProbeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ready()) {
    ready_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.ready_);
  } else {
    ready_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.ProbeResponse)
}

void ProbeResponse::SharedCtor() {
ready_ = nullptr;
}

ProbeResponse::~ProbeResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.ProbeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProbeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ready_;
}

void ProbeResponse::ArenaDtor(void* object) {
  ProbeResponse* _this = reinterpret_cast< ProbeResponse* >(object);
  (void)_this;
}
void ProbeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProbeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProbeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ProbeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ready_ != nullptr) {
    delete ready_;
  }
  ready_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProbeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue ready = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ready(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProbeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ProbeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue ready = 1;
  if (this->has_ready()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ready(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ProbeResponse)
  return target;
}

size_t ProbeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ProbeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue ready = 1;
  if (this->has_ready()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ready_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ProbeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProbeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ProbeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ProbeResponse)
    MergeFrom(*source);
  }
}

void ProbeResponse::MergeFrom(const ProbeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ProbeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ready()) {
    _internal_mutable_ready()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_ready());
  }
}

void ProbeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ProbeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbeResponse::CopyFrom(const ProbeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ProbeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbeResponse::IsInitialized() const {
  return true;
}

void ProbeResponse::InternalSwap(ProbeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ready_, other->ready_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProbeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

CreateVolumeRequest_ParametersEntry_DoNotUse::CreateVolumeRequest_ParametersEntry_DoNotUse() {}
CreateVolumeRequest_ParametersEntry_DoNotUse::CreateVolumeRequest_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateVolumeRequest_ParametersEntry_DoNotUse::MergeFrom(const CreateVolumeRequest_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateVolumeRequest_ParametersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CreateVolumeRequest_ParametersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

CreateVolumeRequest_SecretsEntry_DoNotUse::CreateVolumeRequest_SecretsEntry_DoNotUse() {}
CreateVolumeRequest_SecretsEntry_DoNotUse::CreateVolumeRequest_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateVolumeRequest_SecretsEntry_DoNotUse::MergeFrom(const CreateVolumeRequest_SecretsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateVolumeRequest_SecretsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CreateVolumeRequest_SecretsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class CreateVolumeRequest::_Internal {
 public:
  static const ::csi::v1::CapacityRange& capacity_range(const CreateVolumeRequest* msg);
  static const ::csi::v1::VolumeContentSource& volume_content_source(const CreateVolumeRequest* msg);
  static const ::csi::v1::TopologyRequirement& accessibility_requirements(const CreateVolumeRequest* msg);
};

const ::csi::v1::CapacityRange&
CreateVolumeRequest::_Internal::capacity_range(const CreateVolumeRequest* msg) {
  return *msg->capacity_range_;
}
const ::csi::v1::VolumeContentSource&
CreateVolumeRequest::_Internal::volume_content_source(const CreateVolumeRequest* msg) {
  return *msg->volume_content_source_;
}
const ::csi::v1::TopologyRequirement&
CreateVolumeRequest::_Internal::accessibility_requirements(const CreateVolumeRequest* msg) {
  return *msg->accessibility_requirements_;
}
CreateVolumeRequest::CreateVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  volume_capabilities_(arena),
  parameters_(arena),
  secrets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.CreateVolumeRequest)
}
CreateVolumeRequest::CreateVolumeRequest(const CreateVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      volume_capabilities_(from.volume_capabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameters_.MergeFrom(from.parameters_);
  secrets_.MergeFrom(from.secrets_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_capacity_range()) {
    capacity_range_ = new ::csi::v1::CapacityRange(*from.capacity_range_);
  } else {
    capacity_range_ = nullptr;
  }
  if (from._internal_has_volume_content_source()) {
    volume_content_source_ = new ::csi::v1::VolumeContentSource(*from.volume_content_source_);
  } else {
    volume_content_source_ = nullptr;
  }
  if (from._internal_has_accessibility_requirements()) {
    accessibility_requirements_ = new ::csi::v1::TopologyRequirement(*from.accessibility_requirements_);
  } else {
    accessibility_requirements_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.CreateVolumeRequest)
}

void CreateVolumeRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&capacity_range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accessibility_requirements_) -
    reinterpret_cast<char*>(&capacity_range_)) + sizeof(accessibility_requirements_));
}

CreateVolumeRequest::~CreateVolumeRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.CreateVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capacity_range_;
  if (this != internal_default_instance()) delete volume_content_source_;
  if (this != internal_default_instance()) delete accessibility_requirements_;
}

void CreateVolumeRequest::ArenaDtor(void* object) {
  CreateVolumeRequest* _this = reinterpret_cast< CreateVolumeRequest* >(object);
  (void)_this;
}
void CreateVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.CreateVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_capabilities_.Clear();
  parameters_.Clear();
  secrets_.Clear();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && capacity_range_ != nullptr) {
    delete capacity_range_;
  }
  capacity_range_ = nullptr;
  if (GetArena() == nullptr && volume_content_source_ != nullptr) {
    delete volume_content_source_;
  }
  volume_content_source_ = nullptr;
  if (GetArena() == nullptr && accessibility_requirements_ != nullptr) {
    delete accessibility_requirements_;
  }
  accessibility_requirements_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.CreateVolumeRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.CapacityRange capacity_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_capacity_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .csi.v1.VolumeCapability volume_capabilities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_volume_capabilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> parameters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&secrets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .csi.v1.VolumeContentSource volume_content_source = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume_content_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.TopologyRequirement accessibility_requirements = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_accessibility_requirements(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.CreateVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.CreateVolumeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .csi.v1.CapacityRange capacity_range = 2;
  if (this->has_capacity_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::capacity_range(this), target, stream);
  }

  // repeated .csi.v1.VolumeCapability volume_capabilities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_volume_capabilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_volume_capabilities(i), target, stream);
  }

  // map<string, string> parameters = 4;
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.CreateVolumeRequest.ParametersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.CreateVolumeRequest.ParametersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CreateVolumeRequest_ParametersEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = CreateVolumeRequest_ParametersEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
  if (!this->_internal_secrets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.CreateVolumeRequest.SecretsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.CreateVolumeRequest.SecretsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_secrets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_secrets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CreateVolumeRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it) {
        target = CreateVolumeRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .csi.v1.VolumeContentSource volume_content_source = 6;
  if (this->has_volume_content_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::volume_content_source(this), target, stream);
  }

  // .csi.v1.TopologyRequirement accessibility_requirements = 7;
  if (this->has_accessibility_requirements()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::accessibility_requirements(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.CreateVolumeRequest)
  return target;
}

size_t CreateVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.CreateVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .csi.v1.VolumeCapability volume_capabilities = 3;
  total_size += 1UL * this->_internal_volume_capabilities_size();
  for (const auto& msg : this->volume_capabilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> parameters = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += CreateVolumeRequest_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secrets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_secrets().begin();
      it != this->_internal_secrets().end(); ++it) {
    total_size += CreateVolumeRequest_SecretsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .csi.v1.CapacityRange capacity_range = 2;
  if (this->has_capacity_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capacity_range_);
  }

  // .csi.v1.VolumeContentSource volume_content_source = 6;
  if (this->has_volume_content_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_content_source_);
  }

  // .csi.v1.TopologyRequirement accessibility_requirements = 7;
  if (this->has_accessibility_requirements()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accessibility_requirements_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.CreateVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.CreateVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.CreateVolumeRequest)
    MergeFrom(*source);
  }
}

void CreateVolumeRequest::MergeFrom(const CreateVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.CreateVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volume_capabilities_.MergeFrom(from.volume_capabilities_);
  parameters_.MergeFrom(from.parameters_);
  secrets_.MergeFrom(from.secrets_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_capacity_range()) {
    _internal_mutable_capacity_range()->::csi::v1::CapacityRange::MergeFrom(from._internal_capacity_range());
  }
  if (from.has_volume_content_source()) {
    _internal_mutable_volume_content_source()->::csi::v1::VolumeContentSource::MergeFrom(from._internal_volume_content_source());
  }
  if (from.has_accessibility_requirements()) {
    _internal_mutable_accessibility_requirements()->::csi::v1::TopologyRequirement::MergeFrom(from._internal_accessibility_requirements());
  }
}

void CreateVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.CreateVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateVolumeRequest::CopyFrom(const CreateVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.CreateVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateVolumeRequest::IsInitialized() const {
  return true;
}

void CreateVolumeRequest::InternalSwap(CreateVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  volume_capabilities_.InternalSwap(&other->volume_capabilities_);
  parameters_.Swap(&other->parameters_);
  secrets_.Swap(&other->secrets_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateVolumeRequest, accessibility_requirements_)
      + sizeof(CreateVolumeRequest::accessibility_requirements_)
      - PROTOBUF_FIELD_OFFSET(CreateVolumeRequest, capacity_range_)>(
          reinterpret_cast<char*>(&capacity_range_),
          reinterpret_cast<char*>(&other->capacity_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VolumeContentSource_SnapshotSource::_Internal {
 public:
};

VolumeContentSource_SnapshotSource::VolumeContentSource_SnapshotSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.VolumeContentSource.SnapshotSource)
}
VolumeContentSource_SnapshotSource::VolumeContentSource_SnapshotSource(const VolumeContentSource_SnapshotSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snapshot_id().empty()) {
    snapshot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_snapshot_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.VolumeContentSource.SnapshotSource)
}

void VolumeContentSource_SnapshotSource::SharedCtor() {
snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VolumeContentSource_SnapshotSource::~VolumeContentSource_SnapshotSource() {
  // @@protoc_insertion_point(destructor:csi.v1.VolumeContentSource.SnapshotSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VolumeContentSource_SnapshotSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  snapshot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VolumeContentSource_SnapshotSource::ArenaDtor(void* object) {
  VolumeContentSource_SnapshotSource* _this = reinterpret_cast< VolumeContentSource_SnapshotSource* >(object);
  (void)_this;
}
void VolumeContentSource_SnapshotSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeContentSource_SnapshotSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeContentSource_SnapshotSource::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.VolumeContentSource.SnapshotSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeContentSource_SnapshotSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string snapshot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_snapshot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.VolumeContentSource.SnapshotSource.snapshot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolumeContentSource_SnapshotSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.VolumeContentSource.SnapshotSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string snapshot_id = 1;
  if (this->snapshot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snapshot_id().data(), static_cast<int>(this->_internal_snapshot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.VolumeContentSource.SnapshotSource.snapshot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_snapshot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.VolumeContentSource.SnapshotSource)
  return target;
}

size_t VolumeContentSource_SnapshotSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.VolumeContentSource.SnapshotSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string snapshot_id = 1;
  if (this->snapshot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshot_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeContentSource_SnapshotSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.VolumeContentSource.SnapshotSource)
  GOOGLE_DCHECK_NE(&from, this);
  const VolumeContentSource_SnapshotSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VolumeContentSource_SnapshotSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.VolumeContentSource.SnapshotSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.VolumeContentSource.SnapshotSource)
    MergeFrom(*source);
  }
}

void VolumeContentSource_SnapshotSource::MergeFrom(const VolumeContentSource_SnapshotSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.VolumeContentSource.SnapshotSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot_id().size() > 0) {
    _internal_set_snapshot_id(from._internal_snapshot_id());
  }
}

void VolumeContentSource_SnapshotSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.VolumeContentSource.SnapshotSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeContentSource_SnapshotSource::CopyFrom(const VolumeContentSource_SnapshotSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.VolumeContentSource.SnapshotSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeContentSource_SnapshotSource::IsInitialized() const {
  return true;
}

void VolumeContentSource_SnapshotSource::InternalSwap(VolumeContentSource_SnapshotSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  snapshot_id_.Swap(&other->snapshot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeContentSource_SnapshotSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VolumeContentSource_VolumeSource::_Internal {
 public:
};

VolumeContentSource_VolumeSource::VolumeContentSource_VolumeSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.VolumeContentSource.VolumeSource)
}
VolumeContentSource_VolumeSource::VolumeContentSource_VolumeSource(const VolumeContentSource_VolumeSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_id().empty()) {
    volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.VolumeContentSource.VolumeSource)
}

void VolumeContentSource_VolumeSource::SharedCtor() {
volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VolumeContentSource_VolumeSource::~VolumeContentSource_VolumeSource() {
  // @@protoc_insertion_point(destructor:csi.v1.VolumeContentSource.VolumeSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VolumeContentSource_VolumeSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VolumeContentSource_VolumeSource::ArenaDtor(void* object) {
  VolumeContentSource_VolumeSource* _this = reinterpret_cast< VolumeContentSource_VolumeSource* >(object);
  (void)_this;
}
void VolumeContentSource_VolumeSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeContentSource_VolumeSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeContentSource_VolumeSource::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.VolumeContentSource.VolumeSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeContentSource_VolumeSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.VolumeContentSource.VolumeSource.volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolumeContentSource_VolumeSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.VolumeContentSource.VolumeSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_id().data(), static_cast<int>(this->_internal_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.VolumeContentSource.VolumeSource.volume_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_volume_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.VolumeContentSource.VolumeSource)
  return target;
}

size_t VolumeContentSource_VolumeSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.VolumeContentSource.VolumeSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeContentSource_VolumeSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.VolumeContentSource.VolumeSource)
  GOOGLE_DCHECK_NE(&from, this);
  const VolumeContentSource_VolumeSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VolumeContentSource_VolumeSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.VolumeContentSource.VolumeSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.VolumeContentSource.VolumeSource)
    MergeFrom(*source);
  }
}

void VolumeContentSource_VolumeSource::MergeFrom(const VolumeContentSource_VolumeSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.VolumeContentSource.VolumeSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.volume_id().size() > 0) {
    _internal_set_volume_id(from._internal_volume_id());
  }
}

void VolumeContentSource_VolumeSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.VolumeContentSource.VolumeSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeContentSource_VolumeSource::CopyFrom(const VolumeContentSource_VolumeSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.VolumeContentSource.VolumeSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeContentSource_VolumeSource::IsInitialized() const {
  return true;
}

void VolumeContentSource_VolumeSource::InternalSwap(VolumeContentSource_VolumeSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeContentSource_VolumeSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VolumeContentSource::_Internal {
 public:
  static const ::csi::v1::VolumeContentSource_SnapshotSource& snapshot(const VolumeContentSource* msg);
  static const ::csi::v1::VolumeContentSource_VolumeSource& volume(const VolumeContentSource* msg);
};

const ::csi::v1::VolumeContentSource_SnapshotSource&
VolumeContentSource::_Internal::snapshot(const VolumeContentSource* msg) {
  return *msg->type_.snapshot_;
}
const ::csi::v1::VolumeContentSource_VolumeSource&
VolumeContentSource::_Internal::volume(const VolumeContentSource* msg) {
  return *msg->type_.volume_;
}
void VolumeContentSource::set_allocated_snapshot(::csi::v1::VolumeContentSource_SnapshotSource* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    set_has_snapshot();
    type_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:csi.v1.VolumeContentSource.snapshot)
}
void VolumeContentSource::set_allocated_volume(::csi::v1::VolumeContentSource_VolumeSource* volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(volume);
    if (message_arena != submessage_arena) {
      volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    set_has_volume();
    type_.volume_ = volume;
  }
  // @@protoc_insertion_point(field_set_allocated:csi.v1.VolumeContentSource.volume)
}
VolumeContentSource::VolumeContentSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.VolumeContentSource)
}
VolumeContentSource::VolumeContentSource(const VolumeContentSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kSnapshot: {
      _internal_mutable_snapshot()->::csi::v1::VolumeContentSource_SnapshotSource::MergeFrom(from._internal_snapshot());
      break;
    }
    case kVolume: {
      _internal_mutable_volume()->::csi::v1::VolumeContentSource_VolumeSource::MergeFrom(from._internal_volume());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.VolumeContentSource)
}

void VolumeContentSource::SharedCtor() {
clear_has_type();
}

VolumeContentSource::~VolumeContentSource() {
  // @@protoc_insertion_point(destructor:csi.v1.VolumeContentSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VolumeContentSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void VolumeContentSource::ArenaDtor(void* object) {
  VolumeContentSource* _this = reinterpret_cast< VolumeContentSource* >(object);
  (void)_this;
}
void VolumeContentSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeContentSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeContentSource::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:csi.v1.VolumeContentSource)
  switch (type_case()) {
    case kSnapshot: {
      if (GetArena() == nullptr) {
        delete type_.snapshot_;
      }
      break;
    }
    case kVolume: {
      if (GetArena() == nullptr) {
        delete type_.volume_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void VolumeContentSource::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.VolumeContentSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeContentSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.VolumeContentSource.SnapshotSource snapshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.VolumeContentSource.VolumeSource volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolumeContentSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.VolumeContentSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.VolumeContentSource.SnapshotSource snapshot = 1;
  if (_internal_has_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::snapshot(this), target, stream);
  }

  // .csi.v1.VolumeContentSource.VolumeSource volume = 2;
  if (_internal_has_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::volume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.VolumeContentSource)
  return target;
}

size_t VolumeContentSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.VolumeContentSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .csi.v1.VolumeContentSource.SnapshotSource snapshot = 1;
    case kSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.snapshot_);
      break;
    }
    // .csi.v1.VolumeContentSource.VolumeSource volume = 2;
    case kVolume: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.volume_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeContentSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.VolumeContentSource)
  GOOGLE_DCHECK_NE(&from, this);
  const VolumeContentSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VolumeContentSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.VolumeContentSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.VolumeContentSource)
    MergeFrom(*source);
  }
}

void VolumeContentSource::MergeFrom(const VolumeContentSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.VolumeContentSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kSnapshot: {
      _internal_mutable_snapshot()->::csi::v1::VolumeContentSource_SnapshotSource::MergeFrom(from._internal_snapshot());
      break;
    }
    case kVolume: {
      _internal_mutable_volume()->::csi::v1::VolumeContentSource_VolumeSource::MergeFrom(from._internal_volume());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void VolumeContentSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.VolumeContentSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeContentSource::CopyFrom(const VolumeContentSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.VolumeContentSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeContentSource::IsInitialized() const {
  return true;
}

void VolumeContentSource::InternalSwap(VolumeContentSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeContentSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateVolumeResponse::_Internal {
 public:
  static const ::csi::v1::Volume& volume(const CreateVolumeResponse* msg);
};

const ::csi::v1::Volume&
CreateVolumeResponse::_Internal::volume(const CreateVolumeResponse* msg) {
  return *msg->volume_;
}
CreateVolumeResponse::CreateVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.CreateVolumeResponse)
}
CreateVolumeResponse::CreateVolumeResponse(const CreateVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_volume()) {
    volume_ = new ::csi::v1::Volume(*from.volume_);
  } else {
    volume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.CreateVolumeResponse)
}

void CreateVolumeResponse::SharedCtor() {
volume_ = nullptr;
}

CreateVolumeResponse::~CreateVolumeResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.CreateVolumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete volume_;
}

void CreateVolumeResponse::ArenaDtor(void* object) {
  CreateVolumeResponse* _this = reinterpret_cast< CreateVolumeResponse* >(object);
  (void)_this;
}
void CreateVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.CreateVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.Volume volume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateVolumeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.CreateVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.Volume volume = 1;
  if (this->has_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::volume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.CreateVolumeResponse)
  return target;
}

size_t CreateVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.CreateVolumeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .csi.v1.Volume volume = 1;
  if (this->has_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateVolumeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.CreateVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateVolumeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateVolumeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.CreateVolumeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.CreateVolumeResponse)
    MergeFrom(*source);
  }
}

void CreateVolumeResponse::MergeFrom(const CreateVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.CreateVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_volume()) {
    _internal_mutable_volume()->::csi::v1::Volume::MergeFrom(from._internal_volume());
  }
}

void CreateVolumeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.CreateVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateVolumeResponse::CopyFrom(const CreateVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.CreateVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateVolumeResponse::IsInitialized() const {
  return true;
}

void CreateVolumeResponse::InternalSwap(CreateVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(volume_, other->volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateVolumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VolumeCapability_BlockVolume::_Internal {
 public:
};

VolumeCapability_BlockVolume::VolumeCapability_BlockVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.VolumeCapability.BlockVolume)
}
VolumeCapability_BlockVolume::VolumeCapability_BlockVolume(const VolumeCapability_BlockVolume& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.VolumeCapability.BlockVolume)
}

void VolumeCapability_BlockVolume::SharedCtor() {
}

VolumeCapability_BlockVolume::~VolumeCapability_BlockVolume() {
  // @@protoc_insertion_point(destructor:csi.v1.VolumeCapability.BlockVolume)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VolumeCapability_BlockVolume::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VolumeCapability_BlockVolume::ArenaDtor(void* object) {
  VolumeCapability_BlockVolume* _this = reinterpret_cast< VolumeCapability_BlockVolume* >(object);
  (void)_this;
}
void VolumeCapability_BlockVolume::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeCapability_BlockVolume::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeCapability_BlockVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.VolumeCapability.BlockVolume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeCapability_BlockVolume::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolumeCapability_BlockVolume::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.VolumeCapability.BlockVolume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.VolumeCapability.BlockVolume)
  return target;
}

size_t VolumeCapability_BlockVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.VolumeCapability.BlockVolume)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeCapability_BlockVolume::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.VolumeCapability.BlockVolume)
  GOOGLE_DCHECK_NE(&from, this);
  const VolumeCapability_BlockVolume* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VolumeCapability_BlockVolume>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.VolumeCapability.BlockVolume)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.VolumeCapability.BlockVolume)
    MergeFrom(*source);
  }
}

void VolumeCapability_BlockVolume::MergeFrom(const VolumeCapability_BlockVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.VolumeCapability.BlockVolume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VolumeCapability_BlockVolume::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.VolumeCapability.BlockVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeCapability_BlockVolume::CopyFrom(const VolumeCapability_BlockVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.VolumeCapability.BlockVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeCapability_BlockVolume::IsInitialized() const {
  return true;
}

void VolumeCapability_BlockVolume::InternalSwap(VolumeCapability_BlockVolume* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeCapability_BlockVolume::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VolumeCapability_MountVolume::_Internal {
 public:
};

VolumeCapability_MountVolume::VolumeCapability_MountVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mount_flags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.VolumeCapability.MountVolume)
}
VolumeCapability_MountVolume::VolumeCapability_MountVolume(const VolumeCapability_MountVolume& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mount_flags_(from.mount_flags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fs_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fs_type().empty()) {
    fs_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fs_type(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.VolumeCapability.MountVolume)
}

void VolumeCapability_MountVolume::SharedCtor() {
fs_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VolumeCapability_MountVolume::~VolumeCapability_MountVolume() {
  // @@protoc_insertion_point(destructor:csi.v1.VolumeCapability.MountVolume)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VolumeCapability_MountVolume::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fs_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VolumeCapability_MountVolume::ArenaDtor(void* object) {
  VolumeCapability_MountVolume* _this = reinterpret_cast< VolumeCapability_MountVolume* >(object);
  (void)_this;
}
void VolumeCapability_MountVolume::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeCapability_MountVolume::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeCapability_MountVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.VolumeCapability.MountVolume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mount_flags_.Clear();
  fs_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeCapability_MountVolume::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fs_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fs_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.VolumeCapability.MountVolume.fs_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string mount_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mount_flags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.VolumeCapability.MountVolume.mount_flags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolumeCapability_MountVolume::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.VolumeCapability.MountVolume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fs_type = 1;
  if (this->fs_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fs_type().data(), static_cast<int>(this->_internal_fs_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.VolumeCapability.MountVolume.fs_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fs_type(), target);
  }

  // repeated string mount_flags = 2;
  for (int i = 0, n = this->_internal_mount_flags_size(); i < n; i++) {
    const auto& s = this->_internal_mount_flags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.VolumeCapability.MountVolume.mount_flags");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.VolumeCapability.MountVolume)
  return target;
}

size_t VolumeCapability_MountVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.VolumeCapability.MountVolume)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mount_flags = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mount_flags_.size());
  for (int i = 0, n = mount_flags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      mount_flags_.Get(i));
  }

  // string fs_type = 1;
  if (this->fs_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fs_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeCapability_MountVolume::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.VolumeCapability.MountVolume)
  GOOGLE_DCHECK_NE(&from, this);
  const VolumeCapability_MountVolume* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VolumeCapability_MountVolume>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.VolumeCapability.MountVolume)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.VolumeCapability.MountVolume)
    MergeFrom(*source);
  }
}

void VolumeCapability_MountVolume::MergeFrom(const VolumeCapability_MountVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.VolumeCapability.MountVolume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mount_flags_.MergeFrom(from.mount_flags_);
  if (from.fs_type().size() > 0) {
    _internal_set_fs_type(from._internal_fs_type());
  }
}

void VolumeCapability_MountVolume::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.VolumeCapability.MountVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeCapability_MountVolume::CopyFrom(const VolumeCapability_MountVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.VolumeCapability.MountVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeCapability_MountVolume::IsInitialized() const {
  return true;
}

void VolumeCapability_MountVolume::InternalSwap(VolumeCapability_MountVolume* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mount_flags_.InternalSwap(&other->mount_flags_);
  fs_type_.Swap(&other->fs_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeCapability_MountVolume::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VolumeCapability_AccessMode::_Internal {
 public:
};

VolumeCapability_AccessMode::VolumeCapability_AccessMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.VolumeCapability.AccessMode)
}
VolumeCapability_AccessMode::VolumeCapability_AccessMode(const VolumeCapability_AccessMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:csi.v1.VolumeCapability.AccessMode)
}

void VolumeCapability_AccessMode::SharedCtor() {
mode_ = 0;
}

VolumeCapability_AccessMode::~VolumeCapability_AccessMode() {
  // @@protoc_insertion_point(destructor:csi.v1.VolumeCapability.AccessMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VolumeCapability_AccessMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VolumeCapability_AccessMode::ArenaDtor(void* object) {
  VolumeCapability_AccessMode* _this = reinterpret_cast< VolumeCapability_AccessMode* >(object);
  (void)_this;
}
void VolumeCapability_AccessMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeCapability_AccessMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeCapability_AccessMode::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.VolumeCapability.AccessMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeCapability_AccessMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.VolumeCapability.AccessMode.Mode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::csi::v1::VolumeCapability_AccessMode_Mode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolumeCapability_AccessMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.VolumeCapability.AccessMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.VolumeCapability.AccessMode.Mode mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.VolumeCapability.AccessMode)
  return target;
}

size_t VolumeCapability_AccessMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.VolumeCapability.AccessMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .csi.v1.VolumeCapability.AccessMode.Mode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeCapability_AccessMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.VolumeCapability.AccessMode)
  GOOGLE_DCHECK_NE(&from, this);
  const VolumeCapability_AccessMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VolumeCapability_AccessMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.VolumeCapability.AccessMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.VolumeCapability.AccessMode)
    MergeFrom(*source);
  }
}

void VolumeCapability_AccessMode::MergeFrom(const VolumeCapability_AccessMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.VolumeCapability.AccessMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void VolumeCapability_AccessMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.VolumeCapability.AccessMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeCapability_AccessMode::CopyFrom(const VolumeCapability_AccessMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.VolumeCapability.AccessMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeCapability_AccessMode::IsInitialized() const {
  return true;
}

void VolumeCapability_AccessMode::InternalSwap(VolumeCapability_AccessMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeCapability_AccessMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VolumeCapability::_Internal {
 public:
  static const ::csi::v1::VolumeCapability_BlockVolume& block(const VolumeCapability* msg);
  static const ::csi::v1::VolumeCapability_MountVolume& mount(const VolumeCapability* msg);
  static const ::csi::v1::VolumeCapability_AccessMode& access_mode(const VolumeCapability* msg);
};

const ::csi::v1::VolumeCapability_BlockVolume&
VolumeCapability::_Internal::block(const VolumeCapability* msg) {
  return *msg->access_type_.block_;
}
const ::csi::v1::VolumeCapability_MountVolume&
VolumeCapability::_Internal::mount(const VolumeCapability* msg) {
  return *msg->access_type_.mount_;
}
const ::csi::v1::VolumeCapability_AccessMode&
VolumeCapability::_Internal::access_mode(const VolumeCapability* msg) {
  return *msg->access_mode_;
}
void VolumeCapability::set_allocated_block(::csi::v1::VolumeCapability_BlockVolume* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_access_type();
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    set_has_block();
    access_type_.block_ = block;
  }
  // @@protoc_insertion_point(field_set_allocated:csi.v1.VolumeCapability.block)
}
void VolumeCapability::set_allocated_mount(::csi::v1::VolumeCapability_MountVolume* mount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_access_type();
  if (mount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mount);
    if (message_arena != submessage_arena) {
      mount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mount, submessage_arena);
    }
    set_has_mount();
    access_type_.mount_ = mount;
  }
  // @@protoc_insertion_point(field_set_allocated:csi.v1.VolumeCapability.mount)
}
VolumeCapability::VolumeCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.VolumeCapability)
}
VolumeCapability::VolumeCapability(const VolumeCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_access_mode()) {
    access_mode_ = new ::csi::v1::VolumeCapability_AccessMode(*from.access_mode_);
  } else {
    access_mode_ = nullptr;
  }
  clear_has_access_type();
  switch (from.access_type_case()) {
    case kBlock: {
      _internal_mutable_block()->::csi::v1::VolumeCapability_BlockVolume::MergeFrom(from._internal_block());
      break;
    }
    case kMount: {
      _internal_mutable_mount()->::csi::v1::VolumeCapability_MountVolume::MergeFrom(from._internal_mount());
      break;
    }
    case ACCESS_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.VolumeCapability)
}

void VolumeCapability::SharedCtor() {
access_mode_ = nullptr;
clear_has_access_type();
}

VolumeCapability::~VolumeCapability() {
  // @@protoc_insertion_point(destructor:csi.v1.VolumeCapability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VolumeCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete access_mode_;
  if (has_access_type()) {
    clear_access_type();
  }
}

void VolumeCapability::ArenaDtor(void* object) {
  VolumeCapability* _this = reinterpret_cast< VolumeCapability* >(object);
  (void)_this;
}
void VolumeCapability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeCapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeCapability::clear_access_type() {
// @@protoc_insertion_point(one_of_clear_start:csi.v1.VolumeCapability)
  switch (access_type_case()) {
    case kBlock: {
      if (GetArena() == nullptr) {
        delete access_type_.block_;
      }
      break;
    }
    case kMount: {
      if (GetArena() == nullptr) {
        delete access_type_.mount_;
      }
      break;
    }
    case ACCESS_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACCESS_TYPE_NOT_SET;
}


void VolumeCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.VolumeCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && access_mode_ != nullptr) {
    delete access_mode_;
  }
  access_mode_ = nullptr;
  clear_access_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeCapability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.VolumeCapability.BlockVolume block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.VolumeCapability.MountVolume mount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.VolumeCapability.AccessMode access_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_access_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolumeCapability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.VolumeCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.VolumeCapability.BlockVolume block = 1;
  if (_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  // .csi.v1.VolumeCapability.MountVolume mount = 2;
  if (_internal_has_mount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mount(this), target, stream);
  }

  // .csi.v1.VolumeCapability.AccessMode access_mode = 3;
  if (this->has_access_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::access_mode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.VolumeCapability)
  return target;
}

size_t VolumeCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.VolumeCapability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .csi.v1.VolumeCapability.AccessMode access_mode = 3;
  if (this->has_access_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *access_mode_);
  }

  switch (access_type_case()) {
    // .csi.v1.VolumeCapability.BlockVolume block = 1;
    case kBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *access_type_.block_);
      break;
    }
    // .csi.v1.VolumeCapability.MountVolume mount = 2;
    case kMount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *access_type_.mount_);
      break;
    }
    case ACCESS_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeCapability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.VolumeCapability)
  GOOGLE_DCHECK_NE(&from, this);
  const VolumeCapability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VolumeCapability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.VolumeCapability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.VolumeCapability)
    MergeFrom(*source);
  }
}

void VolumeCapability::MergeFrom(const VolumeCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.VolumeCapability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_access_mode()) {
    _internal_mutable_access_mode()->::csi::v1::VolumeCapability_AccessMode::MergeFrom(from._internal_access_mode());
  }
  switch (from.access_type_case()) {
    case kBlock: {
      _internal_mutable_block()->::csi::v1::VolumeCapability_BlockVolume::MergeFrom(from._internal_block());
      break;
    }
    case kMount: {
      _internal_mutable_mount()->::csi::v1::VolumeCapability_MountVolume::MergeFrom(from._internal_mount());
      break;
    }
    case ACCESS_TYPE_NOT_SET: {
      break;
    }
  }
}

void VolumeCapability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.VolumeCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeCapability::CopyFrom(const VolumeCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.VolumeCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeCapability::IsInitialized() const {
  return true;
}

void VolumeCapability::InternalSwap(VolumeCapability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(access_mode_, other->access_mode_);
  swap(access_type_, other->access_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeCapability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CapacityRange::_Internal {
 public:
};

CapacityRange::CapacityRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.CapacityRange)
}
CapacityRange::CapacityRange(const CapacityRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&required_bytes_, &from.required_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_bytes_) -
    reinterpret_cast<char*>(&required_bytes_)) + sizeof(limit_bytes_));
  // @@protoc_insertion_point(copy_constructor:csi.v1.CapacityRange)
}

void CapacityRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&required_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_bytes_) -
    reinterpret_cast<char*>(&required_bytes_)) + sizeof(limit_bytes_));
}

CapacityRange::~CapacityRange() {
  // @@protoc_insertion_point(destructor:csi.v1.CapacityRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CapacityRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CapacityRange::ArenaDtor(void* object) {
  CapacityRange* _this = reinterpret_cast< CapacityRange* >(object);
  (void)_this;
}
void CapacityRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapacityRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CapacityRange::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.CapacityRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&required_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_bytes_) -
      reinterpret_cast<char*>(&required_bytes_)) + sizeof(limit_bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapacityRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 required_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          required_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapacityRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.CapacityRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 required_bytes = 1;
  if (this->required_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_required_bytes(), target);
  }

  // int64 limit_bytes = 2;
  if (this->limit_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_limit_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.CapacityRange)
  return target;
}

size_t CapacityRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.CapacityRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 required_bytes = 1;
  if (this->required_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_required_bytes());
  }

  // int64 limit_bytes = 2;
  if (this->limit_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapacityRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.CapacityRange)
  GOOGLE_DCHECK_NE(&from, this);
  const CapacityRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CapacityRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.CapacityRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.CapacityRange)
    MergeFrom(*source);
  }
}

void CapacityRange::MergeFrom(const CapacityRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.CapacityRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.required_bytes() != 0) {
    _internal_set_required_bytes(from._internal_required_bytes());
  }
  if (from.limit_bytes() != 0) {
    _internal_set_limit_bytes(from._internal_limit_bytes());
  }
}

void CapacityRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.CapacityRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapacityRange::CopyFrom(const CapacityRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.CapacityRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapacityRange::IsInitialized() const {
  return true;
}

void CapacityRange::InternalSwap(CapacityRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CapacityRange, limit_bytes_)
      + sizeof(CapacityRange::limit_bytes_)
      - PROTOBUF_FIELD_OFFSET(CapacityRange, required_bytes_)>(
          reinterpret_cast<char*>(&required_bytes_),
          reinterpret_cast<char*>(&other->required_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CapacityRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Volume_VolumeContextEntry_DoNotUse::Volume_VolumeContextEntry_DoNotUse() {}
Volume_VolumeContextEntry_DoNotUse::Volume_VolumeContextEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Volume_VolumeContextEntry_DoNotUse::MergeFrom(const Volume_VolumeContextEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Volume_VolumeContextEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Volume_VolumeContextEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Volume::_Internal {
 public:
  static const ::csi::v1::VolumeContentSource& content_source(const Volume* msg);
};

const ::csi::v1::VolumeContentSource&
Volume::_Internal::content_source(const Volume* msg) {
  return *msg->content_source_;
}
Volume::Volume(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  volume_context_(arena),
  accessible_topology_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.Volume)
}
Volume::Volume(const Volume& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accessible_topology_(from.accessible_topology_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  volume_context_.MergeFrom(from.volume_context_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_id().empty()) {
    volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_id(), 
      GetArena());
  }
  if (from._internal_has_content_source()) {
    content_source_ = new ::csi::v1::VolumeContentSource(*from.content_source_);
  } else {
    content_source_ = nullptr;
  }
  capacity_bytes_ = from.capacity_bytes_;
  // @@protoc_insertion_point(copy_constructor:csi.v1.Volume)
}

void Volume::SharedCtor() {
volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&content_source_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&capacity_bytes_) -
    reinterpret_cast<char*>(&content_source_)) + sizeof(capacity_bytes_));
}

Volume::~Volume() {
  // @@protoc_insertion_point(destructor:csi.v1.Volume)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Volume::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete content_source_;
}

void Volume::ArenaDtor(void* object) {
  Volume* _this = reinterpret_cast< Volume* >(object);
  (void)_this;
}
void Volume::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Volume::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Volume::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.Volume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_context_.Clear();
  accessible_topology_.Clear();
  volume_id_.ClearToEmpty();
  if (GetArena() == nullptr && content_source_ != nullptr) {
    delete content_source_;
  }
  content_source_ = nullptr;
  capacity_bytes_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Volume::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 capacity_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          capacity_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.Volume.volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> volume_context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&volume_context_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .csi.v1.VolumeContentSource content_source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_content_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .csi.v1.Topology accessible_topology = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accessible_topology(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Volume::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.Volume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 capacity_bytes = 1;
  if (this->capacity_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_capacity_bytes(), target);
  }

  // string volume_id = 2;
  if (this->volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_id().data(), static_cast<int>(this->_internal_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.Volume.volume_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_id(), target);
  }

  // map<string, string> volume_context = 3;
  if (!this->_internal_volume_context().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.Volume.VolumeContextEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.Volume.VolumeContextEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_volume_context().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_volume_context().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_volume_context().begin();
          it != this->_internal_volume_context().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Volume_VolumeContextEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_volume_context().begin();
          it != this->_internal_volume_context().end(); ++it) {
        target = Volume_VolumeContextEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .csi.v1.VolumeContentSource content_source = 4;
  if (this->has_content_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::content_source(this), target, stream);
  }

  // repeated .csi.v1.Topology accessible_topology = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accessible_topology_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_accessible_topology(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.Volume)
  return target;
}

size_t Volume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.Volume)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> volume_context = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volume_context_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_volume_context().begin();
      it != this->_internal_volume_context().end(); ++it) {
    total_size += Volume_VolumeContextEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .csi.v1.Topology accessible_topology = 5;
  total_size += 1UL * this->_internal_accessible_topology_size();
  for (const auto& msg : this->accessible_topology_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string volume_id = 2;
  if (this->volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_id());
  }

  // .csi.v1.VolumeContentSource content_source = 4;
  if (this->has_content_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *content_source_);
  }

  // int64 capacity_bytes = 1;
  if (this->capacity_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_capacity_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Volume::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.Volume)
  GOOGLE_DCHECK_NE(&from, this);
  const Volume* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Volume>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.Volume)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.Volume)
    MergeFrom(*source);
  }
}

void Volume::MergeFrom(const Volume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.Volume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volume_context_.MergeFrom(from.volume_context_);
  accessible_topology_.MergeFrom(from.accessible_topology_);
  if (from.volume_id().size() > 0) {
    _internal_set_volume_id(from._internal_volume_id());
  }
  if (from.has_content_source()) {
    _internal_mutable_content_source()->::csi::v1::VolumeContentSource::MergeFrom(from._internal_content_source());
  }
  if (from.capacity_bytes() != 0) {
    _internal_set_capacity_bytes(from._internal_capacity_bytes());
  }
}

void Volume::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.Volume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Volume::CopyFrom(const Volume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.Volume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Volume::IsInitialized() const {
  return true;
}

void Volume::InternalSwap(Volume* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  volume_context_.Swap(&other->volume_context_);
  accessible_topology_.InternalSwap(&other->accessible_topology_);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Volume, capacity_bytes_)
      + sizeof(Volume::capacity_bytes_)
      - PROTOBUF_FIELD_OFFSET(Volume, content_source_)>(
          reinterpret_cast<char*>(&content_source_),
          reinterpret_cast<char*>(&other->content_source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Volume::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TopologyRequirement::_Internal {
 public:
};

TopologyRequirement::TopologyRequirement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requisite_(arena),
  preferred_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.TopologyRequirement)
}
TopologyRequirement::TopologyRequirement(const TopologyRequirement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requisite_(from.requisite_),
      preferred_(from.preferred_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.TopologyRequirement)
}

void TopologyRequirement::SharedCtor() {
}

TopologyRequirement::~TopologyRequirement() {
  // @@protoc_insertion_point(destructor:csi.v1.TopologyRequirement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopologyRequirement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TopologyRequirement::ArenaDtor(void* object) {
  TopologyRequirement* _this = reinterpret_cast< TopologyRequirement* >(object);
  (void)_this;
}
void TopologyRequirement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopologyRequirement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TopologyRequirement::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.TopologyRequirement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requisite_.Clear();
  preferred_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopologyRequirement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .csi.v1.Topology requisite = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requisite(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .csi.v1.Topology preferred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_preferred(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopologyRequirement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.TopologyRequirement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .csi.v1.Topology requisite = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requisite_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_requisite(i), target, stream);
  }

  // repeated .csi.v1.Topology preferred = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_preferred_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_preferred(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.TopologyRequirement)
  return target;
}

size_t TopologyRequirement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.TopologyRequirement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .csi.v1.Topology requisite = 1;
  total_size += 1UL * this->_internal_requisite_size();
  for (const auto& msg : this->requisite_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .csi.v1.Topology preferred = 2;
  total_size += 1UL * this->_internal_preferred_size();
  for (const auto& msg : this->preferred_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopologyRequirement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.TopologyRequirement)
  GOOGLE_DCHECK_NE(&from, this);
  const TopologyRequirement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopologyRequirement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.TopologyRequirement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.TopologyRequirement)
    MergeFrom(*source);
  }
}

void TopologyRequirement::MergeFrom(const TopologyRequirement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.TopologyRequirement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requisite_.MergeFrom(from.requisite_);
  preferred_.MergeFrom(from.preferred_);
}

void TopologyRequirement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.TopologyRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopologyRequirement::CopyFrom(const TopologyRequirement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.TopologyRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopologyRequirement::IsInitialized() const {
  return true;
}

void TopologyRequirement::InternalSwap(TopologyRequirement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requisite_.InternalSwap(&other->requisite_);
  preferred_.InternalSwap(&other->preferred_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopologyRequirement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Topology_SegmentsEntry_DoNotUse::Topology_SegmentsEntry_DoNotUse() {}
Topology_SegmentsEntry_DoNotUse::Topology_SegmentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Topology_SegmentsEntry_DoNotUse::MergeFrom(const Topology_SegmentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Topology_SegmentsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Topology_SegmentsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Topology::_Internal {
 public:
};

Topology::Topology(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.Topology)
}
Topology::Topology(const Topology& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  segments_.MergeFrom(from.segments_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.Topology)
}

void Topology::SharedCtor() {
}

Topology::~Topology() {
  // @@protoc_insertion_point(destructor:csi.v1.Topology)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Topology::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Topology::ArenaDtor(void* object) {
  Topology* _this = reinterpret_cast< Topology* >(object);
  (void)_this;
}
void Topology::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Topology::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Topology::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.Topology)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Topology::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&segments_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Topology::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.Topology)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> segments = 1;
  if (!this->_internal_segments().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.Topology.SegmentsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.Topology.SegmentsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_segments().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_segments().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_segments().begin();
          it != this->_internal_segments().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Topology_SegmentsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_segments().begin();
          it != this->_internal_segments().end(); ++it) {
        target = Topology_SegmentsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.Topology)
  return target;
}

size_t Topology::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.Topology)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> segments = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_segments_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_segments().begin();
      it != this->_internal_segments().end(); ++it) {
    total_size += Topology_SegmentsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Topology::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.Topology)
  GOOGLE_DCHECK_NE(&from, this);
  const Topology* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Topology>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.Topology)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.Topology)
    MergeFrom(*source);
  }
}

void Topology::MergeFrom(const Topology& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.Topology)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
}

void Topology::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.Topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topology::CopyFrom(const Topology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.Topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topology::IsInitialized() const {
  return true;
}

void Topology::InternalSwap(Topology* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  segments_.Swap(&other->segments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Topology::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DeleteVolumeRequest_SecretsEntry_DoNotUse::DeleteVolumeRequest_SecretsEntry_DoNotUse() {}
DeleteVolumeRequest_SecretsEntry_DoNotUse::DeleteVolumeRequest_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DeleteVolumeRequest_SecretsEntry_DoNotUse::MergeFrom(const DeleteVolumeRequest_SecretsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DeleteVolumeRequest_SecretsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DeleteVolumeRequest_SecretsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class DeleteVolumeRequest::_Internal {
 public:
};

DeleteVolumeRequest::DeleteVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  secrets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.DeleteVolumeRequest)
}
DeleteVolumeRequest::DeleteVolumeRequest(const DeleteVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secrets_.MergeFrom(from.secrets_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_id().empty()) {
    volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.DeleteVolumeRequest)
}

void DeleteVolumeRequest::SharedCtor() {
volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteVolumeRequest::~DeleteVolumeRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.DeleteVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteVolumeRequest::ArenaDtor(void* object) {
  DeleteVolumeRequest* _this = reinterpret_cast< DeleteVolumeRequest* >(object);
  (void)_this;
}
void DeleteVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.DeleteVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secrets_.Clear();
  volume_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.DeleteVolumeRequest.volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> secrets = 2 [(.csi.v1.csi_secret) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&secrets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.DeleteVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_id().data(), static_cast<int>(this->_internal_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.DeleteVolumeRequest.volume_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_volume_id(), target);
  }

  // map<string, string> secrets = 2 [(.csi.v1.csi_secret) = true];
  if (!this->_internal_secrets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.DeleteVolumeRequest.SecretsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.DeleteVolumeRequest.SecretsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_secrets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_secrets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DeleteVolumeRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it) {
        target = DeleteVolumeRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.DeleteVolumeRequest)
  return target;
}

size_t DeleteVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.DeleteVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> secrets = 2 [(.csi.v1.csi_secret) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secrets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_secrets().begin();
      it != this->_internal_secrets().end(); ++it) {
    total_size += DeleteVolumeRequest_SecretsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.DeleteVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.DeleteVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.DeleteVolumeRequest)
    MergeFrom(*source);
  }
}

void DeleteVolumeRequest::MergeFrom(const DeleteVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.DeleteVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secrets_.MergeFrom(from.secrets_);
  if (from.volume_id().size() > 0) {
    _internal_set_volume_id(from._internal_volume_id());
  }
}

void DeleteVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.DeleteVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVolumeRequest::CopyFrom(const DeleteVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.DeleteVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVolumeRequest::IsInitialized() const {
  return true;
}

void DeleteVolumeRequest::InternalSwap(DeleteVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  secrets_.Swap(&other->secrets_);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteVolumeResponse::_Internal {
 public:
};

DeleteVolumeResponse::DeleteVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.DeleteVolumeResponse)
}
DeleteVolumeResponse::DeleteVolumeResponse(const DeleteVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.DeleteVolumeResponse)
}

void DeleteVolumeResponse::SharedCtor() {
}

DeleteVolumeResponse::~DeleteVolumeResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.DeleteVolumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteVolumeResponse::ArenaDtor(void* object) {
  DeleteVolumeResponse* _this = reinterpret_cast< DeleteVolumeResponse* >(object);
  (void)_this;
}
void DeleteVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.DeleteVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteVolumeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.DeleteVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.DeleteVolumeResponse)
  return target;
}

size_t DeleteVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.DeleteVolumeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteVolumeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.DeleteVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVolumeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteVolumeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.DeleteVolumeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.DeleteVolumeResponse)
    MergeFrom(*source);
  }
}

void DeleteVolumeResponse::MergeFrom(const DeleteVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.DeleteVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteVolumeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.DeleteVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVolumeResponse::CopyFrom(const DeleteVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.DeleteVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVolumeResponse::IsInitialized() const {
  return true;
}

void DeleteVolumeResponse::InternalSwap(DeleteVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVolumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ControllerPublishVolumeRequest_SecretsEntry_DoNotUse::ControllerPublishVolumeRequest_SecretsEntry_DoNotUse() {}
ControllerPublishVolumeRequest_SecretsEntry_DoNotUse::ControllerPublishVolumeRequest_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ControllerPublishVolumeRequest_SecretsEntry_DoNotUse::MergeFrom(const ControllerPublishVolumeRequest_SecretsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ControllerPublishVolumeRequest_SecretsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ControllerPublishVolumeRequest_SecretsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse::ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse() {}
ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse::ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse::MergeFrom(const ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ControllerPublishVolumeRequest::_Internal {
 public:
  static const ::csi::v1::VolumeCapability& volume_capability(const ControllerPublishVolumeRequest* msg);
};

const ::csi::v1::VolumeCapability&
ControllerPublishVolumeRequest::_Internal::volume_capability(const ControllerPublishVolumeRequest* msg) {
  return *msg->volume_capability_;
}
ControllerPublishVolumeRequest::ControllerPublishVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  secrets_(arena),
  volume_context_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ControllerPublishVolumeRequest)
}
ControllerPublishVolumeRequest::ControllerPublishVolumeRequest(const ControllerPublishVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secrets_.MergeFrom(from.secrets_);
  volume_context_.MergeFrom(from.volume_context_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_id().empty()) {
    volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_id(), 
      GetArena());
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArena());
  }
  if (from._internal_has_volume_capability()) {
    volume_capability_ = new ::csi::v1::VolumeCapability(*from.volume_capability_);
  } else {
    volume_capability_ = nullptr;
  }
  readonly_ = from.readonly_;
  // @@protoc_insertion_point(copy_constructor:csi.v1.ControllerPublishVolumeRequest)
}

void ControllerPublishVolumeRequest::SharedCtor() {
volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&volume_capability_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&readonly_) -
    reinterpret_cast<char*>(&volume_capability_)) + sizeof(readonly_));
}

ControllerPublishVolumeRequest::~ControllerPublishVolumeRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.ControllerPublishVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerPublishVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete volume_capability_;
}

void ControllerPublishVolumeRequest::ArenaDtor(void* object) {
  ControllerPublishVolumeRequest* _this = reinterpret_cast< ControllerPublishVolumeRequest* >(object);
  (void)_this;
}
void ControllerPublishVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerPublishVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerPublishVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ControllerPublishVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secrets_.Clear();
  volume_context_.Clear();
  volume_id_.ClearToEmpty();
  node_id_.ClearToEmpty();
  if (GetArena() == nullptr && volume_capability_ != nullptr) {
    delete volume_capability_;
  }
  volume_capability_ = nullptr;
  readonly_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerPublishVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ControllerPublishVolumeRequest.volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ControllerPublishVolumeRequest.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.VolumeCapability volume_capability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume_capability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool readonly = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          readonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&secrets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> volume_context = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&volume_context_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerPublishVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ControllerPublishVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_id().data(), static_cast<int>(this->_internal_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ControllerPublishVolumeRequest.volume_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_volume_id(), target);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ControllerPublishVolumeRequest.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  // .csi.v1.VolumeCapability volume_capability = 3;
  if (this->has_volume_capability()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::volume_capability(this), target, stream);
  }

  // bool readonly = 4;
  if (this->readonly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_readonly(), target);
  }

  // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
  if (!this->_internal_secrets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ControllerPublishVolumeRequest.SecretsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ControllerPublishVolumeRequest.SecretsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_secrets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_secrets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ControllerPublishVolumeRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it) {
        target = ControllerPublishVolumeRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> volume_context = 6;
  if (!this->_internal_volume_context().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ControllerPublishVolumeRequest.VolumeContextEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ControllerPublishVolumeRequest.VolumeContextEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_volume_context().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_volume_context().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_volume_context().begin();
          it != this->_internal_volume_context().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_volume_context().begin();
          it != this->_internal_volume_context().end(); ++it) {
        target = ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ControllerPublishVolumeRequest)
  return target;
}

size_t ControllerPublishVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ControllerPublishVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secrets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_secrets().begin();
      it != this->_internal_secrets().end(); ++it) {
    total_size += ControllerPublishVolumeRequest_SecretsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> volume_context = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volume_context_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_volume_context().begin();
      it != this->_internal_volume_context().end(); ++it) {
    total_size += ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_id());
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // .csi.v1.VolumeCapability volume_capability = 3;
  if (this->has_volume_capability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_capability_);
  }

  // bool readonly = 4;
  if (this->readonly() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerPublishVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ControllerPublishVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerPublishVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerPublishVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ControllerPublishVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ControllerPublishVolumeRequest)
    MergeFrom(*source);
  }
}

void ControllerPublishVolumeRequest::MergeFrom(const ControllerPublishVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ControllerPublishVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secrets_.MergeFrom(from.secrets_);
  volume_context_.MergeFrom(from.volume_context_);
  if (from.volume_id().size() > 0) {
    _internal_set_volume_id(from._internal_volume_id());
  }
  if (from.node_id().size() > 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.has_volume_capability()) {
    _internal_mutable_volume_capability()->::csi::v1::VolumeCapability::MergeFrom(from._internal_volume_capability());
  }
  if (from.readonly() != 0) {
    _internal_set_readonly(from._internal_readonly());
  }
}

void ControllerPublishVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ControllerPublishVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerPublishVolumeRequest::CopyFrom(const ControllerPublishVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ControllerPublishVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerPublishVolumeRequest::IsInitialized() const {
  return true;
}

void ControllerPublishVolumeRequest::InternalSwap(ControllerPublishVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  secrets_.Swap(&other->secrets_);
  volume_context_.Swap(&other->volume_context_);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerPublishVolumeRequest, readonly_)
      + sizeof(ControllerPublishVolumeRequest::readonly_)
      - PROTOBUF_FIELD_OFFSET(ControllerPublishVolumeRequest, volume_capability_)>(
          reinterpret_cast<char*>(&volume_capability_),
          reinterpret_cast<char*>(&other->volume_capability_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerPublishVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse::ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse() {}
ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse::ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse::MergeFrom(const ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ControllerPublishVolumeResponse::_Internal {
 public:
};

ControllerPublishVolumeResponse::ControllerPublishVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  publish_context_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ControllerPublishVolumeResponse)
}
ControllerPublishVolumeResponse::ControllerPublishVolumeResponse(const ControllerPublishVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publish_context_.MergeFrom(from.publish_context_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.ControllerPublishVolumeResponse)
}

void ControllerPublishVolumeResponse::SharedCtor() {
}

ControllerPublishVolumeResponse::~ControllerPublishVolumeResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.ControllerPublishVolumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerPublishVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControllerPublishVolumeResponse::ArenaDtor(void* object) {
  ControllerPublishVolumeResponse* _this = reinterpret_cast< ControllerPublishVolumeResponse* >(object);
  (void)_this;
}
void ControllerPublishVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerPublishVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerPublishVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ControllerPublishVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publish_context_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerPublishVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> publish_context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&publish_context_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerPublishVolumeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ControllerPublishVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> publish_context = 1;
  if (!this->_internal_publish_context().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ControllerPublishVolumeResponse.PublishContextEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ControllerPublishVolumeResponse.PublishContextEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_publish_context().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_publish_context().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_publish_context().begin();
          it != this->_internal_publish_context().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_publish_context().begin();
          it != this->_internal_publish_context().end(); ++it) {
        target = ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ControllerPublishVolumeResponse)
  return target;
}

size_t ControllerPublishVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ControllerPublishVolumeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> publish_context = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_publish_context_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_publish_context().begin();
      it != this->_internal_publish_context().end(); ++it) {
    total_size += ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerPublishVolumeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ControllerPublishVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerPublishVolumeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerPublishVolumeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ControllerPublishVolumeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ControllerPublishVolumeResponse)
    MergeFrom(*source);
  }
}

void ControllerPublishVolumeResponse::MergeFrom(const ControllerPublishVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ControllerPublishVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publish_context_.MergeFrom(from.publish_context_);
}

void ControllerPublishVolumeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ControllerPublishVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerPublishVolumeResponse::CopyFrom(const ControllerPublishVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ControllerPublishVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerPublishVolumeResponse::IsInitialized() const {
  return true;
}

void ControllerPublishVolumeResponse::InternalSwap(ControllerPublishVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  publish_context_.Swap(&other->publish_context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerPublishVolumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse::ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse() {}
ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse::ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse::MergeFrom(const ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ControllerUnpublishVolumeRequest::_Internal {
 public:
};

ControllerUnpublishVolumeRequest::ControllerUnpublishVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  secrets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ControllerUnpublishVolumeRequest)
}
ControllerUnpublishVolumeRequest::ControllerUnpublishVolumeRequest(const ControllerUnpublishVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secrets_.MergeFrom(from.secrets_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_id().empty()) {
    volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_id(), 
      GetArena());
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.ControllerUnpublishVolumeRequest)
}

void ControllerUnpublishVolumeRequest::SharedCtor() {
volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ControllerUnpublishVolumeRequest::~ControllerUnpublishVolumeRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.ControllerUnpublishVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerUnpublishVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControllerUnpublishVolumeRequest::ArenaDtor(void* object) {
  ControllerUnpublishVolumeRequest* _this = reinterpret_cast< ControllerUnpublishVolumeRequest* >(object);
  (void)_this;
}
void ControllerUnpublishVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerUnpublishVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerUnpublishVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ControllerUnpublishVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secrets_.Clear();
  volume_id_.ClearToEmpty();
  node_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerUnpublishVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ControllerUnpublishVolumeRequest.volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ControllerUnpublishVolumeRequest.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> secrets = 3 [(.csi.v1.csi_secret) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&secrets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerUnpublishVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ControllerUnpublishVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_id().data(), static_cast<int>(this->_internal_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ControllerUnpublishVolumeRequest.volume_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_volume_id(), target);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ControllerUnpublishVolumeRequest.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  // map<string, string> secrets = 3 [(.csi.v1.csi_secret) = true];
  if (!this->_internal_secrets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ControllerUnpublishVolumeRequest.SecretsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ControllerUnpublishVolumeRequest.SecretsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_secrets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_secrets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it) {
        target = ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ControllerUnpublishVolumeRequest)
  return target;
}

size_t ControllerUnpublishVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ControllerUnpublishVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> secrets = 3 [(.csi.v1.csi_secret) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secrets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_secrets().begin();
      it != this->_internal_secrets().end(); ++it) {
    total_size += ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_id());
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerUnpublishVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ControllerUnpublishVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerUnpublishVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerUnpublishVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ControllerUnpublishVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ControllerUnpublishVolumeRequest)
    MergeFrom(*source);
  }
}

void ControllerUnpublishVolumeRequest::MergeFrom(const ControllerUnpublishVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ControllerUnpublishVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secrets_.MergeFrom(from.secrets_);
  if (from.volume_id().size() > 0) {
    _internal_set_volume_id(from._internal_volume_id());
  }
  if (from.node_id().size() > 0) {
    _internal_set_node_id(from._internal_node_id());
  }
}

void ControllerUnpublishVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ControllerUnpublishVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerUnpublishVolumeRequest::CopyFrom(const ControllerUnpublishVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ControllerUnpublishVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerUnpublishVolumeRequest::IsInitialized() const {
  return true;
}

void ControllerUnpublishVolumeRequest::InternalSwap(ControllerUnpublishVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  secrets_.Swap(&other->secrets_);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerUnpublishVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControllerUnpublishVolumeResponse::_Internal {
 public:
};

ControllerUnpublishVolumeResponse::ControllerUnpublishVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ControllerUnpublishVolumeResponse)
}
ControllerUnpublishVolumeResponse::ControllerUnpublishVolumeResponse(const ControllerUnpublishVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.ControllerUnpublishVolumeResponse)
}

void ControllerUnpublishVolumeResponse::SharedCtor() {
}

ControllerUnpublishVolumeResponse::~ControllerUnpublishVolumeResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.ControllerUnpublishVolumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerUnpublishVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControllerUnpublishVolumeResponse::ArenaDtor(void* object) {
  ControllerUnpublishVolumeResponse* _this = reinterpret_cast< ControllerUnpublishVolumeResponse* >(object);
  (void)_this;
}
void ControllerUnpublishVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerUnpublishVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerUnpublishVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ControllerUnpublishVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerUnpublishVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerUnpublishVolumeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ControllerUnpublishVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ControllerUnpublishVolumeResponse)
  return target;
}

size_t ControllerUnpublishVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ControllerUnpublishVolumeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerUnpublishVolumeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ControllerUnpublishVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerUnpublishVolumeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerUnpublishVolumeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ControllerUnpublishVolumeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ControllerUnpublishVolumeResponse)
    MergeFrom(*source);
  }
}

void ControllerUnpublishVolumeResponse::MergeFrom(const ControllerUnpublishVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ControllerUnpublishVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ControllerUnpublishVolumeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ControllerUnpublishVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerUnpublishVolumeResponse::CopyFrom(const ControllerUnpublishVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ControllerUnpublishVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerUnpublishVolumeResponse::IsInitialized() const {
  return true;
}

void ControllerUnpublishVolumeResponse::InternalSwap(ControllerUnpublishVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerUnpublishVolumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse::ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse() {}
ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse::ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse::MergeFrom(const ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse::ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse() {}
ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse::ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse::MergeFrom(const ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse::ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse() {}
ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse::ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse::MergeFrom(const ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ValidateVolumeCapabilitiesRequest::_Internal {
 public:
};

ValidateVolumeCapabilitiesRequest::ValidateVolumeCapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  volume_context_(arena),
  volume_capabilities_(arena),
  parameters_(arena),
  secrets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ValidateVolumeCapabilitiesRequest)
}
ValidateVolumeCapabilitiesRequest::ValidateVolumeCapabilitiesRequest(const ValidateVolumeCapabilitiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      volume_capabilities_(from.volume_capabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  volume_context_.MergeFrom(from.volume_context_);
  parameters_.MergeFrom(from.parameters_);
  secrets_.MergeFrom(from.secrets_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_id().empty()) {
    volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.ValidateVolumeCapabilitiesRequest)
}

void ValidateVolumeCapabilitiesRequest::SharedCtor() {
volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ValidateVolumeCapabilitiesRequest::~ValidateVolumeCapabilitiesRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.ValidateVolumeCapabilitiesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateVolumeCapabilitiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ValidateVolumeCapabilitiesRequest::ArenaDtor(void* object) {
  ValidateVolumeCapabilitiesRequest* _this = reinterpret_cast< ValidateVolumeCapabilitiesRequest* >(object);
  (void)_this;
}
void ValidateVolumeCapabilitiesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateVolumeCapabilitiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateVolumeCapabilitiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ValidateVolumeCapabilitiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_context_.Clear();
  volume_capabilities_.Clear();
  parameters_.Clear();
  secrets_.Clear();
  volume_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateVolumeCapabilitiesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ValidateVolumeCapabilitiesRequest.volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> volume_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&volume_context_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .csi.v1.VolumeCapability volume_capabilities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_volume_capabilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> parameters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&secrets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateVolumeCapabilitiesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ValidateVolumeCapabilitiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_id().data(), static_cast<int>(this->_internal_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ValidateVolumeCapabilitiesRequest.volume_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_volume_id(), target);
  }

  // map<string, string> volume_context = 2;
  if (!this->_internal_volume_context().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ValidateVolumeCapabilitiesRequest.VolumeContextEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ValidateVolumeCapabilitiesRequest.VolumeContextEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_volume_context().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_volume_context().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_volume_context().begin();
          it != this->_internal_volume_context().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_volume_context().begin();
          it != this->_internal_volume_context().end(); ++it) {
        target = ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .csi.v1.VolumeCapability volume_capabilities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_volume_capabilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_volume_capabilities(i), target, stream);
  }

  // map<string, string> parameters = 4;
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ValidateVolumeCapabilitiesRequest.ParametersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ValidateVolumeCapabilitiesRequest.ParametersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
  if (!this->_internal_secrets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ValidateVolumeCapabilitiesRequest.SecretsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ValidateVolumeCapabilitiesRequest.SecretsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_secrets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_secrets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it) {
        target = ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ValidateVolumeCapabilitiesRequest)
  return target;
}

size_t ValidateVolumeCapabilitiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ValidateVolumeCapabilitiesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> volume_context = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volume_context_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_volume_context().begin();
      it != this->_internal_volume_context().end(); ++it) {
    total_size += ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .csi.v1.VolumeCapability volume_capabilities = 3;
  total_size += 1UL * this->_internal_volume_capabilities_size();
  for (const auto& msg : this->volume_capabilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> parameters = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secrets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_secrets().begin();
      it != this->_internal_secrets().end(); ++it) {
    total_size += ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateVolumeCapabilitiesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ValidateVolumeCapabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateVolumeCapabilitiesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateVolumeCapabilitiesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ValidateVolumeCapabilitiesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ValidateVolumeCapabilitiesRequest)
    MergeFrom(*source);
  }
}

void ValidateVolumeCapabilitiesRequest::MergeFrom(const ValidateVolumeCapabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ValidateVolumeCapabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volume_context_.MergeFrom(from.volume_context_);
  volume_capabilities_.MergeFrom(from.volume_capabilities_);
  parameters_.MergeFrom(from.parameters_);
  secrets_.MergeFrom(from.secrets_);
  if (from.volume_id().size() > 0) {
    _internal_set_volume_id(from._internal_volume_id());
  }
}

void ValidateVolumeCapabilitiesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ValidateVolumeCapabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateVolumeCapabilitiesRequest::CopyFrom(const ValidateVolumeCapabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ValidateVolumeCapabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateVolumeCapabilitiesRequest::IsInitialized() const {
  return true;
}

void ValidateVolumeCapabilitiesRequest::InternalSwap(ValidateVolumeCapabilitiesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  volume_context_.Swap(&other->volume_context_);
  volume_capabilities_.InternalSwap(&other->volume_capabilities_);
  parameters_.Swap(&other->parameters_);
  secrets_.Swap(&other->secrets_);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateVolumeCapabilitiesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse::ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse() {}
ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse::ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse::MergeFrom(const ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse::ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse() {}
ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse::ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse::MergeFrom(const ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ValidateVolumeCapabilitiesResponse_Confirmed::_Internal {
 public:
};

ValidateVolumeCapabilitiesResponse_Confirmed::ValidateVolumeCapabilitiesResponse_Confirmed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  volume_context_(arena),
  volume_capabilities_(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed)
}
ValidateVolumeCapabilitiesResponse_Confirmed::ValidateVolumeCapabilitiesResponse_Confirmed(const ValidateVolumeCapabilitiesResponse_Confirmed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      volume_capabilities_(from.volume_capabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  volume_context_.MergeFrom(from.volume_context_);
  parameters_.MergeFrom(from.parameters_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed)
}

void ValidateVolumeCapabilitiesResponse_Confirmed::SharedCtor() {
}

ValidateVolumeCapabilitiesResponse_Confirmed::~ValidateVolumeCapabilitiesResponse_Confirmed() {
  // @@protoc_insertion_point(destructor:csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateVolumeCapabilitiesResponse_Confirmed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValidateVolumeCapabilitiesResponse_Confirmed::ArenaDtor(void* object) {
  ValidateVolumeCapabilitiesResponse_Confirmed* _this = reinterpret_cast< ValidateVolumeCapabilitiesResponse_Confirmed* >(object);
  (void)_this;
}
void ValidateVolumeCapabilitiesResponse_Confirmed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateVolumeCapabilitiesResponse_Confirmed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateVolumeCapabilitiesResponse_Confirmed::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_context_.Clear();
  volume_capabilities_.Clear();
  parameters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateVolumeCapabilitiesResponse_Confirmed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> volume_context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&volume_context_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .csi.v1.VolumeCapability volume_capabilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_volume_capabilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateVolumeCapabilitiesResponse_Confirmed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> volume_context = 1;
  if (!this->_internal_volume_context().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed.VolumeContextEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed.VolumeContextEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_volume_context().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_volume_context().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_volume_context().begin();
          it != this->_internal_volume_context().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_volume_context().begin();
          it != this->_internal_volume_context().end(); ++it) {
        target = ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .csi.v1.VolumeCapability volume_capabilities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_volume_capabilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_volume_capabilities(i), target, stream);
  }

  // map<string, string> parameters = 3;
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed.ParametersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed.ParametersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed)
  return target;
}

size_t ValidateVolumeCapabilitiesResponse_Confirmed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> volume_context = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volume_context_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_volume_context().begin();
      it != this->_internal_volume_context().end(); ++it) {
    total_size += ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .csi.v1.VolumeCapability volume_capabilities = 2;
  total_size += 1UL * this->_internal_volume_capabilities_size();
  for (const auto& msg : this->volume_capabilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> parameters = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateVolumeCapabilitiesResponse_Confirmed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateVolumeCapabilitiesResponse_Confirmed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateVolumeCapabilitiesResponse_Confirmed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed)
    MergeFrom(*source);
  }
}

void ValidateVolumeCapabilitiesResponse_Confirmed::MergeFrom(const ValidateVolumeCapabilitiesResponse_Confirmed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volume_context_.MergeFrom(from.volume_context_);
  volume_capabilities_.MergeFrom(from.volume_capabilities_);
  parameters_.MergeFrom(from.parameters_);
}

void ValidateVolumeCapabilitiesResponse_Confirmed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateVolumeCapabilitiesResponse_Confirmed::CopyFrom(const ValidateVolumeCapabilitiesResponse_Confirmed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateVolumeCapabilitiesResponse_Confirmed::IsInitialized() const {
  return true;
}

void ValidateVolumeCapabilitiesResponse_Confirmed::InternalSwap(ValidateVolumeCapabilitiesResponse_Confirmed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  volume_context_.Swap(&other->volume_context_);
  volume_capabilities_.InternalSwap(&other->volume_capabilities_);
  parameters_.Swap(&other->parameters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateVolumeCapabilitiesResponse_Confirmed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidateVolumeCapabilitiesResponse::_Internal {
 public:
  static const ::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed& confirmed(const ValidateVolumeCapabilitiesResponse* msg);
};

const ::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed&
ValidateVolumeCapabilitiesResponse::_Internal::confirmed(const ValidateVolumeCapabilitiesResponse* msg) {
  return *msg->confirmed_;
}
ValidateVolumeCapabilitiesResponse::ValidateVolumeCapabilitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ValidateVolumeCapabilitiesResponse)
}
ValidateVolumeCapabilitiesResponse::ValidateVolumeCapabilitiesResponse(const ValidateVolumeCapabilitiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  if (from._internal_has_confirmed()) {
    confirmed_ = new ::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed(*from.confirmed_);
  } else {
    confirmed_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.ValidateVolumeCapabilitiesResponse)
}

void ValidateVolumeCapabilitiesResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
confirmed_ = nullptr;
}

ValidateVolumeCapabilitiesResponse::~ValidateVolumeCapabilitiesResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.ValidateVolumeCapabilitiesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateVolumeCapabilitiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete confirmed_;
}

void ValidateVolumeCapabilitiesResponse::ArenaDtor(void* object) {
  ValidateVolumeCapabilitiesResponse* _this = reinterpret_cast< ValidateVolumeCapabilitiesResponse* >(object);
  (void)_this;
}
void ValidateVolumeCapabilitiesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateVolumeCapabilitiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateVolumeCapabilitiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ValidateVolumeCapabilitiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArena() == nullptr && confirmed_ != nullptr) {
    delete confirmed_;
  }
  confirmed_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateVolumeCapabilitiesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed confirmed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirmed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ValidateVolumeCapabilitiesResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateVolumeCapabilitiesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ValidateVolumeCapabilitiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed confirmed = 1;
  if (this->has_confirmed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::confirmed(this), target, stream);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ValidateVolumeCapabilitiesResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ValidateVolumeCapabilitiesResponse)
  return target;
}

size_t ValidateVolumeCapabilitiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ValidateVolumeCapabilitiesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed confirmed = 1;
  if (this->has_confirmed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *confirmed_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateVolumeCapabilitiesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ValidateVolumeCapabilitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateVolumeCapabilitiesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateVolumeCapabilitiesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ValidateVolumeCapabilitiesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ValidateVolumeCapabilitiesResponse)
    MergeFrom(*source);
  }
}

void ValidateVolumeCapabilitiesResponse::MergeFrom(const ValidateVolumeCapabilitiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ValidateVolumeCapabilitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_confirmed()) {
    _internal_mutable_confirmed()->::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed::MergeFrom(from._internal_confirmed());
  }
}

void ValidateVolumeCapabilitiesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ValidateVolumeCapabilitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateVolumeCapabilitiesResponse::CopyFrom(const ValidateVolumeCapabilitiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ValidateVolumeCapabilitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateVolumeCapabilitiesResponse::IsInitialized() const {
  return true;
}

void ValidateVolumeCapabilitiesResponse::InternalSwap(ValidateVolumeCapabilitiesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(confirmed_, other->confirmed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateVolumeCapabilitiesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListVolumesRequest::_Internal {
 public:
};

ListVolumesRequest::ListVolumesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ListVolumesRequest)
}
ListVolumesRequest::ListVolumesRequest(const ListVolumesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  starting_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_starting_token().empty()) {
    starting_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_starting_token(), 
      GetArena());
  }
  max_entries_ = from.max_entries_;
  // @@protoc_insertion_point(copy_constructor:csi.v1.ListVolumesRequest)
}

void ListVolumesRequest::SharedCtor() {
starting_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
max_entries_ = 0;
}

ListVolumesRequest::~ListVolumesRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.ListVolumesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListVolumesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  starting_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVolumesRequest::ArenaDtor(void* object) {
  ListVolumesRequest* _this = reinterpret_cast< ListVolumesRequest* >(object);
  (void)_this;
}
void ListVolumesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVolumesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListVolumesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ListVolumesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  starting_token_.ClearToEmpty();
  max_entries_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVolumesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string starting_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_starting_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ListVolumesRequest.starting_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVolumesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ListVolumesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_entries = 1;
  if (this->max_entries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_entries(), target);
  }

  // string starting_token = 2;
  if (this->starting_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_starting_token().data(), static_cast<int>(this->_internal_starting_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ListVolumesRequest.starting_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_starting_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ListVolumesRequest)
  return target;
}

size_t ListVolumesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ListVolumesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string starting_token = 2;
  if (this->starting_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_starting_token());
  }

  // int32 max_entries = 1;
  if (this->max_entries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_entries());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVolumesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ListVolumesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVolumesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVolumesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ListVolumesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ListVolumesRequest)
    MergeFrom(*source);
  }
}

void ListVolumesRequest::MergeFrom(const ListVolumesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ListVolumesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.starting_token().size() > 0) {
    _internal_set_starting_token(from._internal_starting_token());
  }
  if (from.max_entries() != 0) {
    _internal_set_max_entries(from._internal_max_entries());
  }
}

void ListVolumesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ListVolumesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVolumesRequest::CopyFrom(const ListVolumesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ListVolumesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVolumesRequest::IsInitialized() const {
  return true;
}

void ListVolumesRequest::InternalSwap(ListVolumesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  starting_token_.Swap(&other->starting_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(max_entries_, other->max_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVolumesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListVolumesResponse_VolumeStatus::_Internal {
 public:
  static const ::csi::v1::VolumeCondition& volume_condition(const ListVolumesResponse_VolumeStatus* msg);
};

const ::csi::v1::VolumeCondition&
ListVolumesResponse_VolumeStatus::_Internal::volume_condition(const ListVolumesResponse_VolumeStatus* msg) {
  return *msg->volume_condition_;
}
ListVolumesResponse_VolumeStatus::ListVolumesResponse_VolumeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  published_node_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ListVolumesResponse.VolumeStatus)
}
ListVolumesResponse_VolumeStatus::ListVolumesResponse_VolumeStatus(const ListVolumesResponse_VolumeStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      published_node_ids_(from.published_node_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_volume_condition()) {
    volume_condition_ = new ::csi::v1::VolumeCondition(*from.volume_condition_);
  } else {
    volume_condition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.ListVolumesResponse.VolumeStatus)
}

void ListVolumesResponse_VolumeStatus::SharedCtor() {
volume_condition_ = nullptr;
}

ListVolumesResponse_VolumeStatus::~ListVolumesResponse_VolumeStatus() {
  // @@protoc_insertion_point(destructor:csi.v1.ListVolumesResponse.VolumeStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListVolumesResponse_VolumeStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete volume_condition_;
}

void ListVolumesResponse_VolumeStatus::ArenaDtor(void* object) {
  ListVolumesResponse_VolumeStatus* _this = reinterpret_cast< ListVolumesResponse_VolumeStatus* >(object);
  (void)_this;
}
void ListVolumesResponse_VolumeStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVolumesResponse_VolumeStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListVolumesResponse_VolumeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ListVolumesResponse.VolumeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  published_node_ids_.Clear();
  if (GetArena() == nullptr && volume_condition_ != nullptr) {
    delete volume_condition_;
  }
  volume_condition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVolumesResponse_VolumeStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string published_node_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_published_node_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ListVolumesResponse.VolumeStatus.published_node_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .csi.v1.VolumeCondition volume_condition = 2 [(.csi.v1.alpha_field) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVolumesResponse_VolumeStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ListVolumesResponse.VolumeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string published_node_ids = 1;
  for (int i = 0, n = this->_internal_published_node_ids_size(); i < n; i++) {
    const auto& s = this->_internal_published_node_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ListVolumesResponse.VolumeStatus.published_node_ids");
    target = stream->WriteString(1, s, target);
  }

  // .csi.v1.VolumeCondition volume_condition = 2 [(.csi.v1.alpha_field) = true];
  if (this->has_volume_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::volume_condition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ListVolumesResponse.VolumeStatus)
  return target;
}

size_t ListVolumesResponse_VolumeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ListVolumesResponse.VolumeStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string published_node_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(published_node_ids_.size());
  for (int i = 0, n = published_node_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      published_node_ids_.Get(i));
  }

  // .csi.v1.VolumeCondition volume_condition = 2 [(.csi.v1.alpha_field) = true];
  if (this->has_volume_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_condition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVolumesResponse_VolumeStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ListVolumesResponse.VolumeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVolumesResponse_VolumeStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVolumesResponse_VolumeStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ListVolumesResponse.VolumeStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ListVolumesResponse.VolumeStatus)
    MergeFrom(*source);
  }
}

void ListVolumesResponse_VolumeStatus::MergeFrom(const ListVolumesResponse_VolumeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ListVolumesResponse.VolumeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  published_node_ids_.MergeFrom(from.published_node_ids_);
  if (from.has_volume_condition()) {
    _internal_mutable_volume_condition()->::csi::v1::VolumeCondition::MergeFrom(from._internal_volume_condition());
  }
}

void ListVolumesResponse_VolumeStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ListVolumesResponse.VolumeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVolumesResponse_VolumeStatus::CopyFrom(const ListVolumesResponse_VolumeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ListVolumesResponse.VolumeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVolumesResponse_VolumeStatus::IsInitialized() const {
  return true;
}

void ListVolumesResponse_VolumeStatus::InternalSwap(ListVolumesResponse_VolumeStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  published_node_ids_.InternalSwap(&other->published_node_ids_);
  swap(volume_condition_, other->volume_condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVolumesResponse_VolumeStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListVolumesResponse_Entry::_Internal {
 public:
  static const ::csi::v1::Volume& volume(const ListVolumesResponse_Entry* msg);
  static const ::csi::v1::ListVolumesResponse_VolumeStatus& status(const ListVolumesResponse_Entry* msg);
};

const ::csi::v1::Volume&
ListVolumesResponse_Entry::_Internal::volume(const ListVolumesResponse_Entry* msg) {
  return *msg->volume_;
}
const ::csi::v1::ListVolumesResponse_VolumeStatus&
ListVolumesResponse_Entry::_Internal::status(const ListVolumesResponse_Entry* msg) {
  return *msg->status_;
}
ListVolumesResponse_Entry::ListVolumesResponse_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ListVolumesResponse.Entry)
}
ListVolumesResponse_Entry::ListVolumesResponse_Entry(const ListVolumesResponse_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_volume()) {
    volume_ = new ::csi::v1::Volume(*from.volume_);
  } else {
    volume_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::csi::v1::ListVolumesResponse_VolumeStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.ListVolumesResponse.Entry)
}

void ListVolumesResponse_Entry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&volume_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(status_));
}

ListVolumesResponse_Entry::~ListVolumesResponse_Entry() {
  // @@protoc_insertion_point(destructor:csi.v1.ListVolumesResponse.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListVolumesResponse_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete volume_;
  if (this != internal_default_instance()) delete status_;
}

void ListVolumesResponse_Entry::ArenaDtor(void* object) {
  ListVolumesResponse_Entry* _this = reinterpret_cast< ListVolumesResponse_Entry* >(object);
  (void)_this;
}
void ListVolumesResponse_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVolumesResponse_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListVolumesResponse_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ListVolumesResponse.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVolumesResponse_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.Volume volume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.ListVolumesResponse.VolumeStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVolumesResponse_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ListVolumesResponse.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.Volume volume = 1;
  if (this->has_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::volume(this), target, stream);
  }

  // .csi.v1.ListVolumesResponse.VolumeStatus status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ListVolumesResponse.Entry)
  return target;
}

size_t ListVolumesResponse_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ListVolumesResponse.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .csi.v1.Volume volume = 1;
  if (this->has_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_);
  }

  // .csi.v1.ListVolumesResponse.VolumeStatus status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVolumesResponse_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ListVolumesResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVolumesResponse_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVolumesResponse_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ListVolumesResponse.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ListVolumesResponse.Entry)
    MergeFrom(*source);
  }
}

void ListVolumesResponse_Entry::MergeFrom(const ListVolumesResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ListVolumesResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_volume()) {
    _internal_mutable_volume()->::csi::v1::Volume::MergeFrom(from._internal_volume());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::csi::v1::ListVolumesResponse_VolumeStatus::MergeFrom(from._internal_status());
  }
}

void ListVolumesResponse_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ListVolumesResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVolumesResponse_Entry::CopyFrom(const ListVolumesResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ListVolumesResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVolumesResponse_Entry::IsInitialized() const {
  return true;
}

void ListVolumesResponse_Entry::InternalSwap(ListVolumesResponse_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListVolumesResponse_Entry, status_)
      + sizeof(ListVolumesResponse_Entry::status_)
      - PROTOBUF_FIELD_OFFSET(ListVolumesResponse_Entry, volume_)>(
          reinterpret_cast<char*>(&volume_),
          reinterpret_cast<char*>(&other->volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVolumesResponse_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListVolumesResponse::_Internal {
 public:
};

ListVolumesResponse::ListVolumesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ListVolumesResponse)
}
ListVolumesResponse::ListVolumesResponse(const ListVolumesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_token().empty()) {
    next_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.ListVolumesResponse)
}

void ListVolumesResponse::SharedCtor() {
next_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListVolumesResponse::~ListVolumesResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.ListVolumesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListVolumesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  next_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVolumesResponse::ArenaDtor(void* object) {
  ListVolumesResponse* _this = reinterpret_cast< ListVolumesResponse* >(object);
  (void)_this;
}
void ListVolumesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVolumesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListVolumesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ListVolumesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  next_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVolumesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .csi.v1.ListVolumesResponse.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_next_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ListVolumesResponse.next_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVolumesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ListVolumesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .csi.v1.ListVolumesResponse.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  // string next_token = 2;
  if (this->next_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_token().data(), static_cast<int>(this->_internal_next_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ListVolumesResponse.next_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ListVolumesResponse)
  return target;
}

size_t ListVolumesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ListVolumesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .csi.v1.ListVolumesResponse.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_token = 2;
  if (this->next_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVolumesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ListVolumesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVolumesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVolumesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ListVolumesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ListVolumesResponse)
    MergeFrom(*source);
  }
}

void ListVolumesResponse::MergeFrom(const ListVolumesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ListVolumesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.next_token().size() > 0) {
    _internal_set_next_token(from._internal_next_token());
  }
}

void ListVolumesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ListVolumesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVolumesResponse::CopyFrom(const ListVolumesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ListVolumesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVolumesResponse::IsInitialized() const {
  return true;
}

void ListVolumesResponse::InternalSwap(ListVolumesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  next_token_.Swap(&other->next_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVolumesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControllerGetVolumeRequest::_Internal {
 public:
};

ControllerGetVolumeRequest::ControllerGetVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ControllerGetVolumeRequest)
}
ControllerGetVolumeRequest::ControllerGetVolumeRequest(const ControllerGetVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_id().empty()) {
    volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.ControllerGetVolumeRequest)
}

void ControllerGetVolumeRequest::SharedCtor() {
volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ControllerGetVolumeRequest::~ControllerGetVolumeRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.ControllerGetVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerGetVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControllerGetVolumeRequest::ArenaDtor(void* object) {
  ControllerGetVolumeRequest* _this = reinterpret_cast< ControllerGetVolumeRequest* >(object);
  (void)_this;
}
void ControllerGetVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerGetVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerGetVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ControllerGetVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerGetVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ControllerGetVolumeRequest.volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerGetVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ControllerGetVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_id().data(), static_cast<int>(this->_internal_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ControllerGetVolumeRequest.volume_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_volume_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ControllerGetVolumeRequest)
  return target;
}

size_t ControllerGetVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ControllerGetVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerGetVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ControllerGetVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerGetVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerGetVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ControllerGetVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ControllerGetVolumeRequest)
    MergeFrom(*source);
  }
}

void ControllerGetVolumeRequest::MergeFrom(const ControllerGetVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ControllerGetVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.volume_id().size() > 0) {
    _internal_set_volume_id(from._internal_volume_id());
  }
}

void ControllerGetVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ControllerGetVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerGetVolumeRequest::CopyFrom(const ControllerGetVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ControllerGetVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerGetVolumeRequest::IsInitialized() const {
  return true;
}

void ControllerGetVolumeRequest::InternalSwap(ControllerGetVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerGetVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControllerGetVolumeResponse_VolumeStatus::_Internal {
 public:
  static const ::csi::v1::VolumeCondition& volume_condition(const ControllerGetVolumeResponse_VolumeStatus* msg);
};

const ::csi::v1::VolumeCondition&
ControllerGetVolumeResponse_VolumeStatus::_Internal::volume_condition(const ControllerGetVolumeResponse_VolumeStatus* msg) {
  return *msg->volume_condition_;
}
ControllerGetVolumeResponse_VolumeStatus::ControllerGetVolumeResponse_VolumeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  published_node_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ControllerGetVolumeResponse.VolumeStatus)
}
ControllerGetVolumeResponse_VolumeStatus::ControllerGetVolumeResponse_VolumeStatus(const ControllerGetVolumeResponse_VolumeStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      published_node_ids_(from.published_node_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_volume_condition()) {
    volume_condition_ = new ::csi::v1::VolumeCondition(*from.volume_condition_);
  } else {
    volume_condition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.ControllerGetVolumeResponse.VolumeStatus)
}

void ControllerGetVolumeResponse_VolumeStatus::SharedCtor() {
volume_condition_ = nullptr;
}

ControllerGetVolumeResponse_VolumeStatus::~ControllerGetVolumeResponse_VolumeStatus() {
  // @@protoc_insertion_point(destructor:csi.v1.ControllerGetVolumeResponse.VolumeStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerGetVolumeResponse_VolumeStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete volume_condition_;
}

void ControllerGetVolumeResponse_VolumeStatus::ArenaDtor(void* object) {
  ControllerGetVolumeResponse_VolumeStatus* _this = reinterpret_cast< ControllerGetVolumeResponse_VolumeStatus* >(object);
  (void)_this;
}
void ControllerGetVolumeResponse_VolumeStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerGetVolumeResponse_VolumeStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerGetVolumeResponse_VolumeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ControllerGetVolumeResponse.VolumeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  published_node_ids_.Clear();
  if (GetArena() == nullptr && volume_condition_ != nullptr) {
    delete volume_condition_;
  }
  volume_condition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerGetVolumeResponse_VolumeStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string published_node_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_published_node_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ControllerGetVolumeResponse.VolumeStatus.published_node_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .csi.v1.VolumeCondition volume_condition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerGetVolumeResponse_VolumeStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ControllerGetVolumeResponse.VolumeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string published_node_ids = 1;
  for (int i = 0, n = this->_internal_published_node_ids_size(); i < n; i++) {
    const auto& s = this->_internal_published_node_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ControllerGetVolumeResponse.VolumeStatus.published_node_ids");
    target = stream->WriteString(1, s, target);
  }

  // .csi.v1.VolumeCondition volume_condition = 2;
  if (this->has_volume_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::volume_condition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ControllerGetVolumeResponse.VolumeStatus)
  return target;
}

size_t ControllerGetVolumeResponse_VolumeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ControllerGetVolumeResponse.VolumeStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string published_node_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(published_node_ids_.size());
  for (int i = 0, n = published_node_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      published_node_ids_.Get(i));
  }

  // .csi.v1.VolumeCondition volume_condition = 2;
  if (this->has_volume_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_condition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerGetVolumeResponse_VolumeStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ControllerGetVolumeResponse.VolumeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerGetVolumeResponse_VolumeStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerGetVolumeResponse_VolumeStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ControllerGetVolumeResponse.VolumeStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ControllerGetVolumeResponse.VolumeStatus)
    MergeFrom(*source);
  }
}

void ControllerGetVolumeResponse_VolumeStatus::MergeFrom(const ControllerGetVolumeResponse_VolumeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ControllerGetVolumeResponse.VolumeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  published_node_ids_.MergeFrom(from.published_node_ids_);
  if (from.has_volume_condition()) {
    _internal_mutable_volume_condition()->::csi::v1::VolumeCondition::MergeFrom(from._internal_volume_condition());
  }
}

void ControllerGetVolumeResponse_VolumeStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ControllerGetVolumeResponse.VolumeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerGetVolumeResponse_VolumeStatus::CopyFrom(const ControllerGetVolumeResponse_VolumeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ControllerGetVolumeResponse.VolumeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerGetVolumeResponse_VolumeStatus::IsInitialized() const {
  return true;
}

void ControllerGetVolumeResponse_VolumeStatus::InternalSwap(ControllerGetVolumeResponse_VolumeStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  published_node_ids_.InternalSwap(&other->published_node_ids_);
  swap(volume_condition_, other->volume_condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerGetVolumeResponse_VolumeStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControllerGetVolumeResponse::_Internal {
 public:
  static const ::csi::v1::Volume& volume(const ControllerGetVolumeResponse* msg);
  static const ::csi::v1::ControllerGetVolumeResponse_VolumeStatus& status(const ControllerGetVolumeResponse* msg);
};

const ::csi::v1::Volume&
ControllerGetVolumeResponse::_Internal::volume(const ControllerGetVolumeResponse* msg) {
  return *msg->volume_;
}
const ::csi::v1::ControllerGetVolumeResponse_VolumeStatus&
ControllerGetVolumeResponse::_Internal::status(const ControllerGetVolumeResponse* msg) {
  return *msg->status_;
}
ControllerGetVolumeResponse::ControllerGetVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ControllerGetVolumeResponse)
}
ControllerGetVolumeResponse::ControllerGetVolumeResponse(const ControllerGetVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_volume()) {
    volume_ = new ::csi::v1::Volume(*from.volume_);
  } else {
    volume_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::csi::v1::ControllerGetVolumeResponse_VolumeStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.ControllerGetVolumeResponse)
}

void ControllerGetVolumeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&volume_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(status_));
}

ControllerGetVolumeResponse::~ControllerGetVolumeResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.ControllerGetVolumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerGetVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete volume_;
  if (this != internal_default_instance()) delete status_;
}

void ControllerGetVolumeResponse::ArenaDtor(void* object) {
  ControllerGetVolumeResponse* _this = reinterpret_cast< ControllerGetVolumeResponse* >(object);
  (void)_this;
}
void ControllerGetVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerGetVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerGetVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ControllerGetVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerGetVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.Volume volume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.ControllerGetVolumeResponse.VolumeStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerGetVolumeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ControllerGetVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.Volume volume = 1;
  if (this->has_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::volume(this), target, stream);
  }

  // .csi.v1.ControllerGetVolumeResponse.VolumeStatus status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ControllerGetVolumeResponse)
  return target;
}

size_t ControllerGetVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ControllerGetVolumeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .csi.v1.Volume volume = 1;
  if (this->has_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_);
  }

  // .csi.v1.ControllerGetVolumeResponse.VolumeStatus status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerGetVolumeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ControllerGetVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerGetVolumeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerGetVolumeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ControllerGetVolumeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ControllerGetVolumeResponse)
    MergeFrom(*source);
  }
}

void ControllerGetVolumeResponse::MergeFrom(const ControllerGetVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ControllerGetVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_volume()) {
    _internal_mutable_volume()->::csi::v1::Volume::MergeFrom(from._internal_volume());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::csi::v1::ControllerGetVolumeResponse_VolumeStatus::MergeFrom(from._internal_status());
  }
}

void ControllerGetVolumeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ControllerGetVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerGetVolumeResponse::CopyFrom(const ControllerGetVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ControllerGetVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerGetVolumeResponse::IsInitialized() const {
  return true;
}

void ControllerGetVolumeResponse::InternalSwap(ControllerGetVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerGetVolumeResponse, status_)
      + sizeof(ControllerGetVolumeResponse::status_)
      - PROTOBUF_FIELD_OFFSET(ControllerGetVolumeResponse, volume_)>(
          reinterpret_cast<char*>(&volume_),
          reinterpret_cast<char*>(&other->volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerGetVolumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GetCapacityRequest_ParametersEntry_DoNotUse::GetCapacityRequest_ParametersEntry_DoNotUse() {}
GetCapacityRequest_ParametersEntry_DoNotUse::GetCapacityRequest_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetCapacityRequest_ParametersEntry_DoNotUse::MergeFrom(const GetCapacityRequest_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetCapacityRequest_ParametersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetCapacityRequest_ParametersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class GetCapacityRequest::_Internal {
 public:
  static const ::csi::v1::Topology& accessible_topology(const GetCapacityRequest* msg);
};

const ::csi::v1::Topology&
GetCapacityRequest::_Internal::accessible_topology(const GetCapacityRequest* msg) {
  return *msg->accessible_topology_;
}
GetCapacityRequest::GetCapacityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  volume_capabilities_(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.GetCapacityRequest)
}
GetCapacityRequest::GetCapacityRequest(const GetCapacityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      volume_capabilities_(from.volume_capabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameters_.MergeFrom(from.parameters_);
  if (from._internal_has_accessible_topology()) {
    accessible_topology_ = new ::csi::v1::Topology(*from.accessible_topology_);
  } else {
    accessible_topology_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.GetCapacityRequest)
}

void GetCapacityRequest::SharedCtor() {
accessible_topology_ = nullptr;
}

GetCapacityRequest::~GetCapacityRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.GetCapacityRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCapacityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete accessible_topology_;
}

void GetCapacityRequest::ArenaDtor(void* object) {
  GetCapacityRequest* _this = reinterpret_cast< GetCapacityRequest* >(object);
  (void)_this;
}
void GetCapacityRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCapacityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCapacityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.GetCapacityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_capabilities_.Clear();
  parameters_.Clear();
  if (GetArena() == nullptr && accessible_topology_ != nullptr) {
    delete accessible_topology_;
  }
  accessible_topology_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCapacityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .csi.v1.VolumeCapability volume_capabilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_volume_capabilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .csi.v1.Topology accessible_topology = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_accessible_topology(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCapacityRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.GetCapacityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .csi.v1.VolumeCapability volume_capabilities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_volume_capabilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_volume_capabilities(i), target, stream);
  }

  // map<string, string> parameters = 2;
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.GetCapacityRequest.ParametersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.GetCapacityRequest.ParametersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetCapacityRequest_ParametersEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = GetCapacityRequest_ParametersEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .csi.v1.Topology accessible_topology = 3;
  if (this->has_accessible_topology()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::accessible_topology(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.GetCapacityRequest)
  return target;
}

size_t GetCapacityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.GetCapacityRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .csi.v1.VolumeCapability volume_capabilities = 1;
  total_size += 1UL * this->_internal_volume_capabilities_size();
  for (const auto& msg : this->volume_capabilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> parameters = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += GetCapacityRequest_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .csi.v1.Topology accessible_topology = 3;
  if (this->has_accessible_topology()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accessible_topology_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCapacityRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.GetCapacityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCapacityRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCapacityRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.GetCapacityRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.GetCapacityRequest)
    MergeFrom(*source);
  }
}

void GetCapacityRequest::MergeFrom(const GetCapacityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.GetCapacityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volume_capabilities_.MergeFrom(from.volume_capabilities_);
  parameters_.MergeFrom(from.parameters_);
  if (from.has_accessible_topology()) {
    _internal_mutable_accessible_topology()->::csi::v1::Topology::MergeFrom(from._internal_accessible_topology());
  }
}

void GetCapacityRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.GetCapacityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCapacityRequest::CopyFrom(const GetCapacityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.GetCapacityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCapacityRequest::IsInitialized() const {
  return true;
}

void GetCapacityRequest::InternalSwap(GetCapacityRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  volume_capabilities_.InternalSwap(&other->volume_capabilities_);
  parameters_.Swap(&other->parameters_);
  swap(accessible_topology_, other->accessible_topology_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCapacityRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetCapacityResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int64Value& maximum_volume_size(const GetCapacityResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& minimum_volume_size(const GetCapacityResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Int64Value&
GetCapacityResponse::_Internal::maximum_volume_size(const GetCapacityResponse* msg) {
  return *msg->maximum_volume_size_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
GetCapacityResponse::_Internal::minimum_volume_size(const GetCapacityResponse* msg) {
  return *msg->minimum_volume_size_;
}
void GetCapacityResponse::clear_maximum_volume_size() {
  if (GetArena() == nullptr && maximum_volume_size_ != nullptr) {
    delete maximum_volume_size_;
  }
  maximum_volume_size_ = nullptr;
}
void GetCapacityResponse::clear_minimum_volume_size() {
  if (GetArena() == nullptr && minimum_volume_size_ != nullptr) {
    delete minimum_volume_size_;
  }
  minimum_volume_size_ = nullptr;
}
GetCapacityResponse::GetCapacityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.GetCapacityResponse)
}
GetCapacityResponse::GetCapacityResponse(const GetCapacityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_maximum_volume_size()) {
    maximum_volume_size_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.maximum_volume_size_);
  } else {
    maximum_volume_size_ = nullptr;
  }
  if (from._internal_has_minimum_volume_size()) {
    minimum_volume_size_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.minimum_volume_size_);
  } else {
    minimum_volume_size_ = nullptr;
  }
  available_capacity_ = from.available_capacity_;
  // @@protoc_insertion_point(copy_constructor:csi.v1.GetCapacityResponse)
}

void GetCapacityResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&maximum_volume_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&available_capacity_) -
    reinterpret_cast<char*>(&maximum_volume_size_)) + sizeof(available_capacity_));
}

GetCapacityResponse::~GetCapacityResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.GetCapacityResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCapacityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete maximum_volume_size_;
  if (this != internal_default_instance()) delete minimum_volume_size_;
}

void GetCapacityResponse::ArenaDtor(void* object) {
  GetCapacityResponse* _this = reinterpret_cast< GetCapacityResponse* >(object);
  (void)_this;
}
void GetCapacityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCapacityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCapacityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.GetCapacityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && maximum_volume_size_ != nullptr) {
    delete maximum_volume_size_;
  }
  maximum_volume_size_ = nullptr;
  if (GetArena() == nullptr && minimum_volume_size_ != nullptr) {
    delete minimum_volume_size_;
  }
  minimum_volume_size_ = nullptr;
  available_capacity_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCapacityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 available_capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          available_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value maximum_volume_size = 2 [(.csi.v1.alpha_field) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximum_volume_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value minimum_volume_size = 3 [(.csi.v1.alpha_field) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimum_volume_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCapacityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.GetCapacityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 available_capacity = 1;
  if (this->available_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_available_capacity(), target);
  }

  // .google.protobuf.Int64Value maximum_volume_size = 2 [(.csi.v1.alpha_field) = true];
  if (this->has_maximum_volume_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::maximum_volume_size(this), target, stream);
  }

  // .google.protobuf.Int64Value minimum_volume_size = 3 [(.csi.v1.alpha_field) = true];
  if (this->has_minimum_volume_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::minimum_volume_size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.GetCapacityResponse)
  return target;
}

size_t GetCapacityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.GetCapacityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Int64Value maximum_volume_size = 2 [(.csi.v1.alpha_field) = true];
  if (this->has_maximum_volume_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maximum_volume_size_);
  }

  // .google.protobuf.Int64Value minimum_volume_size = 3 [(.csi.v1.alpha_field) = true];
  if (this->has_minimum_volume_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minimum_volume_size_);
  }

  // int64 available_capacity = 1;
  if (this->available_capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_available_capacity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCapacityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.GetCapacityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCapacityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCapacityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.GetCapacityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.GetCapacityResponse)
    MergeFrom(*source);
  }
}

void GetCapacityResponse::MergeFrom(const GetCapacityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.GetCapacityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_maximum_volume_size()) {
    _internal_mutable_maximum_volume_size()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_maximum_volume_size());
  }
  if (from.has_minimum_volume_size()) {
    _internal_mutable_minimum_volume_size()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_minimum_volume_size());
  }
  if (from.available_capacity() != 0) {
    _internal_set_available_capacity(from._internal_available_capacity());
  }
}

void GetCapacityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.GetCapacityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCapacityResponse::CopyFrom(const GetCapacityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.GetCapacityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCapacityResponse::IsInitialized() const {
  return true;
}

void GetCapacityResponse::InternalSwap(GetCapacityResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCapacityResponse, available_capacity_)
      + sizeof(GetCapacityResponse::available_capacity_)
      - PROTOBUF_FIELD_OFFSET(GetCapacityResponse, maximum_volume_size_)>(
          reinterpret_cast<char*>(&maximum_volume_size_),
          reinterpret_cast<char*>(&other->maximum_volume_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCapacityResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControllerGetCapabilitiesRequest::_Internal {
 public:
};

ControllerGetCapabilitiesRequest::ControllerGetCapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ControllerGetCapabilitiesRequest)
}
ControllerGetCapabilitiesRequest::ControllerGetCapabilitiesRequest(const ControllerGetCapabilitiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.ControllerGetCapabilitiesRequest)
}

void ControllerGetCapabilitiesRequest::SharedCtor() {
}

ControllerGetCapabilitiesRequest::~ControllerGetCapabilitiesRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.ControllerGetCapabilitiesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerGetCapabilitiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControllerGetCapabilitiesRequest::ArenaDtor(void* object) {
  ControllerGetCapabilitiesRequest* _this = reinterpret_cast< ControllerGetCapabilitiesRequest* >(object);
  (void)_this;
}
void ControllerGetCapabilitiesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerGetCapabilitiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerGetCapabilitiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ControllerGetCapabilitiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerGetCapabilitiesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerGetCapabilitiesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ControllerGetCapabilitiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ControllerGetCapabilitiesRequest)
  return target;
}

size_t ControllerGetCapabilitiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ControllerGetCapabilitiesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerGetCapabilitiesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ControllerGetCapabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerGetCapabilitiesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerGetCapabilitiesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ControllerGetCapabilitiesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ControllerGetCapabilitiesRequest)
    MergeFrom(*source);
  }
}

void ControllerGetCapabilitiesRequest::MergeFrom(const ControllerGetCapabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ControllerGetCapabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ControllerGetCapabilitiesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ControllerGetCapabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerGetCapabilitiesRequest::CopyFrom(const ControllerGetCapabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ControllerGetCapabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerGetCapabilitiesRequest::IsInitialized() const {
  return true;
}

void ControllerGetCapabilitiesRequest::InternalSwap(ControllerGetCapabilitiesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerGetCapabilitiesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControllerGetCapabilitiesResponse::_Internal {
 public:
};

ControllerGetCapabilitiesResponse::ControllerGetCapabilitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  capabilities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ControllerGetCapabilitiesResponse)
}
ControllerGetCapabilitiesResponse::ControllerGetCapabilitiesResponse(const ControllerGetCapabilitiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      capabilities_(from.capabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.ControllerGetCapabilitiesResponse)
}

void ControllerGetCapabilitiesResponse::SharedCtor() {
}

ControllerGetCapabilitiesResponse::~ControllerGetCapabilitiesResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.ControllerGetCapabilitiesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerGetCapabilitiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControllerGetCapabilitiesResponse::ArenaDtor(void* object) {
  ControllerGetCapabilitiesResponse* _this = reinterpret_cast< ControllerGetCapabilitiesResponse* >(object);
  (void)_this;
}
void ControllerGetCapabilitiesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerGetCapabilitiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerGetCapabilitiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ControllerGetCapabilitiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capabilities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerGetCapabilitiesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .csi.v1.ControllerServiceCapability capabilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_capabilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerGetCapabilitiesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ControllerGetCapabilitiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .csi.v1.ControllerServiceCapability capabilities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_capabilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_capabilities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ControllerGetCapabilitiesResponse)
  return target;
}

size_t ControllerGetCapabilitiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ControllerGetCapabilitiesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .csi.v1.ControllerServiceCapability capabilities = 1;
  total_size += 1UL * this->_internal_capabilities_size();
  for (const auto& msg : this->capabilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerGetCapabilitiesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ControllerGetCapabilitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerGetCapabilitiesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerGetCapabilitiesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ControllerGetCapabilitiesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ControllerGetCapabilitiesResponse)
    MergeFrom(*source);
  }
}

void ControllerGetCapabilitiesResponse::MergeFrom(const ControllerGetCapabilitiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ControllerGetCapabilitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  capabilities_.MergeFrom(from.capabilities_);
}

void ControllerGetCapabilitiesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ControllerGetCapabilitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerGetCapabilitiesResponse::CopyFrom(const ControllerGetCapabilitiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ControllerGetCapabilitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerGetCapabilitiesResponse::IsInitialized() const {
  return true;
}

void ControllerGetCapabilitiesResponse::InternalSwap(ControllerGetCapabilitiesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  capabilities_.InternalSwap(&other->capabilities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerGetCapabilitiesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControllerServiceCapability_RPC::_Internal {
 public:
};

ControllerServiceCapability_RPC::ControllerServiceCapability_RPC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ControllerServiceCapability.RPC)
}
ControllerServiceCapability_RPC::ControllerServiceCapability_RPC(const ControllerServiceCapability_RPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:csi.v1.ControllerServiceCapability.RPC)
}

void ControllerServiceCapability_RPC::SharedCtor() {
type_ = 0;
}

ControllerServiceCapability_RPC::~ControllerServiceCapability_RPC() {
  // @@protoc_insertion_point(destructor:csi.v1.ControllerServiceCapability.RPC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerServiceCapability_RPC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControllerServiceCapability_RPC::ArenaDtor(void* object) {
  ControllerServiceCapability_RPC* _this = reinterpret_cast< ControllerServiceCapability_RPC* >(object);
  (void)_this;
}
void ControllerServiceCapability_RPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerServiceCapability_RPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerServiceCapability_RPC::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ControllerServiceCapability.RPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerServiceCapability_RPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.ControllerServiceCapability.RPC.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::csi::v1::ControllerServiceCapability_RPC_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerServiceCapability_RPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ControllerServiceCapability.RPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.ControllerServiceCapability.RPC.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ControllerServiceCapability.RPC)
  return target;
}

size_t ControllerServiceCapability_RPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ControllerServiceCapability.RPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .csi.v1.ControllerServiceCapability.RPC.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerServiceCapability_RPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ControllerServiceCapability.RPC)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerServiceCapability_RPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerServiceCapability_RPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ControllerServiceCapability.RPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ControllerServiceCapability.RPC)
    MergeFrom(*source);
  }
}

void ControllerServiceCapability_RPC::MergeFrom(const ControllerServiceCapability_RPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ControllerServiceCapability.RPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ControllerServiceCapability_RPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ControllerServiceCapability.RPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerServiceCapability_RPC::CopyFrom(const ControllerServiceCapability_RPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ControllerServiceCapability.RPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerServiceCapability_RPC::IsInitialized() const {
  return true;
}

void ControllerServiceCapability_RPC::InternalSwap(ControllerServiceCapability_RPC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerServiceCapability_RPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControllerServiceCapability::_Internal {
 public:
  static const ::csi::v1::ControllerServiceCapability_RPC& rpc(const ControllerServiceCapability* msg);
};

const ::csi::v1::ControllerServiceCapability_RPC&
ControllerServiceCapability::_Internal::rpc(const ControllerServiceCapability* msg) {
  return *msg->type_.rpc_;
}
void ControllerServiceCapability::set_allocated_rpc(::csi::v1::ControllerServiceCapability_RPC* rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rpc);
    if (message_arena != submessage_arena) {
      rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc, submessage_arena);
    }
    set_has_rpc();
    type_.rpc_ = rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:csi.v1.ControllerServiceCapability.rpc)
}
ControllerServiceCapability::ControllerServiceCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ControllerServiceCapability)
}
ControllerServiceCapability::ControllerServiceCapability(const ControllerServiceCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kRpc: {
      _internal_mutable_rpc()->::csi::v1::ControllerServiceCapability_RPC::MergeFrom(from._internal_rpc());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.ControllerServiceCapability)
}

void ControllerServiceCapability::SharedCtor() {
clear_has_type();
}

ControllerServiceCapability::~ControllerServiceCapability() {
  // @@protoc_insertion_point(destructor:csi.v1.ControllerServiceCapability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerServiceCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void ControllerServiceCapability::ArenaDtor(void* object) {
  ControllerServiceCapability* _this = reinterpret_cast< ControllerServiceCapability* >(object);
  (void)_this;
}
void ControllerServiceCapability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerServiceCapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerServiceCapability::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:csi.v1.ControllerServiceCapability)
  switch (type_case()) {
    case kRpc: {
      if (GetArena() == nullptr) {
        delete type_.rpc_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ControllerServiceCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ControllerServiceCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerServiceCapability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.ControllerServiceCapability.RPC rpc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerServiceCapability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ControllerServiceCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.ControllerServiceCapability.RPC rpc = 1;
  if (_internal_has_rpc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rpc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ControllerServiceCapability)
  return target;
}

size_t ControllerServiceCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ControllerServiceCapability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .csi.v1.ControllerServiceCapability.RPC rpc = 1;
    case kRpc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.rpc_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerServiceCapability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ControllerServiceCapability)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerServiceCapability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerServiceCapability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ControllerServiceCapability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ControllerServiceCapability)
    MergeFrom(*source);
  }
}

void ControllerServiceCapability::MergeFrom(const ControllerServiceCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ControllerServiceCapability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kRpc: {
      _internal_mutable_rpc()->::csi::v1::ControllerServiceCapability_RPC::MergeFrom(from._internal_rpc());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void ControllerServiceCapability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ControllerServiceCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerServiceCapability::CopyFrom(const ControllerServiceCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ControllerServiceCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerServiceCapability::IsInitialized() const {
  return true;
}

void ControllerServiceCapability::InternalSwap(ControllerServiceCapability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerServiceCapability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

CreateSnapshotRequest_SecretsEntry_DoNotUse::CreateSnapshotRequest_SecretsEntry_DoNotUse() {}
CreateSnapshotRequest_SecretsEntry_DoNotUse::CreateSnapshotRequest_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateSnapshotRequest_SecretsEntry_DoNotUse::MergeFrom(const CreateSnapshotRequest_SecretsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateSnapshotRequest_SecretsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CreateSnapshotRequest_SecretsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

CreateSnapshotRequest_ParametersEntry_DoNotUse::CreateSnapshotRequest_ParametersEntry_DoNotUse() {}
CreateSnapshotRequest_ParametersEntry_DoNotUse::CreateSnapshotRequest_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateSnapshotRequest_ParametersEntry_DoNotUse::MergeFrom(const CreateSnapshotRequest_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateSnapshotRequest_ParametersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CreateSnapshotRequest_ParametersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class CreateSnapshotRequest::_Internal {
 public:
};

CreateSnapshotRequest::CreateSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  secrets_(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.CreateSnapshotRequest)
}
CreateSnapshotRequest::CreateSnapshotRequest(const CreateSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secrets_.MergeFrom(from.secrets_);
  parameters_.MergeFrom(from.parameters_);
  source_volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_volume_id().empty()) {
    source_volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_volume_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.CreateSnapshotRequest)
}

void CreateSnapshotRequest::SharedCtor() {
source_volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateSnapshotRequest::~CreateSnapshotRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.CreateSnapshotRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateSnapshotRequest::ArenaDtor(void* object) {
  CreateSnapshotRequest* _this = reinterpret_cast< CreateSnapshotRequest* >(object);
  (void)_this;
}
void CreateSnapshotRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.CreateSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secrets_.Clear();
  parameters_.Clear();
  source_volume_id_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSnapshotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string source_volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.CreateSnapshotRequest.source_volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.CreateSnapshotRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> secrets = 3 [(.csi.v1.csi_secret) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&secrets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> parameters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSnapshotRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.CreateSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_volume_id = 1;
  if (this->source_volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_volume_id().data(), static_cast<int>(this->_internal_source_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.CreateSnapshotRequest.source_volume_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_volume_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.CreateSnapshotRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // map<string, string> secrets = 3 [(.csi.v1.csi_secret) = true];
  if (!this->_internal_secrets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.CreateSnapshotRequest.SecretsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.CreateSnapshotRequest.SecretsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_secrets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_secrets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CreateSnapshotRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it) {
        target = CreateSnapshotRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> parameters = 4;
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.CreateSnapshotRequest.ParametersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.CreateSnapshotRequest.ParametersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CreateSnapshotRequest_ParametersEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = CreateSnapshotRequest_ParametersEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.CreateSnapshotRequest)
  return target;
}

size_t CreateSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.CreateSnapshotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> secrets = 3 [(.csi.v1.csi_secret) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secrets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_secrets().begin();
      it != this->_internal_secrets().end(); ++it) {
    total_size += CreateSnapshotRequest_SecretsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> parameters = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += CreateSnapshotRequest_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string source_volume_id = 1;
  if (this->source_volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_volume_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSnapshotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.CreateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSnapshotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.CreateSnapshotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.CreateSnapshotRequest)
    MergeFrom(*source);
  }
}

void CreateSnapshotRequest::MergeFrom(const CreateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.CreateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secrets_.MergeFrom(from.secrets_);
  parameters_.MergeFrom(from.parameters_);
  if (from.source_volume_id().size() > 0) {
    _internal_set_source_volume_id(from._internal_source_volume_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void CreateSnapshotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.CreateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSnapshotRequest::CopyFrom(const CreateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.CreateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSnapshotRequest::IsInitialized() const {
  return true;
}

void CreateSnapshotRequest::InternalSwap(CreateSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  secrets_.Swap(&other->secrets_);
  parameters_.Swap(&other->parameters_);
  source_volume_id_.Swap(&other->source_volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSnapshotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateSnapshotResponse::_Internal {
 public:
  static const ::csi::v1::Snapshot& snapshot(const CreateSnapshotResponse* msg);
};

const ::csi::v1::Snapshot&
CreateSnapshotResponse::_Internal::snapshot(const CreateSnapshotResponse* msg) {
  return *msg->snapshot_;
}
CreateSnapshotResponse::CreateSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.CreateSnapshotResponse)
}
CreateSnapshotResponse::CreateSnapshotResponse(const CreateSnapshotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_snapshot()) {
    snapshot_ = new ::csi::v1::Snapshot(*from.snapshot_);
  } else {
    snapshot_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.CreateSnapshotResponse)
}

void CreateSnapshotResponse::SharedCtor() {
snapshot_ = nullptr;
}

CreateSnapshotResponse::~CreateSnapshotResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.CreateSnapshotResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateSnapshotResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete snapshot_;
}

void CreateSnapshotResponse::ArenaDtor(void* object) {
  CreateSnapshotResponse* _this = reinterpret_cast< CreateSnapshotResponse* >(object);
  (void)_this;
}
void CreateSnapshotResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSnapshotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateSnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.CreateSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSnapshotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.Snapshot snapshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSnapshotResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.CreateSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.Snapshot snapshot = 1;
  if (this->has_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::snapshot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.CreateSnapshotResponse)
  return target;
}

size_t CreateSnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.CreateSnapshotResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .csi.v1.Snapshot snapshot = 1;
  if (this->has_snapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snapshot_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSnapshotResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.CreateSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSnapshotResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSnapshotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.CreateSnapshotResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.CreateSnapshotResponse)
    MergeFrom(*source);
  }
}

void CreateSnapshotResponse::MergeFrom(const CreateSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.CreateSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_snapshot()) {
    _internal_mutable_snapshot()->::csi::v1::Snapshot::MergeFrom(from._internal_snapshot());
  }
}

void CreateSnapshotResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.CreateSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSnapshotResponse::CopyFrom(const CreateSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.CreateSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSnapshotResponse::IsInitialized() const {
  return true;
}

void CreateSnapshotResponse::InternalSwap(CreateSnapshotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(snapshot_, other->snapshot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSnapshotResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Snapshot::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& creation_time(const Snapshot* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Snapshot::_Internal::creation_time(const Snapshot* msg) {
  return *msg->creation_time_;
}
void Snapshot::clear_creation_time() {
  if (GetArena() == nullptr && creation_time_ != nullptr) {
    delete creation_time_;
  }
  creation_time_ = nullptr;
}
Snapshot::Snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.Snapshot)
}
Snapshot::Snapshot(const Snapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snapshot_id().empty()) {
    snapshot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_snapshot_id(), 
      GetArena());
  }
  source_volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_volume_id().empty()) {
    source_volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_volume_id(), 
      GetArena());
  }
  if (from._internal_has_creation_time()) {
    creation_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.creation_time_);
  } else {
    creation_time_ = nullptr;
  }
  ::memcpy(&size_bytes_, &from.size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&ready_to_use_) -
    reinterpret_cast<char*>(&size_bytes_)) + sizeof(ready_to_use_));
  // @@protoc_insertion_point(copy_constructor:csi.v1.Snapshot)
}

void Snapshot::SharedCtor() {
snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
source_volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&creation_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ready_to_use_) -
    reinterpret_cast<char*>(&creation_time_)) + sizeof(ready_to_use_));
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:csi.v1.Snapshot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Snapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  snapshot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete creation_time_;
}

void Snapshot::ArenaDtor(void* object) {
  Snapshot* _this = reinterpret_cast< Snapshot* >(object);
  (void)_this;
}
void Snapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.Snapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_id_.ClearToEmpty();
  source_volume_id_.ClearToEmpty();
  if (GetArena() == nullptr && creation_time_ != nullptr) {
    delete creation_time_;
  }
  creation_time_ = nullptr;
  ::memset(&size_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ready_to_use_) -
      reinterpret_cast<char*>(&size_bytes_)) + sizeof(ready_to_use_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 size_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snapshot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_snapshot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.Snapshot.snapshot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_volume_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_source_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.Snapshot.source_volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp creation_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ready_to_use = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ready_to_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Snapshot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.Snapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 size_bytes = 1;
  if (this->size_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_size_bytes(), target);
  }

  // string snapshot_id = 2;
  if (this->snapshot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snapshot_id().data(), static_cast<int>(this->_internal_snapshot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.Snapshot.snapshot_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_snapshot_id(), target);
  }

  // string source_volume_id = 3;
  if (this->source_volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_volume_id().data(), static_cast<int>(this->_internal_source_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.Snapshot.source_volume_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source_volume_id(), target);
  }

  // .google.protobuf.Timestamp creation_time = 4;
  if (this->has_creation_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::creation_time(this), target, stream);
  }

  // bool ready_to_use = 5;
  if (this->ready_to_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ready_to_use(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.Snapshot)
  return target;
}

size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.Snapshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string snapshot_id = 2;
  if (this->snapshot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshot_id());
  }

  // string source_volume_id = 3;
  if (this->source_volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_volume_id());
  }

  // .google.protobuf.Timestamp creation_time = 4;
  if (this->has_creation_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *creation_time_);
  }

  // int64 size_bytes = 1;
  if (this->size_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size_bytes());
  }

  // bool ready_to_use = 5;
  if (this->ready_to_use() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Snapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Snapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Snapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.Snapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.Snapshot)
    MergeFrom(*source);
  }
}

void Snapshot::MergeFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot_id().size() > 0) {
    _internal_set_snapshot_id(from._internal_snapshot_id());
  }
  if (from.source_volume_id().size() > 0) {
    _internal_set_source_volume_id(from._internal_source_volume_id());
  }
  if (from.has_creation_time()) {
    _internal_mutable_creation_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_creation_time());
  }
  if (from.size_bytes() != 0) {
    _internal_set_size_bytes(from._internal_size_bytes());
  }
  if (from.ready_to_use() != 0) {
    _internal_set_ready_to_use(from._internal_ready_to_use());
  }
}

void Snapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {
  return true;
}

void Snapshot::InternalSwap(Snapshot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  snapshot_id_.Swap(&other->snapshot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_volume_id_.Swap(&other->source_volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snapshot, ready_to_use_)
      + sizeof(Snapshot::ready_to_use_)
      - PROTOBUF_FIELD_OFFSET(Snapshot, creation_time_)>(
          reinterpret_cast<char*>(&creation_time_),
          reinterpret_cast<char*>(&other->creation_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DeleteSnapshotRequest_SecretsEntry_DoNotUse::DeleteSnapshotRequest_SecretsEntry_DoNotUse() {}
DeleteSnapshotRequest_SecretsEntry_DoNotUse::DeleteSnapshotRequest_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DeleteSnapshotRequest_SecretsEntry_DoNotUse::MergeFrom(const DeleteSnapshotRequest_SecretsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DeleteSnapshotRequest_SecretsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DeleteSnapshotRequest_SecretsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class DeleteSnapshotRequest::_Internal {
 public:
};

DeleteSnapshotRequest::DeleteSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  secrets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.DeleteSnapshotRequest)
}
DeleteSnapshotRequest::DeleteSnapshotRequest(const DeleteSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secrets_.MergeFrom(from.secrets_);
  snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snapshot_id().empty()) {
    snapshot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_snapshot_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.DeleteSnapshotRequest)
}

void DeleteSnapshotRequest::SharedCtor() {
snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteSnapshotRequest::~DeleteSnapshotRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.DeleteSnapshotRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  snapshot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteSnapshotRequest::ArenaDtor(void* object) {
  DeleteSnapshotRequest* _this = reinterpret_cast< DeleteSnapshotRequest* >(object);
  (void)_this;
}
void DeleteSnapshotRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.DeleteSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secrets_.Clear();
  snapshot_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSnapshotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string snapshot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_snapshot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.DeleteSnapshotRequest.snapshot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> secrets = 2 [(.csi.v1.csi_secret) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&secrets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSnapshotRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.DeleteSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string snapshot_id = 1;
  if (this->snapshot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snapshot_id().data(), static_cast<int>(this->_internal_snapshot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.DeleteSnapshotRequest.snapshot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_snapshot_id(), target);
  }

  // map<string, string> secrets = 2 [(.csi.v1.csi_secret) = true];
  if (!this->_internal_secrets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.DeleteSnapshotRequest.SecretsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.DeleteSnapshotRequest.SecretsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_secrets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_secrets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DeleteSnapshotRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it) {
        target = DeleteSnapshotRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.DeleteSnapshotRequest)
  return target;
}

size_t DeleteSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.DeleteSnapshotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> secrets = 2 [(.csi.v1.csi_secret) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secrets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_secrets().begin();
      it != this->_internal_secrets().end(); ++it) {
    total_size += DeleteSnapshotRequest_SecretsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string snapshot_id = 1;
  if (this->snapshot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshot_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSnapshotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.DeleteSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSnapshotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.DeleteSnapshotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.DeleteSnapshotRequest)
    MergeFrom(*source);
  }
}

void DeleteSnapshotRequest::MergeFrom(const DeleteSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.DeleteSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secrets_.MergeFrom(from.secrets_);
  if (from.snapshot_id().size() > 0) {
    _internal_set_snapshot_id(from._internal_snapshot_id());
  }
}

void DeleteSnapshotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.DeleteSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSnapshotRequest::CopyFrom(const DeleteSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.DeleteSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSnapshotRequest::IsInitialized() const {
  return true;
}

void DeleteSnapshotRequest::InternalSwap(DeleteSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  secrets_.Swap(&other->secrets_);
  snapshot_id_.Swap(&other->snapshot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSnapshotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteSnapshotResponse::_Internal {
 public:
};

DeleteSnapshotResponse::DeleteSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.DeleteSnapshotResponse)
}
DeleteSnapshotResponse::DeleteSnapshotResponse(const DeleteSnapshotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.DeleteSnapshotResponse)
}

void DeleteSnapshotResponse::SharedCtor() {
}

DeleteSnapshotResponse::~DeleteSnapshotResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.DeleteSnapshotResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteSnapshotResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteSnapshotResponse::ArenaDtor(void* object) {
  DeleteSnapshotResponse* _this = reinterpret_cast< DeleteSnapshotResponse* >(object);
  (void)_this;
}
void DeleteSnapshotResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSnapshotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteSnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.DeleteSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSnapshotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSnapshotResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.DeleteSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.DeleteSnapshotResponse)
  return target;
}

size_t DeleteSnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.DeleteSnapshotResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSnapshotResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.DeleteSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSnapshotResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSnapshotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.DeleteSnapshotResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.DeleteSnapshotResponse)
    MergeFrom(*source);
  }
}

void DeleteSnapshotResponse::MergeFrom(const DeleteSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.DeleteSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteSnapshotResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.DeleteSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSnapshotResponse::CopyFrom(const DeleteSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.DeleteSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSnapshotResponse::IsInitialized() const {
  return true;
}

void DeleteSnapshotResponse::InternalSwap(DeleteSnapshotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSnapshotResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ListSnapshotsRequest_SecretsEntry_DoNotUse::ListSnapshotsRequest_SecretsEntry_DoNotUse() {}
ListSnapshotsRequest_SecretsEntry_DoNotUse::ListSnapshotsRequest_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ListSnapshotsRequest_SecretsEntry_DoNotUse::MergeFrom(const ListSnapshotsRequest_SecretsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ListSnapshotsRequest_SecretsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ListSnapshotsRequest_SecretsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ListSnapshotsRequest::_Internal {
 public:
};

ListSnapshotsRequest::ListSnapshotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  secrets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ListSnapshotsRequest)
}
ListSnapshotsRequest::ListSnapshotsRequest(const ListSnapshotsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secrets_.MergeFrom(from.secrets_);
  starting_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_starting_token().empty()) {
    starting_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_starting_token(), 
      GetArena());
  }
  source_volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_volume_id().empty()) {
    source_volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_volume_id(), 
      GetArena());
  }
  snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snapshot_id().empty()) {
    snapshot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_snapshot_id(), 
      GetArena());
  }
  max_entries_ = from.max_entries_;
  // @@protoc_insertion_point(copy_constructor:csi.v1.ListSnapshotsRequest)
}

void ListSnapshotsRequest::SharedCtor() {
starting_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
source_volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
max_entries_ = 0;
}

ListSnapshotsRequest::~ListSnapshotsRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.ListSnapshotsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListSnapshotsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  starting_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListSnapshotsRequest::ArenaDtor(void* object) {
  ListSnapshotsRequest* _this = reinterpret_cast< ListSnapshotsRequest* >(object);
  (void)_this;
}
void ListSnapshotsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSnapshotsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSnapshotsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ListSnapshotsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secrets_.Clear();
  starting_token_.ClearToEmpty();
  source_volume_id_.ClearToEmpty();
  snapshot_id_.ClearToEmpty();
  max_entries_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSnapshotsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string starting_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_starting_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ListSnapshotsRequest.starting_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_volume_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_source_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ListSnapshotsRequest.source_volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snapshot_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_snapshot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ListSnapshotsRequest.snapshot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&secrets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSnapshotsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ListSnapshotsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_entries = 1;
  if (this->max_entries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_entries(), target);
  }

  // string starting_token = 2;
  if (this->starting_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_starting_token().data(), static_cast<int>(this->_internal_starting_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ListSnapshotsRequest.starting_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_starting_token(), target);
  }

  // string source_volume_id = 3;
  if (this->source_volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_volume_id().data(), static_cast<int>(this->_internal_source_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ListSnapshotsRequest.source_volume_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source_volume_id(), target);
  }

  // string snapshot_id = 4;
  if (this->snapshot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snapshot_id().data(), static_cast<int>(this->_internal_snapshot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ListSnapshotsRequest.snapshot_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_snapshot_id(), target);
  }

  // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
  if (!this->_internal_secrets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ListSnapshotsRequest.SecretsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ListSnapshotsRequest.SecretsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_secrets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_secrets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ListSnapshotsRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it) {
        target = ListSnapshotsRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ListSnapshotsRequest)
  return target;
}

size_t ListSnapshotsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ListSnapshotsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secrets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_secrets().begin();
      it != this->_internal_secrets().end(); ++it) {
    total_size += ListSnapshotsRequest_SecretsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string starting_token = 2;
  if (this->starting_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_starting_token());
  }

  // string source_volume_id = 3;
  if (this->source_volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_volume_id());
  }

  // string snapshot_id = 4;
  if (this->snapshot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshot_id());
  }

  // int32 max_entries = 1;
  if (this->max_entries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_entries());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSnapshotsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ListSnapshotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSnapshotsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSnapshotsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ListSnapshotsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ListSnapshotsRequest)
    MergeFrom(*source);
  }
}

void ListSnapshotsRequest::MergeFrom(const ListSnapshotsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ListSnapshotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secrets_.MergeFrom(from.secrets_);
  if (from.starting_token().size() > 0) {
    _internal_set_starting_token(from._internal_starting_token());
  }
  if (from.source_volume_id().size() > 0) {
    _internal_set_source_volume_id(from._internal_source_volume_id());
  }
  if (from.snapshot_id().size() > 0) {
    _internal_set_snapshot_id(from._internal_snapshot_id());
  }
  if (from.max_entries() != 0) {
    _internal_set_max_entries(from._internal_max_entries());
  }
}

void ListSnapshotsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ListSnapshotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSnapshotsRequest::CopyFrom(const ListSnapshotsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ListSnapshotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSnapshotsRequest::IsInitialized() const {
  return true;
}

void ListSnapshotsRequest::InternalSwap(ListSnapshotsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  secrets_.Swap(&other->secrets_);
  starting_token_.Swap(&other->starting_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_volume_id_.Swap(&other->source_volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snapshot_id_.Swap(&other->snapshot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(max_entries_, other->max_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSnapshotsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListSnapshotsResponse_Entry::_Internal {
 public:
  static const ::csi::v1::Snapshot& snapshot(const ListSnapshotsResponse_Entry* msg);
};

const ::csi::v1::Snapshot&
ListSnapshotsResponse_Entry::_Internal::snapshot(const ListSnapshotsResponse_Entry* msg) {
  return *msg->snapshot_;
}
ListSnapshotsResponse_Entry::ListSnapshotsResponse_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ListSnapshotsResponse.Entry)
}
ListSnapshotsResponse_Entry::ListSnapshotsResponse_Entry(const ListSnapshotsResponse_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_snapshot()) {
    snapshot_ = new ::csi::v1::Snapshot(*from.snapshot_);
  } else {
    snapshot_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.ListSnapshotsResponse.Entry)
}

void ListSnapshotsResponse_Entry::SharedCtor() {
snapshot_ = nullptr;
}

ListSnapshotsResponse_Entry::~ListSnapshotsResponse_Entry() {
  // @@protoc_insertion_point(destructor:csi.v1.ListSnapshotsResponse.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListSnapshotsResponse_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete snapshot_;
}

void ListSnapshotsResponse_Entry::ArenaDtor(void* object) {
  ListSnapshotsResponse_Entry* _this = reinterpret_cast< ListSnapshotsResponse_Entry* >(object);
  (void)_this;
}
void ListSnapshotsResponse_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSnapshotsResponse_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSnapshotsResponse_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ListSnapshotsResponse.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSnapshotsResponse_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.Snapshot snapshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSnapshotsResponse_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ListSnapshotsResponse.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.Snapshot snapshot = 1;
  if (this->has_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::snapshot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ListSnapshotsResponse.Entry)
  return target;
}

size_t ListSnapshotsResponse_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ListSnapshotsResponse.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .csi.v1.Snapshot snapshot = 1;
  if (this->has_snapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snapshot_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSnapshotsResponse_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ListSnapshotsResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSnapshotsResponse_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSnapshotsResponse_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ListSnapshotsResponse.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ListSnapshotsResponse.Entry)
    MergeFrom(*source);
  }
}

void ListSnapshotsResponse_Entry::MergeFrom(const ListSnapshotsResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ListSnapshotsResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_snapshot()) {
    _internal_mutable_snapshot()->::csi::v1::Snapshot::MergeFrom(from._internal_snapshot());
  }
}

void ListSnapshotsResponse_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ListSnapshotsResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSnapshotsResponse_Entry::CopyFrom(const ListSnapshotsResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ListSnapshotsResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSnapshotsResponse_Entry::IsInitialized() const {
  return true;
}

void ListSnapshotsResponse_Entry::InternalSwap(ListSnapshotsResponse_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(snapshot_, other->snapshot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSnapshotsResponse_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListSnapshotsResponse::_Internal {
 public:
};

ListSnapshotsResponse::ListSnapshotsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ListSnapshotsResponse)
}
ListSnapshotsResponse::ListSnapshotsResponse(const ListSnapshotsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_token().empty()) {
    next_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.ListSnapshotsResponse)
}

void ListSnapshotsResponse::SharedCtor() {
next_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListSnapshotsResponse::~ListSnapshotsResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.ListSnapshotsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListSnapshotsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  next_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListSnapshotsResponse::ArenaDtor(void* object) {
  ListSnapshotsResponse* _this = reinterpret_cast< ListSnapshotsResponse* >(object);
  (void)_this;
}
void ListSnapshotsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSnapshotsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSnapshotsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ListSnapshotsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  next_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSnapshotsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .csi.v1.ListSnapshotsResponse.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_next_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ListSnapshotsResponse.next_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSnapshotsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ListSnapshotsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .csi.v1.ListSnapshotsResponse.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  // string next_token = 2;
  if (this->next_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_token().data(), static_cast<int>(this->_internal_next_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ListSnapshotsResponse.next_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ListSnapshotsResponse)
  return target;
}

size_t ListSnapshotsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ListSnapshotsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .csi.v1.ListSnapshotsResponse.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_token = 2;
  if (this->next_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSnapshotsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ListSnapshotsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSnapshotsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSnapshotsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ListSnapshotsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ListSnapshotsResponse)
    MergeFrom(*source);
  }
}

void ListSnapshotsResponse::MergeFrom(const ListSnapshotsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ListSnapshotsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.next_token().size() > 0) {
    _internal_set_next_token(from._internal_next_token());
  }
}

void ListSnapshotsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ListSnapshotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSnapshotsResponse::CopyFrom(const ListSnapshotsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ListSnapshotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSnapshotsResponse::IsInitialized() const {
  return true;
}

void ListSnapshotsResponse::InternalSwap(ListSnapshotsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  next_token_.Swap(&other->next_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSnapshotsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ControllerExpandVolumeRequest_SecretsEntry_DoNotUse::ControllerExpandVolumeRequest_SecretsEntry_DoNotUse() {}
ControllerExpandVolumeRequest_SecretsEntry_DoNotUse::ControllerExpandVolumeRequest_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ControllerExpandVolumeRequest_SecretsEntry_DoNotUse::MergeFrom(const ControllerExpandVolumeRequest_SecretsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ControllerExpandVolumeRequest_SecretsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ControllerExpandVolumeRequest_SecretsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ControllerExpandVolumeRequest::_Internal {
 public:
  static const ::csi::v1::CapacityRange& capacity_range(const ControllerExpandVolumeRequest* msg);
  static const ::csi::v1::VolumeCapability& volume_capability(const ControllerExpandVolumeRequest* msg);
};

const ::csi::v1::CapacityRange&
ControllerExpandVolumeRequest::_Internal::capacity_range(const ControllerExpandVolumeRequest* msg) {
  return *msg->capacity_range_;
}
const ::csi::v1::VolumeCapability&
ControllerExpandVolumeRequest::_Internal::volume_capability(const ControllerExpandVolumeRequest* msg) {
  return *msg->volume_capability_;
}
ControllerExpandVolumeRequest::ControllerExpandVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  secrets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ControllerExpandVolumeRequest)
}
ControllerExpandVolumeRequest::ControllerExpandVolumeRequest(const ControllerExpandVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secrets_.MergeFrom(from.secrets_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_id().empty()) {
    volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_id(), 
      GetArena());
  }
  if (from._internal_has_capacity_range()) {
    capacity_range_ = new ::csi::v1::CapacityRange(*from.capacity_range_);
  } else {
    capacity_range_ = nullptr;
  }
  if (from._internal_has_volume_capability()) {
    volume_capability_ = new ::csi::v1::VolumeCapability(*from.volume_capability_);
  } else {
    volume_capability_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.ControllerExpandVolumeRequest)
}

void ControllerExpandVolumeRequest::SharedCtor() {
volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&capacity_range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&volume_capability_) -
    reinterpret_cast<char*>(&capacity_range_)) + sizeof(volume_capability_));
}

ControllerExpandVolumeRequest::~ControllerExpandVolumeRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.ControllerExpandVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerExpandVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capacity_range_;
  if (this != internal_default_instance()) delete volume_capability_;
}

void ControllerExpandVolumeRequest::ArenaDtor(void* object) {
  ControllerExpandVolumeRequest* _this = reinterpret_cast< ControllerExpandVolumeRequest* >(object);
  (void)_this;
}
void ControllerExpandVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerExpandVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerExpandVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ControllerExpandVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secrets_.Clear();
  volume_id_.ClearToEmpty();
  if (GetArena() == nullptr && capacity_range_ != nullptr) {
    delete capacity_range_;
  }
  capacity_range_ = nullptr;
  if (GetArena() == nullptr && volume_capability_ != nullptr) {
    delete volume_capability_;
  }
  volume_capability_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerExpandVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.ControllerExpandVolumeRequest.volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.CapacityRange capacity_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_capacity_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> secrets = 3 [(.csi.v1.csi_secret) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&secrets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .csi.v1.VolumeCapability volume_capability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume_capability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerExpandVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ControllerExpandVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_id().data(), static_cast<int>(this->_internal_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.ControllerExpandVolumeRequest.volume_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_volume_id(), target);
  }

  // .csi.v1.CapacityRange capacity_range = 2;
  if (this->has_capacity_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::capacity_range(this), target, stream);
  }

  // map<string, string> secrets = 3 [(.csi.v1.csi_secret) = true];
  if (!this->_internal_secrets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ControllerExpandVolumeRequest.SecretsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.ControllerExpandVolumeRequest.SecretsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_secrets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_secrets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ControllerExpandVolumeRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it) {
        target = ControllerExpandVolumeRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .csi.v1.VolumeCapability volume_capability = 4;
  if (this->has_volume_capability()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::volume_capability(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ControllerExpandVolumeRequest)
  return target;
}

size_t ControllerExpandVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ControllerExpandVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> secrets = 3 [(.csi.v1.csi_secret) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secrets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_secrets().begin();
      it != this->_internal_secrets().end(); ++it) {
    total_size += ControllerExpandVolumeRequest_SecretsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_id());
  }

  // .csi.v1.CapacityRange capacity_range = 2;
  if (this->has_capacity_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capacity_range_);
  }

  // .csi.v1.VolumeCapability volume_capability = 4;
  if (this->has_volume_capability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_capability_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerExpandVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ControllerExpandVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerExpandVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerExpandVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ControllerExpandVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ControllerExpandVolumeRequest)
    MergeFrom(*source);
  }
}

void ControllerExpandVolumeRequest::MergeFrom(const ControllerExpandVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ControllerExpandVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secrets_.MergeFrom(from.secrets_);
  if (from.volume_id().size() > 0) {
    _internal_set_volume_id(from._internal_volume_id());
  }
  if (from.has_capacity_range()) {
    _internal_mutable_capacity_range()->::csi::v1::CapacityRange::MergeFrom(from._internal_capacity_range());
  }
  if (from.has_volume_capability()) {
    _internal_mutable_volume_capability()->::csi::v1::VolumeCapability::MergeFrom(from._internal_volume_capability());
  }
}

void ControllerExpandVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ControllerExpandVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerExpandVolumeRequest::CopyFrom(const ControllerExpandVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ControllerExpandVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerExpandVolumeRequest::IsInitialized() const {
  return true;
}

void ControllerExpandVolumeRequest::InternalSwap(ControllerExpandVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  secrets_.Swap(&other->secrets_);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerExpandVolumeRequest, volume_capability_)
      + sizeof(ControllerExpandVolumeRequest::volume_capability_)
      - PROTOBUF_FIELD_OFFSET(ControllerExpandVolumeRequest, capacity_range_)>(
          reinterpret_cast<char*>(&capacity_range_),
          reinterpret_cast<char*>(&other->capacity_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerExpandVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControllerExpandVolumeResponse::_Internal {
 public:
};

ControllerExpandVolumeResponse::ControllerExpandVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.ControllerExpandVolumeResponse)
}
ControllerExpandVolumeResponse::ControllerExpandVolumeResponse(const ControllerExpandVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&capacity_bytes_, &from.capacity_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_expansion_required_) -
    reinterpret_cast<char*>(&capacity_bytes_)) + sizeof(node_expansion_required_));
  // @@protoc_insertion_point(copy_constructor:csi.v1.ControllerExpandVolumeResponse)
}

void ControllerExpandVolumeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&capacity_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&node_expansion_required_) -
    reinterpret_cast<char*>(&capacity_bytes_)) + sizeof(node_expansion_required_));
}

ControllerExpandVolumeResponse::~ControllerExpandVolumeResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.ControllerExpandVolumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerExpandVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControllerExpandVolumeResponse::ArenaDtor(void* object) {
  ControllerExpandVolumeResponse* _this = reinterpret_cast< ControllerExpandVolumeResponse* >(object);
  (void)_this;
}
void ControllerExpandVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerExpandVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerExpandVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.ControllerExpandVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&capacity_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_expansion_required_) -
      reinterpret_cast<char*>(&capacity_bytes_)) + sizeof(node_expansion_required_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerExpandVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 capacity_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          capacity_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool node_expansion_required = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          node_expansion_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerExpandVolumeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.ControllerExpandVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 capacity_bytes = 1;
  if (this->capacity_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_capacity_bytes(), target);
  }

  // bool node_expansion_required = 2;
  if (this->node_expansion_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_node_expansion_required(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.ControllerExpandVolumeResponse)
  return target;
}

size_t ControllerExpandVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.ControllerExpandVolumeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 capacity_bytes = 1;
  if (this->capacity_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_capacity_bytes());
  }

  // bool node_expansion_required = 2;
  if (this->node_expansion_required() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerExpandVolumeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.ControllerExpandVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerExpandVolumeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerExpandVolumeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.ControllerExpandVolumeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.ControllerExpandVolumeResponse)
    MergeFrom(*source);
  }
}

void ControllerExpandVolumeResponse::MergeFrom(const ControllerExpandVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.ControllerExpandVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.capacity_bytes() != 0) {
    _internal_set_capacity_bytes(from._internal_capacity_bytes());
  }
  if (from.node_expansion_required() != 0) {
    _internal_set_node_expansion_required(from._internal_node_expansion_required());
  }
}

void ControllerExpandVolumeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.ControllerExpandVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerExpandVolumeResponse::CopyFrom(const ControllerExpandVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.ControllerExpandVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerExpandVolumeResponse::IsInitialized() const {
  return true;
}

void ControllerExpandVolumeResponse::InternalSwap(ControllerExpandVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerExpandVolumeResponse, node_expansion_required_)
      + sizeof(ControllerExpandVolumeResponse::node_expansion_required_)
      - PROTOBUF_FIELD_OFFSET(ControllerExpandVolumeResponse, capacity_bytes_)>(
          reinterpret_cast<char*>(&capacity_bytes_),
          reinterpret_cast<char*>(&other->capacity_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerExpandVolumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

NodeStageVolumeRequest_PublishContextEntry_DoNotUse::NodeStageVolumeRequest_PublishContextEntry_DoNotUse() {}
NodeStageVolumeRequest_PublishContextEntry_DoNotUse::NodeStageVolumeRequest_PublishContextEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NodeStageVolumeRequest_PublishContextEntry_DoNotUse::MergeFrom(const NodeStageVolumeRequest_PublishContextEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NodeStageVolumeRequest_PublishContextEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void NodeStageVolumeRequest_PublishContextEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

NodeStageVolumeRequest_SecretsEntry_DoNotUse::NodeStageVolumeRequest_SecretsEntry_DoNotUse() {}
NodeStageVolumeRequest_SecretsEntry_DoNotUse::NodeStageVolumeRequest_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NodeStageVolumeRequest_SecretsEntry_DoNotUse::MergeFrom(const NodeStageVolumeRequest_SecretsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NodeStageVolumeRequest_SecretsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void NodeStageVolumeRequest_SecretsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

NodeStageVolumeRequest_VolumeContextEntry_DoNotUse::NodeStageVolumeRequest_VolumeContextEntry_DoNotUse() {}
NodeStageVolumeRequest_VolumeContextEntry_DoNotUse::NodeStageVolumeRequest_VolumeContextEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NodeStageVolumeRequest_VolumeContextEntry_DoNotUse::MergeFrom(const NodeStageVolumeRequest_VolumeContextEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NodeStageVolumeRequest_VolumeContextEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void NodeStageVolumeRequest_VolumeContextEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class NodeStageVolumeRequest::_Internal {
 public:
  static const ::csi::v1::VolumeCapability& volume_capability(const NodeStageVolumeRequest* msg);
};

const ::csi::v1::VolumeCapability&
NodeStageVolumeRequest::_Internal::volume_capability(const NodeStageVolumeRequest* msg) {
  return *msg->volume_capability_;
}
NodeStageVolumeRequest::NodeStageVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  publish_context_(arena),
  secrets_(arena),
  volume_context_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeStageVolumeRequest)
}
NodeStageVolumeRequest::NodeStageVolumeRequest(const NodeStageVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publish_context_.MergeFrom(from.publish_context_);
  secrets_.MergeFrom(from.secrets_);
  volume_context_.MergeFrom(from.volume_context_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_id().empty()) {
    volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_id(), 
      GetArena());
  }
  staging_target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_staging_target_path().empty()) {
    staging_target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staging_target_path(), 
      GetArena());
  }
  if (from._internal_has_volume_capability()) {
    volume_capability_ = new ::csi::v1::VolumeCapability(*from.volume_capability_);
  } else {
    volume_capability_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeStageVolumeRequest)
}

void NodeStageVolumeRequest::SharedCtor() {
volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
staging_target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_capability_ = nullptr;
}

NodeStageVolumeRequest::~NodeStageVolumeRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeStageVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeStageVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staging_target_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete volume_capability_;
}

void NodeStageVolumeRequest::ArenaDtor(void* object) {
  NodeStageVolumeRequest* _this = reinterpret_cast< NodeStageVolumeRequest* >(object);
  (void)_this;
}
void NodeStageVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeStageVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeStageVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeStageVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publish_context_.Clear();
  secrets_.Clear();
  volume_context_.Clear();
  volume_id_.ClearToEmpty();
  staging_target_path_.ClearToEmpty();
  if (GetArena() == nullptr && volume_capability_ != nullptr) {
    delete volume_capability_;
  }
  volume_capability_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeStageVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodeStageVolumeRequest.volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> publish_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&publish_context_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string staging_target_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_staging_target_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodeStageVolumeRequest.staging_target_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.VolumeCapability volume_capability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume_capability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&secrets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> volume_context = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&volume_context_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeStageVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeStageVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_id().data(), static_cast<int>(this->_internal_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodeStageVolumeRequest.volume_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_volume_id(), target);
  }

  // map<string, string> publish_context = 2;
  if (!this->_internal_publish_context().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.NodeStageVolumeRequest.PublishContextEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.NodeStageVolumeRequest.PublishContextEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_publish_context().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_publish_context().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_publish_context().begin();
          it != this->_internal_publish_context().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NodeStageVolumeRequest_PublishContextEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_publish_context().begin();
          it != this->_internal_publish_context().end(); ++it) {
        target = NodeStageVolumeRequest_PublishContextEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string staging_target_path = 3;
  if (this->staging_target_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_staging_target_path().data(), static_cast<int>(this->_internal_staging_target_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodeStageVolumeRequest.staging_target_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_staging_target_path(), target);
  }

  // .csi.v1.VolumeCapability volume_capability = 4;
  if (this->has_volume_capability()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::volume_capability(this), target, stream);
  }

  // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
  if (!this->_internal_secrets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.NodeStageVolumeRequest.SecretsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.NodeStageVolumeRequest.SecretsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_secrets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_secrets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NodeStageVolumeRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it) {
        target = NodeStageVolumeRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> volume_context = 6;
  if (!this->_internal_volume_context().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.NodeStageVolumeRequest.VolumeContextEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.NodeStageVolumeRequest.VolumeContextEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_volume_context().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_volume_context().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_volume_context().begin();
          it != this->_internal_volume_context().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NodeStageVolumeRequest_VolumeContextEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_volume_context().begin();
          it != this->_internal_volume_context().end(); ++it) {
        target = NodeStageVolumeRequest_VolumeContextEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeStageVolumeRequest)
  return target;
}

size_t NodeStageVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeStageVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> publish_context = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_publish_context_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_publish_context().begin();
      it != this->_internal_publish_context().end(); ++it) {
    total_size += NodeStageVolumeRequest_PublishContextEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> secrets = 5 [(.csi.v1.csi_secret) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secrets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_secrets().begin();
      it != this->_internal_secrets().end(); ++it) {
    total_size += NodeStageVolumeRequest_SecretsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> volume_context = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volume_context_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_volume_context().begin();
      it != this->_internal_volume_context().end(); ++it) {
    total_size += NodeStageVolumeRequest_VolumeContextEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_id());
  }

  // string staging_target_path = 3;
  if (this->staging_target_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staging_target_path());
  }

  // .csi.v1.VolumeCapability volume_capability = 4;
  if (this->has_volume_capability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_capability_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeStageVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeStageVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeStageVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeStageVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeStageVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeStageVolumeRequest)
    MergeFrom(*source);
  }
}

void NodeStageVolumeRequest::MergeFrom(const NodeStageVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeStageVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publish_context_.MergeFrom(from.publish_context_);
  secrets_.MergeFrom(from.secrets_);
  volume_context_.MergeFrom(from.volume_context_);
  if (from.volume_id().size() > 0) {
    _internal_set_volume_id(from._internal_volume_id());
  }
  if (from.staging_target_path().size() > 0) {
    _internal_set_staging_target_path(from._internal_staging_target_path());
  }
  if (from.has_volume_capability()) {
    _internal_mutable_volume_capability()->::csi::v1::VolumeCapability::MergeFrom(from._internal_volume_capability());
  }
}

void NodeStageVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeStageVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStageVolumeRequest::CopyFrom(const NodeStageVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeStageVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStageVolumeRequest::IsInitialized() const {
  return true;
}

void NodeStageVolumeRequest::InternalSwap(NodeStageVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  publish_context_.Swap(&other->publish_context_);
  secrets_.Swap(&other->secrets_);
  volume_context_.Swap(&other->volume_context_);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  staging_target_path_.Swap(&other->staging_target_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(volume_capability_, other->volume_capability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeStageVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeStageVolumeResponse::_Internal {
 public:
};

NodeStageVolumeResponse::NodeStageVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeStageVolumeResponse)
}
NodeStageVolumeResponse::NodeStageVolumeResponse(const NodeStageVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeStageVolumeResponse)
}

void NodeStageVolumeResponse::SharedCtor() {
}

NodeStageVolumeResponse::~NodeStageVolumeResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeStageVolumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeStageVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeStageVolumeResponse::ArenaDtor(void* object) {
  NodeStageVolumeResponse* _this = reinterpret_cast< NodeStageVolumeResponse* >(object);
  (void)_this;
}
void NodeStageVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeStageVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeStageVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeStageVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeStageVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeStageVolumeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeStageVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeStageVolumeResponse)
  return target;
}

size_t NodeStageVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeStageVolumeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeStageVolumeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeStageVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeStageVolumeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeStageVolumeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeStageVolumeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeStageVolumeResponse)
    MergeFrom(*source);
  }
}

void NodeStageVolumeResponse::MergeFrom(const NodeStageVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeStageVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NodeStageVolumeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeStageVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStageVolumeResponse::CopyFrom(const NodeStageVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeStageVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStageVolumeResponse::IsInitialized() const {
  return true;
}

void NodeStageVolumeResponse::InternalSwap(NodeStageVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeStageVolumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeUnstageVolumeRequest::_Internal {
 public:
};

NodeUnstageVolumeRequest::NodeUnstageVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeUnstageVolumeRequest)
}
NodeUnstageVolumeRequest::NodeUnstageVolumeRequest(const NodeUnstageVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_id().empty()) {
    volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_id(), 
      GetArena());
  }
  staging_target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_staging_target_path().empty()) {
    staging_target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staging_target_path(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeUnstageVolumeRequest)
}

void NodeUnstageVolumeRequest::SharedCtor() {
volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
staging_target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodeUnstageVolumeRequest::~NodeUnstageVolumeRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeUnstageVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeUnstageVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staging_target_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeUnstageVolumeRequest::ArenaDtor(void* object) {
  NodeUnstageVolumeRequest* _this = reinterpret_cast< NodeUnstageVolumeRequest* >(object);
  (void)_this;
}
void NodeUnstageVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeUnstageVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeUnstageVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeUnstageVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_id_.ClearToEmpty();
  staging_target_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeUnstageVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodeUnstageVolumeRequest.volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string staging_target_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_staging_target_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodeUnstageVolumeRequest.staging_target_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeUnstageVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeUnstageVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_id().data(), static_cast<int>(this->_internal_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodeUnstageVolumeRequest.volume_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_volume_id(), target);
  }

  // string staging_target_path = 2;
  if (this->staging_target_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_staging_target_path().data(), static_cast<int>(this->_internal_staging_target_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodeUnstageVolumeRequest.staging_target_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_staging_target_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeUnstageVolumeRequest)
  return target;
}

size_t NodeUnstageVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeUnstageVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_id());
  }

  // string staging_target_path = 2;
  if (this->staging_target_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staging_target_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeUnstageVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeUnstageVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeUnstageVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeUnstageVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeUnstageVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeUnstageVolumeRequest)
    MergeFrom(*source);
  }
}

void NodeUnstageVolumeRequest::MergeFrom(const NodeUnstageVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeUnstageVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.volume_id().size() > 0) {
    _internal_set_volume_id(from._internal_volume_id());
  }
  if (from.staging_target_path().size() > 0) {
    _internal_set_staging_target_path(from._internal_staging_target_path());
  }
}

void NodeUnstageVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeUnstageVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeUnstageVolumeRequest::CopyFrom(const NodeUnstageVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeUnstageVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeUnstageVolumeRequest::IsInitialized() const {
  return true;
}

void NodeUnstageVolumeRequest::InternalSwap(NodeUnstageVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  staging_target_path_.Swap(&other->staging_target_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeUnstageVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeUnstageVolumeResponse::_Internal {
 public:
};

NodeUnstageVolumeResponse::NodeUnstageVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeUnstageVolumeResponse)
}
NodeUnstageVolumeResponse::NodeUnstageVolumeResponse(const NodeUnstageVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeUnstageVolumeResponse)
}

void NodeUnstageVolumeResponse::SharedCtor() {
}

NodeUnstageVolumeResponse::~NodeUnstageVolumeResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeUnstageVolumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeUnstageVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeUnstageVolumeResponse::ArenaDtor(void* object) {
  NodeUnstageVolumeResponse* _this = reinterpret_cast< NodeUnstageVolumeResponse* >(object);
  (void)_this;
}
void NodeUnstageVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeUnstageVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeUnstageVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeUnstageVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeUnstageVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeUnstageVolumeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeUnstageVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeUnstageVolumeResponse)
  return target;
}

size_t NodeUnstageVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeUnstageVolumeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeUnstageVolumeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeUnstageVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeUnstageVolumeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeUnstageVolumeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeUnstageVolumeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeUnstageVolumeResponse)
    MergeFrom(*source);
  }
}

void NodeUnstageVolumeResponse::MergeFrom(const NodeUnstageVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeUnstageVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NodeUnstageVolumeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeUnstageVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeUnstageVolumeResponse::CopyFrom(const NodeUnstageVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeUnstageVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeUnstageVolumeResponse::IsInitialized() const {
  return true;
}

void NodeUnstageVolumeResponse::InternalSwap(NodeUnstageVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeUnstageVolumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

NodePublishVolumeRequest_PublishContextEntry_DoNotUse::NodePublishVolumeRequest_PublishContextEntry_DoNotUse() {}
NodePublishVolumeRequest_PublishContextEntry_DoNotUse::NodePublishVolumeRequest_PublishContextEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NodePublishVolumeRequest_PublishContextEntry_DoNotUse::MergeFrom(const NodePublishVolumeRequest_PublishContextEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NodePublishVolumeRequest_PublishContextEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void NodePublishVolumeRequest_PublishContextEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

NodePublishVolumeRequest_SecretsEntry_DoNotUse::NodePublishVolumeRequest_SecretsEntry_DoNotUse() {}
NodePublishVolumeRequest_SecretsEntry_DoNotUse::NodePublishVolumeRequest_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NodePublishVolumeRequest_SecretsEntry_DoNotUse::MergeFrom(const NodePublishVolumeRequest_SecretsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NodePublishVolumeRequest_SecretsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void NodePublishVolumeRequest_SecretsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

NodePublishVolumeRequest_VolumeContextEntry_DoNotUse::NodePublishVolumeRequest_VolumeContextEntry_DoNotUse() {}
NodePublishVolumeRequest_VolumeContextEntry_DoNotUse::NodePublishVolumeRequest_VolumeContextEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NodePublishVolumeRequest_VolumeContextEntry_DoNotUse::MergeFrom(const NodePublishVolumeRequest_VolumeContextEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NodePublishVolumeRequest_VolumeContextEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void NodePublishVolumeRequest_VolumeContextEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class NodePublishVolumeRequest::_Internal {
 public:
  static const ::csi::v1::VolumeCapability& volume_capability(const NodePublishVolumeRequest* msg);
};

const ::csi::v1::VolumeCapability&
NodePublishVolumeRequest::_Internal::volume_capability(const NodePublishVolumeRequest* msg) {
  return *msg->volume_capability_;
}
NodePublishVolumeRequest::NodePublishVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  publish_context_(arena),
  secrets_(arena),
  volume_context_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodePublishVolumeRequest)
}
NodePublishVolumeRequest::NodePublishVolumeRequest(const NodePublishVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publish_context_.MergeFrom(from.publish_context_);
  secrets_.MergeFrom(from.secrets_);
  volume_context_.MergeFrom(from.volume_context_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_id().empty()) {
    volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_id(), 
      GetArena());
  }
  staging_target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_staging_target_path().empty()) {
    staging_target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staging_target_path(), 
      GetArena());
  }
  target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_path().empty()) {
    target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_path(), 
      GetArena());
  }
  if (from._internal_has_volume_capability()) {
    volume_capability_ = new ::csi::v1::VolumeCapability(*from.volume_capability_);
  } else {
    volume_capability_ = nullptr;
  }
  readonly_ = from.readonly_;
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodePublishVolumeRequest)
}

void NodePublishVolumeRequest::SharedCtor() {
volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
staging_target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&volume_capability_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&readonly_) -
    reinterpret_cast<char*>(&volume_capability_)) + sizeof(readonly_));
}

NodePublishVolumeRequest::~NodePublishVolumeRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.NodePublishVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodePublishVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staging_target_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete volume_capability_;
}

void NodePublishVolumeRequest::ArenaDtor(void* object) {
  NodePublishVolumeRequest* _this = reinterpret_cast< NodePublishVolumeRequest* >(object);
  (void)_this;
}
void NodePublishVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodePublishVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodePublishVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodePublishVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publish_context_.Clear();
  secrets_.Clear();
  volume_context_.Clear();
  volume_id_.ClearToEmpty();
  staging_target_path_.ClearToEmpty();
  target_path_.ClearToEmpty();
  if (GetArena() == nullptr && volume_capability_ != nullptr) {
    delete volume_capability_;
  }
  volume_capability_ = nullptr;
  readonly_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodePublishVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodePublishVolumeRequest.volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> publish_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&publish_context_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string staging_target_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_staging_target_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodePublishVolumeRequest.staging_target_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_target_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodePublishVolumeRequest.target_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.VolumeCapability volume_capability = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume_capability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool readonly = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          readonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> secrets = 7 [(.csi.v1.csi_secret) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&secrets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> volume_context = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&volume_context_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodePublishVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodePublishVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_id().data(), static_cast<int>(this->_internal_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodePublishVolumeRequest.volume_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_volume_id(), target);
  }

  // map<string, string> publish_context = 2;
  if (!this->_internal_publish_context().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.NodePublishVolumeRequest.PublishContextEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.NodePublishVolumeRequest.PublishContextEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_publish_context().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_publish_context().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_publish_context().begin();
          it != this->_internal_publish_context().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NodePublishVolumeRequest_PublishContextEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_publish_context().begin();
          it != this->_internal_publish_context().end(); ++it) {
        target = NodePublishVolumeRequest_PublishContextEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string staging_target_path = 3;
  if (this->staging_target_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_staging_target_path().data(), static_cast<int>(this->_internal_staging_target_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodePublishVolumeRequest.staging_target_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_staging_target_path(), target);
  }

  // string target_path = 4;
  if (this->target_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_path().data(), static_cast<int>(this->_internal_target_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodePublishVolumeRequest.target_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_target_path(), target);
  }

  // .csi.v1.VolumeCapability volume_capability = 5;
  if (this->has_volume_capability()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::volume_capability(this), target, stream);
  }

  // bool readonly = 6;
  if (this->readonly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_readonly(), target);
  }

  // map<string, string> secrets = 7 [(.csi.v1.csi_secret) = true];
  if (!this->_internal_secrets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.NodePublishVolumeRequest.SecretsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.NodePublishVolumeRequest.SecretsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_secrets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_secrets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NodePublishVolumeRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it) {
        target = NodePublishVolumeRequest_SecretsEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> volume_context = 8;
  if (!this->_internal_volume_context().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.NodePublishVolumeRequest.VolumeContextEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "csi.v1.NodePublishVolumeRequest.VolumeContextEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_volume_context().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_volume_context().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_volume_context().begin();
          it != this->_internal_volume_context().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NodePublishVolumeRequest_VolumeContextEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_volume_context().begin();
          it != this->_internal_volume_context().end(); ++it) {
        target = NodePublishVolumeRequest_VolumeContextEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodePublishVolumeRequest)
  return target;
}

size_t NodePublishVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodePublishVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> publish_context = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_publish_context_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_publish_context().begin();
      it != this->_internal_publish_context().end(); ++it) {
    total_size += NodePublishVolumeRequest_PublishContextEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> secrets = 7 [(.csi.v1.csi_secret) = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secrets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_secrets().begin();
      it != this->_internal_secrets().end(); ++it) {
    total_size += NodePublishVolumeRequest_SecretsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> volume_context = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volume_context_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_volume_context().begin();
      it != this->_internal_volume_context().end(); ++it) {
    total_size += NodePublishVolumeRequest_VolumeContextEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_id());
  }

  // string staging_target_path = 3;
  if (this->staging_target_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staging_target_path());
  }

  // string target_path = 4;
  if (this->target_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_path());
  }

  // .csi.v1.VolumeCapability volume_capability = 5;
  if (this->has_volume_capability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_capability_);
  }

  // bool readonly = 6;
  if (this->readonly() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodePublishVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodePublishVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodePublishVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodePublishVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodePublishVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodePublishVolumeRequest)
    MergeFrom(*source);
  }
}

void NodePublishVolumeRequest::MergeFrom(const NodePublishVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodePublishVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publish_context_.MergeFrom(from.publish_context_);
  secrets_.MergeFrom(from.secrets_);
  volume_context_.MergeFrom(from.volume_context_);
  if (from.volume_id().size() > 0) {
    _internal_set_volume_id(from._internal_volume_id());
  }
  if (from.staging_target_path().size() > 0) {
    _internal_set_staging_target_path(from._internal_staging_target_path());
  }
  if (from.target_path().size() > 0) {
    _internal_set_target_path(from._internal_target_path());
  }
  if (from.has_volume_capability()) {
    _internal_mutable_volume_capability()->::csi::v1::VolumeCapability::MergeFrom(from._internal_volume_capability());
  }
  if (from.readonly() != 0) {
    _internal_set_readonly(from._internal_readonly());
  }
}

void NodePublishVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodePublishVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodePublishVolumeRequest::CopyFrom(const NodePublishVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodePublishVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodePublishVolumeRequest::IsInitialized() const {
  return true;
}

void NodePublishVolumeRequest::InternalSwap(NodePublishVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  publish_context_.Swap(&other->publish_context_);
  secrets_.Swap(&other->secrets_);
  volume_context_.Swap(&other->volume_context_);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  staging_target_path_.Swap(&other->staging_target_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_path_.Swap(&other->target_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodePublishVolumeRequest, readonly_)
      + sizeof(NodePublishVolumeRequest::readonly_)
      - PROTOBUF_FIELD_OFFSET(NodePublishVolumeRequest, volume_capability_)>(
          reinterpret_cast<char*>(&volume_capability_),
          reinterpret_cast<char*>(&other->volume_capability_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodePublishVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodePublishVolumeResponse::_Internal {
 public:
};

NodePublishVolumeResponse::NodePublishVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodePublishVolumeResponse)
}
NodePublishVolumeResponse::NodePublishVolumeResponse(const NodePublishVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodePublishVolumeResponse)
}

void NodePublishVolumeResponse::SharedCtor() {
}

NodePublishVolumeResponse::~NodePublishVolumeResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.NodePublishVolumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodePublishVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodePublishVolumeResponse::ArenaDtor(void* object) {
  NodePublishVolumeResponse* _this = reinterpret_cast< NodePublishVolumeResponse* >(object);
  (void)_this;
}
void NodePublishVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodePublishVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodePublishVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodePublishVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodePublishVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodePublishVolumeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodePublishVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodePublishVolumeResponse)
  return target;
}

size_t NodePublishVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodePublishVolumeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodePublishVolumeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodePublishVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodePublishVolumeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodePublishVolumeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodePublishVolumeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodePublishVolumeResponse)
    MergeFrom(*source);
  }
}

void NodePublishVolumeResponse::MergeFrom(const NodePublishVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodePublishVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NodePublishVolumeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodePublishVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodePublishVolumeResponse::CopyFrom(const NodePublishVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodePublishVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodePublishVolumeResponse::IsInitialized() const {
  return true;
}

void NodePublishVolumeResponse::InternalSwap(NodePublishVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodePublishVolumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeUnpublishVolumeRequest::_Internal {
 public:
};

NodeUnpublishVolumeRequest::NodeUnpublishVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeUnpublishVolumeRequest)
}
NodeUnpublishVolumeRequest::NodeUnpublishVolumeRequest(const NodeUnpublishVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_id().empty()) {
    volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_id(), 
      GetArena());
  }
  target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_path().empty()) {
    target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_path(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeUnpublishVolumeRequest)
}

void NodeUnpublishVolumeRequest::SharedCtor() {
volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodeUnpublishVolumeRequest::~NodeUnpublishVolumeRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeUnpublishVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeUnpublishVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeUnpublishVolumeRequest::ArenaDtor(void* object) {
  NodeUnpublishVolumeRequest* _this = reinterpret_cast< NodeUnpublishVolumeRequest* >(object);
  (void)_this;
}
void NodeUnpublishVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeUnpublishVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeUnpublishVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeUnpublishVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_id_.ClearToEmpty();
  target_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeUnpublishVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodeUnpublishVolumeRequest.volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodeUnpublishVolumeRequest.target_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeUnpublishVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeUnpublishVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_id().data(), static_cast<int>(this->_internal_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodeUnpublishVolumeRequest.volume_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_volume_id(), target);
  }

  // string target_path = 2;
  if (this->target_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_path().data(), static_cast<int>(this->_internal_target_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodeUnpublishVolumeRequest.target_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeUnpublishVolumeRequest)
  return target;
}

size_t NodeUnpublishVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeUnpublishVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_id());
  }

  // string target_path = 2;
  if (this->target_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeUnpublishVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeUnpublishVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeUnpublishVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeUnpublishVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeUnpublishVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeUnpublishVolumeRequest)
    MergeFrom(*source);
  }
}

void NodeUnpublishVolumeRequest::MergeFrom(const NodeUnpublishVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeUnpublishVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.volume_id().size() > 0) {
    _internal_set_volume_id(from._internal_volume_id());
  }
  if (from.target_path().size() > 0) {
    _internal_set_target_path(from._internal_target_path());
  }
}

void NodeUnpublishVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeUnpublishVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeUnpublishVolumeRequest::CopyFrom(const NodeUnpublishVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeUnpublishVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeUnpublishVolumeRequest::IsInitialized() const {
  return true;
}

void NodeUnpublishVolumeRequest::InternalSwap(NodeUnpublishVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_path_.Swap(&other->target_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeUnpublishVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeUnpublishVolumeResponse::_Internal {
 public:
};

NodeUnpublishVolumeResponse::NodeUnpublishVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeUnpublishVolumeResponse)
}
NodeUnpublishVolumeResponse::NodeUnpublishVolumeResponse(const NodeUnpublishVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeUnpublishVolumeResponse)
}

void NodeUnpublishVolumeResponse::SharedCtor() {
}

NodeUnpublishVolumeResponse::~NodeUnpublishVolumeResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeUnpublishVolumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeUnpublishVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeUnpublishVolumeResponse::ArenaDtor(void* object) {
  NodeUnpublishVolumeResponse* _this = reinterpret_cast< NodeUnpublishVolumeResponse* >(object);
  (void)_this;
}
void NodeUnpublishVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeUnpublishVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeUnpublishVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeUnpublishVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeUnpublishVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeUnpublishVolumeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeUnpublishVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeUnpublishVolumeResponse)
  return target;
}

size_t NodeUnpublishVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeUnpublishVolumeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeUnpublishVolumeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeUnpublishVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeUnpublishVolumeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeUnpublishVolumeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeUnpublishVolumeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeUnpublishVolumeResponse)
    MergeFrom(*source);
  }
}

void NodeUnpublishVolumeResponse::MergeFrom(const NodeUnpublishVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeUnpublishVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NodeUnpublishVolumeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeUnpublishVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeUnpublishVolumeResponse::CopyFrom(const NodeUnpublishVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeUnpublishVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeUnpublishVolumeResponse::IsInitialized() const {
  return true;
}

void NodeUnpublishVolumeResponse::InternalSwap(NodeUnpublishVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeUnpublishVolumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeGetVolumeStatsRequest::_Internal {
 public:
};

NodeGetVolumeStatsRequest::NodeGetVolumeStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeGetVolumeStatsRequest)
}
NodeGetVolumeStatsRequest::NodeGetVolumeStatsRequest(const NodeGetVolumeStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_id().empty()) {
    volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_id(), 
      GetArena());
  }
  volume_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_path().empty()) {
    volume_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_path(), 
      GetArena());
  }
  staging_target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_staging_target_path().empty()) {
    staging_target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staging_target_path(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeGetVolumeStatsRequest)
}

void NodeGetVolumeStatsRequest::SharedCtor() {
volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
staging_target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodeGetVolumeStatsRequest::~NodeGetVolumeStatsRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeGetVolumeStatsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeGetVolumeStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staging_target_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeGetVolumeStatsRequest::ArenaDtor(void* object) {
  NodeGetVolumeStatsRequest* _this = reinterpret_cast< NodeGetVolumeStatsRequest* >(object);
  (void)_this;
}
void NodeGetVolumeStatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeGetVolumeStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeGetVolumeStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeGetVolumeStatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_id_.ClearToEmpty();
  volume_path_.ClearToEmpty();
  staging_target_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeGetVolumeStatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodeGetVolumeStatsRequest.volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodeGetVolumeStatsRequest.volume_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string staging_target_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_staging_target_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodeGetVolumeStatsRequest.staging_target_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeGetVolumeStatsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeGetVolumeStatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_id().data(), static_cast<int>(this->_internal_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodeGetVolumeStatsRequest.volume_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_volume_id(), target);
  }

  // string volume_path = 2;
  if (this->volume_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_path().data(), static_cast<int>(this->_internal_volume_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodeGetVolumeStatsRequest.volume_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_path(), target);
  }

  // string staging_target_path = 3;
  if (this->staging_target_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_staging_target_path().data(), static_cast<int>(this->_internal_staging_target_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodeGetVolumeStatsRequest.staging_target_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_staging_target_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeGetVolumeStatsRequest)
  return target;
}

size_t NodeGetVolumeStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeGetVolumeStatsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_id());
  }

  // string volume_path = 2;
  if (this->volume_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_path());
  }

  // string staging_target_path = 3;
  if (this->staging_target_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staging_target_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeGetVolumeStatsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeGetVolumeStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeGetVolumeStatsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeGetVolumeStatsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeGetVolumeStatsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeGetVolumeStatsRequest)
    MergeFrom(*source);
  }
}

void NodeGetVolumeStatsRequest::MergeFrom(const NodeGetVolumeStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeGetVolumeStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.volume_id().size() > 0) {
    _internal_set_volume_id(from._internal_volume_id());
  }
  if (from.volume_path().size() > 0) {
    _internal_set_volume_path(from._internal_volume_path());
  }
  if (from.staging_target_path().size() > 0) {
    _internal_set_staging_target_path(from._internal_staging_target_path());
  }
}

void NodeGetVolumeStatsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeGetVolumeStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeGetVolumeStatsRequest::CopyFrom(const NodeGetVolumeStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeGetVolumeStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeGetVolumeStatsRequest::IsInitialized() const {
  return true;
}

void NodeGetVolumeStatsRequest::InternalSwap(NodeGetVolumeStatsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_path_.Swap(&other->volume_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  staging_target_path_.Swap(&other->staging_target_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeGetVolumeStatsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeGetVolumeStatsResponse::_Internal {
 public:
  static const ::csi::v1::VolumeCondition& volume_condition(const NodeGetVolumeStatsResponse* msg);
};

const ::csi::v1::VolumeCondition&
NodeGetVolumeStatsResponse::_Internal::volume_condition(const NodeGetVolumeStatsResponse* msg) {
  return *msg->volume_condition_;
}
NodeGetVolumeStatsResponse::NodeGetVolumeStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  usage_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeGetVolumeStatsResponse)
}
NodeGetVolumeStatsResponse::NodeGetVolumeStatsResponse(const NodeGetVolumeStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      usage_(from.usage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_volume_condition()) {
    volume_condition_ = new ::csi::v1::VolumeCondition(*from.volume_condition_);
  } else {
    volume_condition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeGetVolumeStatsResponse)
}

void NodeGetVolumeStatsResponse::SharedCtor() {
volume_condition_ = nullptr;
}

NodeGetVolumeStatsResponse::~NodeGetVolumeStatsResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeGetVolumeStatsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeGetVolumeStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete volume_condition_;
}

void NodeGetVolumeStatsResponse::ArenaDtor(void* object) {
  NodeGetVolumeStatsResponse* _this = reinterpret_cast< NodeGetVolumeStatsResponse* >(object);
  (void)_this;
}
void NodeGetVolumeStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeGetVolumeStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeGetVolumeStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeGetVolumeStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usage_.Clear();
  if (GetArena() == nullptr && volume_condition_ != nullptr) {
    delete volume_condition_;
  }
  volume_condition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeGetVolumeStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .csi.v1.VolumeUsage usage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .csi.v1.VolumeCondition volume_condition = 2 [(.csi.v1.alpha_field) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeGetVolumeStatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeGetVolumeStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .csi.v1.VolumeUsage usage = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_usage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_usage(i), target, stream);
  }

  // .csi.v1.VolumeCondition volume_condition = 2 [(.csi.v1.alpha_field) = true];
  if (this->has_volume_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::volume_condition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeGetVolumeStatsResponse)
  return target;
}

size_t NodeGetVolumeStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeGetVolumeStatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .csi.v1.VolumeUsage usage = 1;
  total_size += 1UL * this->_internal_usage_size();
  for (const auto& msg : this->usage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .csi.v1.VolumeCondition volume_condition = 2 [(.csi.v1.alpha_field) = true];
  if (this->has_volume_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_condition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeGetVolumeStatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeGetVolumeStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeGetVolumeStatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeGetVolumeStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeGetVolumeStatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeGetVolumeStatsResponse)
    MergeFrom(*source);
  }
}

void NodeGetVolumeStatsResponse::MergeFrom(const NodeGetVolumeStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeGetVolumeStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usage_.MergeFrom(from.usage_);
  if (from.has_volume_condition()) {
    _internal_mutable_volume_condition()->::csi::v1::VolumeCondition::MergeFrom(from._internal_volume_condition());
  }
}

void NodeGetVolumeStatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeGetVolumeStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeGetVolumeStatsResponse::CopyFrom(const NodeGetVolumeStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeGetVolumeStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeGetVolumeStatsResponse::IsInitialized() const {
  return true;
}

void NodeGetVolumeStatsResponse::InternalSwap(NodeGetVolumeStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  usage_.InternalSwap(&other->usage_);
  swap(volume_condition_, other->volume_condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeGetVolumeStatsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VolumeUsage::_Internal {
 public:
};

VolumeUsage::VolumeUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.VolumeUsage)
}
VolumeUsage::VolumeUsage(const VolumeUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&available_, &from.available_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&available_)) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:csi.v1.VolumeUsage)
}

void VolumeUsage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&available_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&available_)) + sizeof(unit_));
}

VolumeUsage::~VolumeUsage() {
  // @@protoc_insertion_point(destructor:csi.v1.VolumeUsage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VolumeUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VolumeUsage::ArenaDtor(void* object) {
  VolumeUsage* _this = reinterpret_cast< VolumeUsage* >(object);
  (void)_this;
}
void VolumeUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.VolumeUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&available_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&available_)) + sizeof(unit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 used = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.VolumeUsage.Unit unit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_unit(static_cast<::csi::v1::VolumeUsage_Unit>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolumeUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.VolumeUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 available = 1;
  if (this->available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_available(), target);
  }

  // int64 total = 2;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_total(), target);
  }

  // int64 used = 3;
  if (this->used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_used(), target);
  }

  // .csi.v1.VolumeUsage.Unit unit = 4;
  if (this->unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.VolumeUsage)
  return target;
}

size_t VolumeUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.VolumeUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 available = 1;
  if (this->available() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_available());
  }

  // int64 total = 2;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total());
  }

  // int64 used = 3;
  if (this->used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_used());
  }

  // .csi.v1.VolumeUsage.Unit unit = 4;
  if (this->unit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeUsage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.VolumeUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const VolumeUsage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VolumeUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.VolumeUsage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.VolumeUsage)
    MergeFrom(*source);
  }
}

void VolumeUsage::MergeFrom(const VolumeUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.VolumeUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.available() != 0) {
    _internal_set_available(from._internal_available());
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.used() != 0) {
    _internal_set_used(from._internal_used());
  }
  if (from.unit() != 0) {
    _internal_set_unit(from._internal_unit());
  }
}

void VolumeUsage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.VolumeUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeUsage::CopyFrom(const VolumeUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.VolumeUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeUsage::IsInitialized() const {
  return true;
}

void VolumeUsage::InternalSwap(VolumeUsage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VolumeUsage, unit_)
      + sizeof(VolumeUsage::unit_)
      - PROTOBUF_FIELD_OFFSET(VolumeUsage, available_)>(
          reinterpret_cast<char*>(&available_),
          reinterpret_cast<char*>(&other->available_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeUsage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VolumeCondition::_Internal {
 public:
};

VolumeCondition::VolumeCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.VolumeCondition)
}
VolumeCondition::VolumeCondition(const VolumeCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  abnormal_ = from.abnormal_;
  // @@protoc_insertion_point(copy_constructor:csi.v1.VolumeCondition)
}

void VolumeCondition::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
abnormal_ = false;
}

VolumeCondition::~VolumeCondition() {
  // @@protoc_insertion_point(destructor:csi.v1.VolumeCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VolumeCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VolumeCondition::ArenaDtor(void* object) {
  VolumeCondition* _this = reinterpret_cast< VolumeCondition* >(object);
  (void)_this;
}
void VolumeCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.VolumeCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  abnormal_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool abnormal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          abnormal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.VolumeCondition.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolumeCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.VolumeCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool abnormal = 1;
  if (this->abnormal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_abnormal(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.VolumeCondition.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.VolumeCondition)
  return target;
}

size_t VolumeCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.VolumeCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool abnormal = 1;
  if (this->abnormal() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolumeCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.VolumeCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const VolumeCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VolumeCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.VolumeCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.VolumeCondition)
    MergeFrom(*source);
  }
}

void VolumeCondition::MergeFrom(const VolumeCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.VolumeCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.abnormal() != 0) {
    _internal_set_abnormal(from._internal_abnormal());
  }
}

void VolumeCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.VolumeCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeCondition::CopyFrom(const VolumeCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.VolumeCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeCondition::IsInitialized() const {
  return true;
}

void VolumeCondition::InternalSwap(VolumeCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(abnormal_, other->abnormal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeGetCapabilitiesRequest::_Internal {
 public:
};

NodeGetCapabilitiesRequest::NodeGetCapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeGetCapabilitiesRequest)
}
NodeGetCapabilitiesRequest::NodeGetCapabilitiesRequest(const NodeGetCapabilitiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeGetCapabilitiesRequest)
}

void NodeGetCapabilitiesRequest::SharedCtor() {
}

NodeGetCapabilitiesRequest::~NodeGetCapabilitiesRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeGetCapabilitiesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeGetCapabilitiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeGetCapabilitiesRequest::ArenaDtor(void* object) {
  NodeGetCapabilitiesRequest* _this = reinterpret_cast< NodeGetCapabilitiesRequest* >(object);
  (void)_this;
}
void NodeGetCapabilitiesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeGetCapabilitiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeGetCapabilitiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeGetCapabilitiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeGetCapabilitiesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeGetCapabilitiesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeGetCapabilitiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeGetCapabilitiesRequest)
  return target;
}

size_t NodeGetCapabilitiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeGetCapabilitiesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeGetCapabilitiesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeGetCapabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeGetCapabilitiesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeGetCapabilitiesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeGetCapabilitiesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeGetCapabilitiesRequest)
    MergeFrom(*source);
  }
}

void NodeGetCapabilitiesRequest::MergeFrom(const NodeGetCapabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeGetCapabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NodeGetCapabilitiesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeGetCapabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeGetCapabilitiesRequest::CopyFrom(const NodeGetCapabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeGetCapabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeGetCapabilitiesRequest::IsInitialized() const {
  return true;
}

void NodeGetCapabilitiesRequest::InternalSwap(NodeGetCapabilitiesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeGetCapabilitiesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeGetCapabilitiesResponse::_Internal {
 public:
};

NodeGetCapabilitiesResponse::NodeGetCapabilitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  capabilities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeGetCapabilitiesResponse)
}
NodeGetCapabilitiesResponse::NodeGetCapabilitiesResponse(const NodeGetCapabilitiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      capabilities_(from.capabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeGetCapabilitiesResponse)
}

void NodeGetCapabilitiesResponse::SharedCtor() {
}

NodeGetCapabilitiesResponse::~NodeGetCapabilitiesResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeGetCapabilitiesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeGetCapabilitiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeGetCapabilitiesResponse::ArenaDtor(void* object) {
  NodeGetCapabilitiesResponse* _this = reinterpret_cast< NodeGetCapabilitiesResponse* >(object);
  (void)_this;
}
void NodeGetCapabilitiesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeGetCapabilitiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeGetCapabilitiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeGetCapabilitiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capabilities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeGetCapabilitiesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .csi.v1.NodeServiceCapability capabilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_capabilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeGetCapabilitiesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeGetCapabilitiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .csi.v1.NodeServiceCapability capabilities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_capabilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_capabilities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeGetCapabilitiesResponse)
  return target;
}

size_t NodeGetCapabilitiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeGetCapabilitiesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .csi.v1.NodeServiceCapability capabilities = 1;
  total_size += 1UL * this->_internal_capabilities_size();
  for (const auto& msg : this->capabilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeGetCapabilitiesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeGetCapabilitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeGetCapabilitiesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeGetCapabilitiesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeGetCapabilitiesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeGetCapabilitiesResponse)
    MergeFrom(*source);
  }
}

void NodeGetCapabilitiesResponse::MergeFrom(const NodeGetCapabilitiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeGetCapabilitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  capabilities_.MergeFrom(from.capabilities_);
}

void NodeGetCapabilitiesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeGetCapabilitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeGetCapabilitiesResponse::CopyFrom(const NodeGetCapabilitiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeGetCapabilitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeGetCapabilitiesResponse::IsInitialized() const {
  return true;
}

void NodeGetCapabilitiesResponse::InternalSwap(NodeGetCapabilitiesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  capabilities_.InternalSwap(&other->capabilities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeGetCapabilitiesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeServiceCapability_RPC::_Internal {
 public:
};

NodeServiceCapability_RPC::NodeServiceCapability_RPC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeServiceCapability.RPC)
}
NodeServiceCapability_RPC::NodeServiceCapability_RPC(const NodeServiceCapability_RPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeServiceCapability.RPC)
}

void NodeServiceCapability_RPC::SharedCtor() {
type_ = 0;
}

NodeServiceCapability_RPC::~NodeServiceCapability_RPC() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeServiceCapability.RPC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeServiceCapability_RPC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeServiceCapability_RPC::ArenaDtor(void* object) {
  NodeServiceCapability_RPC* _this = reinterpret_cast< NodeServiceCapability_RPC* >(object);
  (void)_this;
}
void NodeServiceCapability_RPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeServiceCapability_RPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeServiceCapability_RPC::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeServiceCapability.RPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeServiceCapability_RPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.NodeServiceCapability.RPC.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::csi::v1::NodeServiceCapability_RPC_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeServiceCapability_RPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeServiceCapability.RPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.NodeServiceCapability.RPC.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeServiceCapability.RPC)
  return target;
}

size_t NodeServiceCapability_RPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeServiceCapability.RPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .csi.v1.NodeServiceCapability.RPC.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeServiceCapability_RPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeServiceCapability.RPC)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeServiceCapability_RPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeServiceCapability_RPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeServiceCapability.RPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeServiceCapability.RPC)
    MergeFrom(*source);
  }
}

void NodeServiceCapability_RPC::MergeFrom(const NodeServiceCapability_RPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeServiceCapability.RPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void NodeServiceCapability_RPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeServiceCapability.RPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeServiceCapability_RPC::CopyFrom(const NodeServiceCapability_RPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeServiceCapability.RPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeServiceCapability_RPC::IsInitialized() const {
  return true;
}

void NodeServiceCapability_RPC::InternalSwap(NodeServiceCapability_RPC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeServiceCapability_RPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeServiceCapability::_Internal {
 public:
  static const ::csi::v1::NodeServiceCapability_RPC& rpc(const NodeServiceCapability* msg);
};

const ::csi::v1::NodeServiceCapability_RPC&
NodeServiceCapability::_Internal::rpc(const NodeServiceCapability* msg) {
  return *msg->type_.rpc_;
}
void NodeServiceCapability::set_allocated_rpc(::csi::v1::NodeServiceCapability_RPC* rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rpc);
    if (message_arena != submessage_arena) {
      rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc, submessage_arena);
    }
    set_has_rpc();
    type_.rpc_ = rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:csi.v1.NodeServiceCapability.rpc)
}
NodeServiceCapability::NodeServiceCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeServiceCapability)
}
NodeServiceCapability::NodeServiceCapability(const NodeServiceCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kRpc: {
      _internal_mutable_rpc()->::csi::v1::NodeServiceCapability_RPC::MergeFrom(from._internal_rpc());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeServiceCapability)
}

void NodeServiceCapability::SharedCtor() {
clear_has_type();
}

NodeServiceCapability::~NodeServiceCapability() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeServiceCapability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeServiceCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void NodeServiceCapability::ArenaDtor(void* object) {
  NodeServiceCapability* _this = reinterpret_cast< NodeServiceCapability* >(object);
  (void)_this;
}
void NodeServiceCapability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeServiceCapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeServiceCapability::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:csi.v1.NodeServiceCapability)
  switch (type_case()) {
    case kRpc: {
      if (GetArena() == nullptr) {
        delete type_.rpc_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void NodeServiceCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeServiceCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeServiceCapability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .csi.v1.NodeServiceCapability.RPC rpc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeServiceCapability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeServiceCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .csi.v1.NodeServiceCapability.RPC rpc = 1;
  if (_internal_has_rpc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rpc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeServiceCapability)
  return target;
}

size_t NodeServiceCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeServiceCapability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .csi.v1.NodeServiceCapability.RPC rpc = 1;
    case kRpc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.rpc_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeServiceCapability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeServiceCapability)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeServiceCapability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeServiceCapability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeServiceCapability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeServiceCapability)
    MergeFrom(*source);
  }
}

void NodeServiceCapability::MergeFrom(const NodeServiceCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeServiceCapability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kRpc: {
      _internal_mutable_rpc()->::csi::v1::NodeServiceCapability_RPC::MergeFrom(from._internal_rpc());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void NodeServiceCapability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeServiceCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeServiceCapability::CopyFrom(const NodeServiceCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeServiceCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeServiceCapability::IsInitialized() const {
  return true;
}

void NodeServiceCapability::InternalSwap(NodeServiceCapability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeServiceCapability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeGetInfoRequest::_Internal {
 public:
};

NodeGetInfoRequest::NodeGetInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeGetInfoRequest)
}
NodeGetInfoRequest::NodeGetInfoRequest(const NodeGetInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeGetInfoRequest)
}

void NodeGetInfoRequest::SharedCtor() {
}

NodeGetInfoRequest::~NodeGetInfoRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeGetInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeGetInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeGetInfoRequest::ArenaDtor(void* object) {
  NodeGetInfoRequest* _this = reinterpret_cast< NodeGetInfoRequest* >(object);
  (void)_this;
}
void NodeGetInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeGetInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeGetInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeGetInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeGetInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeGetInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeGetInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeGetInfoRequest)
  return target;
}

size_t NodeGetInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeGetInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeGetInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeGetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeGetInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeGetInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeGetInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeGetInfoRequest)
    MergeFrom(*source);
  }
}

void NodeGetInfoRequest::MergeFrom(const NodeGetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeGetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NodeGetInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeGetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeGetInfoRequest::CopyFrom(const NodeGetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeGetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeGetInfoRequest::IsInitialized() const {
  return true;
}

void NodeGetInfoRequest::InternalSwap(NodeGetInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeGetInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeGetInfoResponse::_Internal {
 public:
  static const ::csi::v1::Topology& accessible_topology(const NodeGetInfoResponse* msg);
};

const ::csi::v1::Topology&
NodeGetInfoResponse::_Internal::accessible_topology(const NodeGetInfoResponse* msg) {
  return *msg->accessible_topology_;
}
NodeGetInfoResponse::NodeGetInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeGetInfoResponse)
}
NodeGetInfoResponse::NodeGetInfoResponse(const NodeGetInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArena());
  }
  if (from._internal_has_accessible_topology()) {
    accessible_topology_ = new ::csi::v1::Topology(*from.accessible_topology_);
  } else {
    accessible_topology_ = nullptr;
  }
  max_volumes_per_node_ = from.max_volumes_per_node_;
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeGetInfoResponse)
}

void NodeGetInfoResponse::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accessible_topology_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_volumes_per_node_) -
    reinterpret_cast<char*>(&accessible_topology_)) + sizeof(max_volumes_per_node_));
}

NodeGetInfoResponse::~NodeGetInfoResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeGetInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeGetInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accessible_topology_;
}

void NodeGetInfoResponse::ArenaDtor(void* object) {
  NodeGetInfoResponse* _this = reinterpret_cast< NodeGetInfoResponse* >(object);
  (void)_this;
}
void NodeGetInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeGetInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeGetInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeGetInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmpty();
  if (GetArena() == nullptr && accessible_topology_ != nullptr) {
    delete accessible_topology_;
  }
  accessible_topology_ = nullptr;
  max_volumes_per_node_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeGetInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodeGetInfoResponse.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_volumes_per_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_volumes_per_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.Topology accessible_topology = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_accessible_topology(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeGetInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeGetInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodeGetInfoResponse.node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // int64 max_volumes_per_node = 2;
  if (this->max_volumes_per_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_volumes_per_node(), target);
  }

  // .csi.v1.Topology accessible_topology = 3;
  if (this->has_accessible_topology()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::accessible_topology(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeGetInfoResponse)
  return target;
}

size_t NodeGetInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeGetInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // .csi.v1.Topology accessible_topology = 3;
  if (this->has_accessible_topology()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accessible_topology_);
  }

  // int64 max_volumes_per_node = 2;
  if (this->max_volumes_per_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_volumes_per_node());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeGetInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeGetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeGetInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeGetInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeGetInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeGetInfoResponse)
    MergeFrom(*source);
  }
}

void NodeGetInfoResponse::MergeFrom(const NodeGetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeGetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.has_accessible_topology()) {
    _internal_mutable_accessible_topology()->::csi::v1::Topology::MergeFrom(from._internal_accessible_topology());
  }
  if (from.max_volumes_per_node() != 0) {
    _internal_set_max_volumes_per_node(from._internal_max_volumes_per_node());
  }
}

void NodeGetInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeGetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeGetInfoResponse::CopyFrom(const NodeGetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeGetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeGetInfoResponse::IsInitialized() const {
  return true;
}

void NodeGetInfoResponse::InternalSwap(NodeGetInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeGetInfoResponse, max_volumes_per_node_)
      + sizeof(NodeGetInfoResponse::max_volumes_per_node_)
      - PROTOBUF_FIELD_OFFSET(NodeGetInfoResponse, accessible_topology_)>(
          reinterpret_cast<char*>(&accessible_topology_),
          reinterpret_cast<char*>(&other->accessible_topology_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeGetInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeExpandVolumeRequest::_Internal {
 public:
  static const ::csi::v1::CapacityRange& capacity_range(const NodeExpandVolumeRequest* msg);
  static const ::csi::v1::VolumeCapability& volume_capability(const NodeExpandVolumeRequest* msg);
};

const ::csi::v1::CapacityRange&
NodeExpandVolumeRequest::_Internal::capacity_range(const NodeExpandVolumeRequest* msg) {
  return *msg->capacity_range_;
}
const ::csi::v1::VolumeCapability&
NodeExpandVolumeRequest::_Internal::volume_capability(const NodeExpandVolumeRequest* msg) {
  return *msg->volume_capability_;
}
NodeExpandVolumeRequest::NodeExpandVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeExpandVolumeRequest)
}
NodeExpandVolumeRequest::NodeExpandVolumeRequest(const NodeExpandVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_id().empty()) {
    volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_id(), 
      GetArena());
  }
  volume_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_path().empty()) {
    volume_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume_path(), 
      GetArena());
  }
  staging_target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_staging_target_path().empty()) {
    staging_target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staging_target_path(), 
      GetArena());
  }
  if (from._internal_has_capacity_range()) {
    capacity_range_ = new ::csi::v1::CapacityRange(*from.capacity_range_);
  } else {
    capacity_range_ = nullptr;
  }
  if (from._internal_has_volume_capability()) {
    volume_capability_ = new ::csi::v1::VolumeCapability(*from.volume_capability_);
  } else {
    volume_capability_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeExpandVolumeRequest)
}

void NodeExpandVolumeRequest::SharedCtor() {
volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
staging_target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&capacity_range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&volume_capability_) -
    reinterpret_cast<char*>(&capacity_range_)) + sizeof(volume_capability_));
}

NodeExpandVolumeRequest::~NodeExpandVolumeRequest() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeExpandVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeExpandVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staging_target_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capacity_range_;
  if (this != internal_default_instance()) delete volume_capability_;
}

void NodeExpandVolumeRequest::ArenaDtor(void* object) {
  NodeExpandVolumeRequest* _this = reinterpret_cast< NodeExpandVolumeRequest* >(object);
  (void)_this;
}
void NodeExpandVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExpandVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExpandVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeExpandVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_id_.ClearToEmpty();
  volume_path_.ClearToEmpty();
  staging_target_path_.ClearToEmpty();
  if (GetArena() == nullptr && capacity_range_ != nullptr) {
    delete capacity_range_;
  }
  capacity_range_ = nullptr;
  if (GetArena() == nullptr && volume_capability_ != nullptr) {
    delete volume_capability_;
  }
  volume_capability_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeExpandVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodeExpandVolumeRequest.volume_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_volume_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodeExpandVolumeRequest.volume_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.CapacityRange capacity_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_capacity_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string staging_target_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_staging_target_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "csi.v1.NodeExpandVolumeRequest.staging_target_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .csi.v1.VolumeCapability volume_capability = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume_capability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeExpandVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeExpandVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_id().data(), static_cast<int>(this->_internal_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodeExpandVolumeRequest.volume_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_volume_id(), target);
  }

  // string volume_path = 2;
  if (this->volume_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_path().data(), static_cast<int>(this->_internal_volume_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodeExpandVolumeRequest.volume_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume_path(), target);
  }

  // .csi.v1.CapacityRange capacity_range = 3;
  if (this->has_capacity_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::capacity_range(this), target, stream);
  }

  // string staging_target_path = 4;
  if (this->staging_target_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_staging_target_path().data(), static_cast<int>(this->_internal_staging_target_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "csi.v1.NodeExpandVolumeRequest.staging_target_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_staging_target_path(), target);
  }

  // .csi.v1.VolumeCapability volume_capability = 5;
  if (this->has_volume_capability()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::volume_capability(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeExpandVolumeRequest)
  return target;
}

size_t NodeExpandVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeExpandVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string volume_id = 1;
  if (this->volume_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_id());
  }

  // string volume_path = 2;
  if (this->volume_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_path());
  }

  // string staging_target_path = 4;
  if (this->staging_target_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_staging_target_path());
  }

  // .csi.v1.CapacityRange capacity_range = 3;
  if (this->has_capacity_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capacity_range_);
  }

  // .csi.v1.VolumeCapability volume_capability = 5;
  if (this->has_volume_capability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_capability_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeExpandVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeExpandVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExpandVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeExpandVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeExpandVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeExpandVolumeRequest)
    MergeFrom(*source);
  }
}

void NodeExpandVolumeRequest::MergeFrom(const NodeExpandVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeExpandVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.volume_id().size() > 0) {
    _internal_set_volume_id(from._internal_volume_id());
  }
  if (from.volume_path().size() > 0) {
    _internal_set_volume_path(from._internal_volume_path());
  }
  if (from.staging_target_path().size() > 0) {
    _internal_set_staging_target_path(from._internal_staging_target_path());
  }
  if (from.has_capacity_range()) {
    _internal_mutable_capacity_range()->::csi::v1::CapacityRange::MergeFrom(from._internal_capacity_range());
  }
  if (from.has_volume_capability()) {
    _internal_mutable_volume_capability()->::csi::v1::VolumeCapability::MergeFrom(from._internal_volume_capability());
  }
}

void NodeExpandVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeExpandVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExpandVolumeRequest::CopyFrom(const NodeExpandVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeExpandVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExpandVolumeRequest::IsInitialized() const {
  return true;
}

void NodeExpandVolumeRequest::InternalSwap(NodeExpandVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  volume_id_.Swap(&other->volume_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_path_.Swap(&other->volume_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  staging_target_path_.Swap(&other->staging_target_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeExpandVolumeRequest, volume_capability_)
      + sizeof(NodeExpandVolumeRequest::volume_capability_)
      - PROTOBUF_FIELD_OFFSET(NodeExpandVolumeRequest, capacity_range_)>(
          reinterpret_cast<char*>(&capacity_range_),
          reinterpret_cast<char*>(&other->capacity_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExpandVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeExpandVolumeResponse::_Internal {
 public:
};

NodeExpandVolumeResponse::NodeExpandVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:csi.v1.NodeExpandVolumeResponse)
}
NodeExpandVolumeResponse::NodeExpandVolumeResponse(const NodeExpandVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  capacity_bytes_ = from.capacity_bytes_;
  // @@protoc_insertion_point(copy_constructor:csi.v1.NodeExpandVolumeResponse)
}

void NodeExpandVolumeResponse::SharedCtor() {
capacity_bytes_ = PROTOBUF_LONGLONG(0);
}

NodeExpandVolumeResponse::~NodeExpandVolumeResponse() {
  // @@protoc_insertion_point(destructor:csi.v1.NodeExpandVolumeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeExpandVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeExpandVolumeResponse::ArenaDtor(void* object) {
  NodeExpandVolumeResponse* _this = reinterpret_cast< NodeExpandVolumeResponse* >(object);
  (void)_this;
}
void NodeExpandVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExpandVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExpandVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:csi.v1.NodeExpandVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capacity_bytes_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeExpandVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 capacity_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          capacity_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeExpandVolumeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csi.v1.NodeExpandVolumeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 capacity_bytes = 1;
  if (this->capacity_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_capacity_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csi.v1.NodeExpandVolumeResponse)
  return target;
}

size_t NodeExpandVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csi.v1.NodeExpandVolumeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 capacity_bytes = 1;
  if (this->capacity_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_capacity_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeExpandVolumeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csi.v1.NodeExpandVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExpandVolumeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeExpandVolumeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csi.v1.NodeExpandVolumeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csi.v1.NodeExpandVolumeResponse)
    MergeFrom(*source);
  }
}

void NodeExpandVolumeResponse::MergeFrom(const NodeExpandVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csi.v1.NodeExpandVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.capacity_bytes() != 0) {
    _internal_set_capacity_bytes(from._internal_capacity_bytes());
  }
}

void NodeExpandVolumeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csi.v1.NodeExpandVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExpandVolumeResponse::CopyFrom(const NodeExpandVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csi.v1.NodeExpandVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExpandVolumeResponse::IsInitialized() const {
  return true;
}

void NodeExpandVolumeResponse::InternalSwap(NodeExpandVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(capacity_bytes_, other->capacity_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExpandVolumeResponse::GetMetadata() const {
  return GetMetadataStatic();
}

PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::EnumOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  alpha_enum(kAlphaEnumFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  alpha_enum_value(kAlphaEnumValueFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  csi_secret(kCsiSecretFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  alpha_field(kAlphaFieldFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  alpha_message(kAlphaMessageFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  alpha_method(kAlphaMethodFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  alpha_service(kAlphaServiceFieldNumber, false);

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace csi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::csi::v1::GetPluginInfoRequest* Arena::CreateMaybeMessage< ::csi::v1::GetPluginInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::GetPluginInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::GetPluginInfoResponse_ManifestEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::GetPluginInfoResponse_ManifestEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::GetPluginInfoResponse_ManifestEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::GetPluginInfoResponse* Arena::CreateMaybeMessage< ::csi::v1::GetPluginInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::GetPluginInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::GetPluginCapabilitiesRequest* Arena::CreateMaybeMessage< ::csi::v1::GetPluginCapabilitiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::GetPluginCapabilitiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::GetPluginCapabilitiesResponse* Arena::CreateMaybeMessage< ::csi::v1::GetPluginCapabilitiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::GetPluginCapabilitiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::PluginCapability_Service* Arena::CreateMaybeMessage< ::csi::v1::PluginCapability_Service >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::PluginCapability_Service >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::PluginCapability_VolumeExpansion* Arena::CreateMaybeMessage< ::csi::v1::PluginCapability_VolumeExpansion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::PluginCapability_VolumeExpansion >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::PluginCapability* Arena::CreateMaybeMessage< ::csi::v1::PluginCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::PluginCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ProbeRequest* Arena::CreateMaybeMessage< ::csi::v1::ProbeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ProbeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ProbeResponse* Arena::CreateMaybeMessage< ::csi::v1::ProbeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ProbeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::CreateVolumeRequest_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::CreateVolumeRequest_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::CreateVolumeRequest_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::CreateVolumeRequest_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::CreateVolumeRequest_SecretsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::CreateVolumeRequest_SecretsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::CreateVolumeRequest* Arena::CreateMaybeMessage< ::csi::v1::CreateVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::CreateVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::VolumeContentSource_SnapshotSource* Arena::CreateMaybeMessage< ::csi::v1::VolumeContentSource_SnapshotSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::VolumeContentSource_SnapshotSource >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::VolumeContentSource_VolumeSource* Arena::CreateMaybeMessage< ::csi::v1::VolumeContentSource_VolumeSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::VolumeContentSource_VolumeSource >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::VolumeContentSource* Arena::CreateMaybeMessage< ::csi::v1::VolumeContentSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::VolumeContentSource >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::CreateVolumeResponse* Arena::CreateMaybeMessage< ::csi::v1::CreateVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::CreateVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::VolumeCapability_BlockVolume* Arena::CreateMaybeMessage< ::csi::v1::VolumeCapability_BlockVolume >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::VolumeCapability_BlockVolume >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::VolumeCapability_MountVolume* Arena::CreateMaybeMessage< ::csi::v1::VolumeCapability_MountVolume >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::VolumeCapability_MountVolume >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::VolumeCapability_AccessMode* Arena::CreateMaybeMessage< ::csi::v1::VolumeCapability_AccessMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::VolumeCapability_AccessMode >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::VolumeCapability* Arena::CreateMaybeMessage< ::csi::v1::VolumeCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::VolumeCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::CapacityRange* Arena::CreateMaybeMessage< ::csi::v1::CapacityRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::CapacityRange >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::Volume_VolumeContextEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::Volume_VolumeContextEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::Volume_VolumeContextEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::Volume* Arena::CreateMaybeMessage< ::csi::v1::Volume >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::Volume >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::TopologyRequirement* Arena::CreateMaybeMessage< ::csi::v1::TopologyRequirement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::TopologyRequirement >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::Topology_SegmentsEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::Topology_SegmentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::Topology_SegmentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::Topology* Arena::CreateMaybeMessage< ::csi::v1::Topology >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::Topology >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::DeleteVolumeRequest_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::DeleteVolumeRequest_SecretsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::DeleteVolumeRequest_SecretsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::DeleteVolumeRequest* Arena::CreateMaybeMessage< ::csi::v1::DeleteVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::DeleteVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::DeleteVolumeResponse* Arena::CreateMaybeMessage< ::csi::v1::DeleteVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::DeleteVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerPublishVolumeRequest_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::ControllerPublishVolumeRequest_SecretsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerPublishVolumeRequest_SecretsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerPublishVolumeRequest_VolumeContextEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerPublishVolumeRequest* Arena::CreateMaybeMessage< ::csi::v1::ControllerPublishVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerPublishVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerPublishVolumeResponse_PublishContextEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerPublishVolumeResponse* Arena::CreateMaybeMessage< ::csi::v1::ControllerPublishVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerPublishVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerUnpublishVolumeRequest_SecretsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerUnpublishVolumeRequest* Arena::CreateMaybeMessage< ::csi::v1::ControllerUnpublishVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerUnpublishVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerUnpublishVolumeResponse* Arena::CreateMaybeMessage< ::csi::v1::ControllerUnpublishVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerUnpublishVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ValidateVolumeCapabilitiesRequest_VolumeContextEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ValidateVolumeCapabilitiesRequest_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ValidateVolumeCapabilitiesRequest_SecretsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ValidateVolumeCapabilitiesRequest* Arena::CreateMaybeMessage< ::csi::v1::ValidateVolumeCapabilitiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ValidateVolumeCapabilitiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_VolumeContextEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed* Arena::CreateMaybeMessage< ::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ValidateVolumeCapabilitiesResponse_Confirmed >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ValidateVolumeCapabilitiesResponse* Arena::CreateMaybeMessage< ::csi::v1::ValidateVolumeCapabilitiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ValidateVolumeCapabilitiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ListVolumesRequest* Arena::CreateMaybeMessage< ::csi::v1::ListVolumesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ListVolumesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ListVolumesResponse_VolumeStatus* Arena::CreateMaybeMessage< ::csi::v1::ListVolumesResponse_VolumeStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ListVolumesResponse_VolumeStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ListVolumesResponse_Entry* Arena::CreateMaybeMessage< ::csi::v1::ListVolumesResponse_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ListVolumesResponse_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ListVolumesResponse* Arena::CreateMaybeMessage< ::csi::v1::ListVolumesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ListVolumesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerGetVolumeRequest* Arena::CreateMaybeMessage< ::csi::v1::ControllerGetVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerGetVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerGetVolumeResponse_VolumeStatus* Arena::CreateMaybeMessage< ::csi::v1::ControllerGetVolumeResponse_VolumeStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerGetVolumeResponse_VolumeStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerGetVolumeResponse* Arena::CreateMaybeMessage< ::csi::v1::ControllerGetVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerGetVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::GetCapacityRequest_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::GetCapacityRequest_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::GetCapacityRequest_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::GetCapacityRequest* Arena::CreateMaybeMessage< ::csi::v1::GetCapacityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::GetCapacityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::GetCapacityResponse* Arena::CreateMaybeMessage< ::csi::v1::GetCapacityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::GetCapacityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerGetCapabilitiesRequest* Arena::CreateMaybeMessage< ::csi::v1::ControllerGetCapabilitiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerGetCapabilitiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerGetCapabilitiesResponse* Arena::CreateMaybeMessage< ::csi::v1::ControllerGetCapabilitiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerGetCapabilitiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerServiceCapability_RPC* Arena::CreateMaybeMessage< ::csi::v1::ControllerServiceCapability_RPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerServiceCapability_RPC >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerServiceCapability* Arena::CreateMaybeMessage< ::csi::v1::ControllerServiceCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerServiceCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::CreateSnapshotRequest_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::CreateSnapshotRequest_SecretsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::CreateSnapshotRequest_SecretsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::CreateSnapshotRequest_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::CreateSnapshotRequest_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::CreateSnapshotRequest_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::CreateSnapshotRequest* Arena::CreateMaybeMessage< ::csi::v1::CreateSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::CreateSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::CreateSnapshotResponse* Arena::CreateMaybeMessage< ::csi::v1::CreateSnapshotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::CreateSnapshotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::Snapshot* Arena::CreateMaybeMessage< ::csi::v1::Snapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::Snapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::DeleteSnapshotRequest_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::DeleteSnapshotRequest_SecretsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::DeleteSnapshotRequest_SecretsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::DeleteSnapshotRequest* Arena::CreateMaybeMessage< ::csi::v1::DeleteSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::DeleteSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::DeleteSnapshotResponse* Arena::CreateMaybeMessage< ::csi::v1::DeleteSnapshotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::DeleteSnapshotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ListSnapshotsRequest_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::ListSnapshotsRequest_SecretsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ListSnapshotsRequest_SecretsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ListSnapshotsRequest* Arena::CreateMaybeMessage< ::csi::v1::ListSnapshotsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ListSnapshotsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ListSnapshotsResponse_Entry* Arena::CreateMaybeMessage< ::csi::v1::ListSnapshotsResponse_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ListSnapshotsResponse_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ListSnapshotsResponse* Arena::CreateMaybeMessage< ::csi::v1::ListSnapshotsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ListSnapshotsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerExpandVolumeRequest_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::ControllerExpandVolumeRequest_SecretsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerExpandVolumeRequest_SecretsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerExpandVolumeRequest* Arena::CreateMaybeMessage< ::csi::v1::ControllerExpandVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerExpandVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::ControllerExpandVolumeResponse* Arena::CreateMaybeMessage< ::csi::v1::ControllerExpandVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::ControllerExpandVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeStageVolumeRequest_PublishContextEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::NodeStageVolumeRequest_PublishContextEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeStageVolumeRequest_PublishContextEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeStageVolumeRequest_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::NodeStageVolumeRequest_SecretsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeStageVolumeRequest_SecretsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeStageVolumeRequest_VolumeContextEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::NodeStageVolumeRequest_VolumeContextEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeStageVolumeRequest_VolumeContextEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeStageVolumeRequest* Arena::CreateMaybeMessage< ::csi::v1::NodeStageVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeStageVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeStageVolumeResponse* Arena::CreateMaybeMessage< ::csi::v1::NodeStageVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeStageVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeUnstageVolumeRequest* Arena::CreateMaybeMessage< ::csi::v1::NodeUnstageVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeUnstageVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeUnstageVolumeResponse* Arena::CreateMaybeMessage< ::csi::v1::NodeUnstageVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeUnstageVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodePublishVolumeRequest_PublishContextEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::NodePublishVolumeRequest_PublishContextEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodePublishVolumeRequest_PublishContextEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodePublishVolumeRequest_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::NodePublishVolumeRequest_SecretsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodePublishVolumeRequest_SecretsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodePublishVolumeRequest_VolumeContextEntry_DoNotUse* Arena::CreateMaybeMessage< ::csi::v1::NodePublishVolumeRequest_VolumeContextEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodePublishVolumeRequest_VolumeContextEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodePublishVolumeRequest* Arena::CreateMaybeMessage< ::csi::v1::NodePublishVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodePublishVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodePublishVolumeResponse* Arena::CreateMaybeMessage< ::csi::v1::NodePublishVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodePublishVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeUnpublishVolumeRequest* Arena::CreateMaybeMessage< ::csi::v1::NodeUnpublishVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeUnpublishVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeUnpublishVolumeResponse* Arena::CreateMaybeMessage< ::csi::v1::NodeUnpublishVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeUnpublishVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeGetVolumeStatsRequest* Arena::CreateMaybeMessage< ::csi::v1::NodeGetVolumeStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeGetVolumeStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeGetVolumeStatsResponse* Arena::CreateMaybeMessage< ::csi::v1::NodeGetVolumeStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeGetVolumeStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::VolumeUsage* Arena::CreateMaybeMessage< ::csi::v1::VolumeUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::VolumeUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::VolumeCondition* Arena::CreateMaybeMessage< ::csi::v1::VolumeCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::VolumeCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeGetCapabilitiesRequest* Arena::CreateMaybeMessage< ::csi::v1::NodeGetCapabilitiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeGetCapabilitiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeGetCapabilitiesResponse* Arena::CreateMaybeMessage< ::csi::v1::NodeGetCapabilitiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeGetCapabilitiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeServiceCapability_RPC* Arena::CreateMaybeMessage< ::csi::v1::NodeServiceCapability_RPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeServiceCapability_RPC >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeServiceCapability* Arena::CreateMaybeMessage< ::csi::v1::NodeServiceCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeServiceCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeGetInfoRequest* Arena::CreateMaybeMessage< ::csi::v1::NodeGetInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeGetInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeGetInfoResponse* Arena::CreateMaybeMessage< ::csi::v1::NodeGetInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeGetInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeExpandVolumeRequest* Arena::CreateMaybeMessage< ::csi::v1::NodeExpandVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeExpandVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csi::v1::NodeExpandVolumeResponse* Arena::CreateMaybeMessage< ::csi::v1::NodeExpandVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csi::v1::NodeExpandVolumeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
