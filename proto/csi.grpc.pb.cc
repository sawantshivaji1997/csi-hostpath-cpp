// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: csi.proto

#include "csi.pb.h"
#include "csi.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace csi {
namespace v1 {

static const char* Identity_method_names[] = {
  "/csi.v1.Identity/GetPluginInfo",
  "/csi.v1.Identity/GetPluginCapabilities",
  "/csi.v1.Identity/Probe",
};

std::unique_ptr< Identity::Stub> Identity::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Identity::Stub> stub(new Identity::Stub(channel));
  return stub;
}

Identity::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetPluginInfo_(Identity_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPluginCapabilities_(Identity_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Probe_(Identity_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Identity::Stub::GetPluginInfo(::grpc::ClientContext* context, const ::csi::v1::GetPluginInfoRequest& request, ::csi::v1::GetPluginInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPluginInfo_, context, request, response);
}

void Identity::Stub::experimental_async::GetPluginInfo(::grpc::ClientContext* context, const ::csi::v1::GetPluginInfoRequest* request, ::csi::v1::GetPluginInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPluginInfo_, context, request, response, std::move(f));
}

void Identity::Stub::experimental_async::GetPluginInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::GetPluginInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPluginInfo_, context, request, response, std::move(f));
}

void Identity::Stub::experimental_async::GetPluginInfo(::grpc::ClientContext* context, const ::csi::v1::GetPluginInfoRequest* request, ::csi::v1::GetPluginInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPluginInfo_, context, request, response, reactor);
}

void Identity::Stub::experimental_async::GetPluginInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::GetPluginInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPluginInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::GetPluginInfoResponse>* Identity::Stub::AsyncGetPluginInfoRaw(::grpc::ClientContext* context, const ::csi::v1::GetPluginInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::GetPluginInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetPluginInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::GetPluginInfoResponse>* Identity::Stub::PrepareAsyncGetPluginInfoRaw(::grpc::ClientContext* context, const ::csi::v1::GetPluginInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::GetPluginInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetPluginInfo_, context, request, false);
}

::grpc::Status Identity::Stub::GetPluginCapabilities(::grpc::ClientContext* context, const ::csi::v1::GetPluginCapabilitiesRequest& request, ::csi::v1::GetPluginCapabilitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPluginCapabilities_, context, request, response);
}

void Identity::Stub::experimental_async::GetPluginCapabilities(::grpc::ClientContext* context, const ::csi::v1::GetPluginCapabilitiesRequest* request, ::csi::v1::GetPluginCapabilitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPluginCapabilities_, context, request, response, std::move(f));
}

void Identity::Stub::experimental_async::GetPluginCapabilities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::GetPluginCapabilitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPluginCapabilities_, context, request, response, std::move(f));
}

void Identity::Stub::experimental_async::GetPluginCapabilities(::grpc::ClientContext* context, const ::csi::v1::GetPluginCapabilitiesRequest* request, ::csi::v1::GetPluginCapabilitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPluginCapabilities_, context, request, response, reactor);
}

void Identity::Stub::experimental_async::GetPluginCapabilities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::GetPluginCapabilitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPluginCapabilities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::GetPluginCapabilitiesResponse>* Identity::Stub::AsyncGetPluginCapabilitiesRaw(::grpc::ClientContext* context, const ::csi::v1::GetPluginCapabilitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::GetPluginCapabilitiesResponse>::Create(channel_.get(), cq, rpcmethod_GetPluginCapabilities_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::GetPluginCapabilitiesResponse>* Identity::Stub::PrepareAsyncGetPluginCapabilitiesRaw(::grpc::ClientContext* context, const ::csi::v1::GetPluginCapabilitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::GetPluginCapabilitiesResponse>::Create(channel_.get(), cq, rpcmethod_GetPluginCapabilities_, context, request, false);
}

::grpc::Status Identity::Stub::Probe(::grpc::ClientContext* context, const ::csi::v1::ProbeRequest& request, ::csi::v1::ProbeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Probe_, context, request, response);
}

void Identity::Stub::experimental_async::Probe(::grpc::ClientContext* context, const ::csi::v1::ProbeRequest* request, ::csi::v1::ProbeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Probe_, context, request, response, std::move(f));
}

void Identity::Stub::experimental_async::Probe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ProbeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Probe_, context, request, response, std::move(f));
}

void Identity::Stub::experimental_async::Probe(::grpc::ClientContext* context, const ::csi::v1::ProbeRequest* request, ::csi::v1::ProbeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Probe_, context, request, response, reactor);
}

void Identity::Stub::experimental_async::Probe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ProbeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Probe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ProbeResponse>* Identity::Stub::AsyncProbeRaw(::grpc::ClientContext* context, const ::csi::v1::ProbeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ProbeResponse>::Create(channel_.get(), cq, rpcmethod_Probe_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ProbeResponse>* Identity::Stub::PrepareAsyncProbeRaw(::grpc::ClientContext* context, const ::csi::v1::ProbeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ProbeResponse>::Create(channel_.get(), cq, rpcmethod_Probe_, context, request, false);
}

Identity::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Identity_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Identity::Service, ::csi::v1::GetPluginInfoRequest, ::csi::v1::GetPluginInfoResponse>(
          [](Identity::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::GetPluginInfoRequest* req,
             ::csi::v1::GetPluginInfoResponse* resp) {
               return service->GetPluginInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Identity_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Identity::Service, ::csi::v1::GetPluginCapabilitiesRequest, ::csi::v1::GetPluginCapabilitiesResponse>(
          [](Identity::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::GetPluginCapabilitiesRequest* req,
             ::csi::v1::GetPluginCapabilitiesResponse* resp) {
               return service->GetPluginCapabilities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Identity_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Identity::Service, ::csi::v1::ProbeRequest, ::csi::v1::ProbeResponse>(
          [](Identity::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::ProbeRequest* req,
             ::csi::v1::ProbeResponse* resp) {
               return service->Probe(ctx, req, resp);
             }, this)));
}

Identity::Service::~Service() {
}

::grpc::Status Identity::Service::GetPluginInfo(::grpc::ServerContext* context, const ::csi::v1::GetPluginInfoRequest* request, ::csi::v1::GetPluginInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Identity::Service::GetPluginCapabilities(::grpc::ServerContext* context, const ::csi::v1::GetPluginCapabilitiesRequest* request, ::csi::v1::GetPluginCapabilitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Identity::Service::Probe(::grpc::ServerContext* context, const ::csi::v1::ProbeRequest* request, ::csi::v1::ProbeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Controller_method_names[] = {
  "/csi.v1.Controller/CreateVolume",
  "/csi.v1.Controller/DeleteVolume",
  "/csi.v1.Controller/ControllerPublishVolume",
  "/csi.v1.Controller/ControllerUnpublishVolume",
  "/csi.v1.Controller/ValidateVolumeCapabilities",
  "/csi.v1.Controller/ListVolumes",
  "/csi.v1.Controller/GetCapacity",
  "/csi.v1.Controller/ControllerGetCapabilities",
  "/csi.v1.Controller/CreateSnapshot",
  "/csi.v1.Controller/DeleteSnapshot",
  "/csi.v1.Controller/ListSnapshots",
  "/csi.v1.Controller/ControllerExpandVolume",
  "/csi.v1.Controller/ControllerGetVolume",
};

std::unique_ptr< Controller::Stub> Controller::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Controller::Stub> stub(new Controller::Stub(channel));
  return stub;
}

Controller::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateVolume_(Controller_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteVolume_(Controller_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ControllerPublishVolume_(Controller_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ControllerUnpublishVolume_(Controller_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateVolumeCapabilities_(Controller_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListVolumes_(Controller_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCapacity_(Controller_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ControllerGetCapabilities_(Controller_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSnapshot_(Controller_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSnapshot_(Controller_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSnapshots_(Controller_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ControllerExpandVolume_(Controller_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ControllerGetVolume_(Controller_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Controller::Stub::CreateVolume(::grpc::ClientContext* context, const ::csi::v1::CreateVolumeRequest& request, ::csi::v1::CreateVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateVolume_, context, request, response);
}

void Controller::Stub::experimental_async::CreateVolume(::grpc::ClientContext* context, const ::csi::v1::CreateVolumeRequest* request, ::csi::v1::CreateVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateVolume_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::CreateVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::CreateVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateVolume_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::CreateVolume(::grpc::ClientContext* context, const ::csi::v1::CreateVolumeRequest* request, ::csi::v1::CreateVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateVolume_, context, request, response, reactor);
}

void Controller::Stub::experimental_async::CreateVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::CreateVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::CreateVolumeResponse>* Controller::Stub::AsyncCreateVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::CreateVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::CreateVolumeResponse>::Create(channel_.get(), cq, rpcmethod_CreateVolume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::CreateVolumeResponse>* Controller::Stub::PrepareAsyncCreateVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::CreateVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::CreateVolumeResponse>::Create(channel_.get(), cq, rpcmethod_CreateVolume_, context, request, false);
}

::grpc::Status Controller::Stub::DeleteVolume(::grpc::ClientContext* context, const ::csi::v1::DeleteVolumeRequest& request, ::csi::v1::DeleteVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteVolume_, context, request, response);
}

void Controller::Stub::experimental_async::DeleteVolume(::grpc::ClientContext* context, const ::csi::v1::DeleteVolumeRequest* request, ::csi::v1::DeleteVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteVolume_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::DeleteVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::DeleteVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteVolume_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::DeleteVolume(::grpc::ClientContext* context, const ::csi::v1::DeleteVolumeRequest* request, ::csi::v1::DeleteVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteVolume_, context, request, response, reactor);
}

void Controller::Stub::experimental_async::DeleteVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::DeleteVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::DeleteVolumeResponse>* Controller::Stub::AsyncDeleteVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::DeleteVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::DeleteVolumeResponse>::Create(channel_.get(), cq, rpcmethod_DeleteVolume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::DeleteVolumeResponse>* Controller::Stub::PrepareAsyncDeleteVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::DeleteVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::DeleteVolumeResponse>::Create(channel_.get(), cq, rpcmethod_DeleteVolume_, context, request, false);
}

::grpc::Status Controller::Stub::ControllerPublishVolume(::grpc::ClientContext* context, const ::csi::v1::ControllerPublishVolumeRequest& request, ::csi::v1::ControllerPublishVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ControllerPublishVolume_, context, request, response);
}

void Controller::Stub::experimental_async::ControllerPublishVolume(::grpc::ClientContext* context, const ::csi::v1::ControllerPublishVolumeRequest* request, ::csi::v1::ControllerPublishVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ControllerPublishVolume_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ControllerPublishVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ControllerPublishVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ControllerPublishVolume_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ControllerPublishVolume(::grpc::ClientContext* context, const ::csi::v1::ControllerPublishVolumeRequest* request, ::csi::v1::ControllerPublishVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ControllerPublishVolume_, context, request, response, reactor);
}

void Controller::Stub::experimental_async::ControllerPublishVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ControllerPublishVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ControllerPublishVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ControllerPublishVolumeResponse>* Controller::Stub::AsyncControllerPublishVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::ControllerPublishVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ControllerPublishVolumeResponse>::Create(channel_.get(), cq, rpcmethod_ControllerPublishVolume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ControllerPublishVolumeResponse>* Controller::Stub::PrepareAsyncControllerPublishVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::ControllerPublishVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ControllerPublishVolumeResponse>::Create(channel_.get(), cq, rpcmethod_ControllerPublishVolume_, context, request, false);
}

::grpc::Status Controller::Stub::ControllerUnpublishVolume(::grpc::ClientContext* context, const ::csi::v1::ControllerUnpublishVolumeRequest& request, ::csi::v1::ControllerUnpublishVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ControllerUnpublishVolume_, context, request, response);
}

void Controller::Stub::experimental_async::ControllerUnpublishVolume(::grpc::ClientContext* context, const ::csi::v1::ControllerUnpublishVolumeRequest* request, ::csi::v1::ControllerUnpublishVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ControllerUnpublishVolume_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ControllerUnpublishVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ControllerUnpublishVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ControllerUnpublishVolume_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ControllerUnpublishVolume(::grpc::ClientContext* context, const ::csi::v1::ControllerUnpublishVolumeRequest* request, ::csi::v1::ControllerUnpublishVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ControllerUnpublishVolume_, context, request, response, reactor);
}

void Controller::Stub::experimental_async::ControllerUnpublishVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ControllerUnpublishVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ControllerUnpublishVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ControllerUnpublishVolumeResponse>* Controller::Stub::AsyncControllerUnpublishVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::ControllerUnpublishVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ControllerUnpublishVolumeResponse>::Create(channel_.get(), cq, rpcmethod_ControllerUnpublishVolume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ControllerUnpublishVolumeResponse>* Controller::Stub::PrepareAsyncControllerUnpublishVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::ControllerUnpublishVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ControllerUnpublishVolumeResponse>::Create(channel_.get(), cq, rpcmethod_ControllerUnpublishVolume_, context, request, false);
}

::grpc::Status Controller::Stub::ValidateVolumeCapabilities(::grpc::ClientContext* context, const ::csi::v1::ValidateVolumeCapabilitiesRequest& request, ::csi::v1::ValidateVolumeCapabilitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ValidateVolumeCapabilities_, context, request, response);
}

void Controller::Stub::experimental_async::ValidateVolumeCapabilities(::grpc::ClientContext* context, const ::csi::v1::ValidateVolumeCapabilitiesRequest* request, ::csi::v1::ValidateVolumeCapabilitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidateVolumeCapabilities_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ValidateVolumeCapabilities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ValidateVolumeCapabilitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidateVolumeCapabilities_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ValidateVolumeCapabilities(::grpc::ClientContext* context, const ::csi::v1::ValidateVolumeCapabilitiesRequest* request, ::csi::v1::ValidateVolumeCapabilitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidateVolumeCapabilities_, context, request, response, reactor);
}

void Controller::Stub::experimental_async::ValidateVolumeCapabilities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ValidateVolumeCapabilitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidateVolumeCapabilities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ValidateVolumeCapabilitiesResponse>* Controller::Stub::AsyncValidateVolumeCapabilitiesRaw(::grpc::ClientContext* context, const ::csi::v1::ValidateVolumeCapabilitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ValidateVolumeCapabilitiesResponse>::Create(channel_.get(), cq, rpcmethod_ValidateVolumeCapabilities_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ValidateVolumeCapabilitiesResponse>* Controller::Stub::PrepareAsyncValidateVolumeCapabilitiesRaw(::grpc::ClientContext* context, const ::csi::v1::ValidateVolumeCapabilitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ValidateVolumeCapabilitiesResponse>::Create(channel_.get(), cq, rpcmethod_ValidateVolumeCapabilities_, context, request, false);
}

::grpc::Status Controller::Stub::ListVolumes(::grpc::ClientContext* context, const ::csi::v1::ListVolumesRequest& request, ::csi::v1::ListVolumesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListVolumes_, context, request, response);
}

void Controller::Stub::experimental_async::ListVolumes(::grpc::ClientContext* context, const ::csi::v1::ListVolumesRequest* request, ::csi::v1::ListVolumesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListVolumes_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ListVolumes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ListVolumesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListVolumes_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ListVolumes(::grpc::ClientContext* context, const ::csi::v1::ListVolumesRequest* request, ::csi::v1::ListVolumesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListVolumes_, context, request, response, reactor);
}

void Controller::Stub::experimental_async::ListVolumes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ListVolumesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListVolumes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ListVolumesResponse>* Controller::Stub::AsyncListVolumesRaw(::grpc::ClientContext* context, const ::csi::v1::ListVolumesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ListVolumesResponse>::Create(channel_.get(), cq, rpcmethod_ListVolumes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ListVolumesResponse>* Controller::Stub::PrepareAsyncListVolumesRaw(::grpc::ClientContext* context, const ::csi::v1::ListVolumesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ListVolumesResponse>::Create(channel_.get(), cq, rpcmethod_ListVolumes_, context, request, false);
}

::grpc::Status Controller::Stub::GetCapacity(::grpc::ClientContext* context, const ::csi::v1::GetCapacityRequest& request, ::csi::v1::GetCapacityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCapacity_, context, request, response);
}

void Controller::Stub::experimental_async::GetCapacity(::grpc::ClientContext* context, const ::csi::v1::GetCapacityRequest* request, ::csi::v1::GetCapacityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCapacity_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::GetCapacity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::GetCapacityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCapacity_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::GetCapacity(::grpc::ClientContext* context, const ::csi::v1::GetCapacityRequest* request, ::csi::v1::GetCapacityResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCapacity_, context, request, response, reactor);
}

void Controller::Stub::experimental_async::GetCapacity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::GetCapacityResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCapacity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::GetCapacityResponse>* Controller::Stub::AsyncGetCapacityRaw(::grpc::ClientContext* context, const ::csi::v1::GetCapacityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::GetCapacityResponse>::Create(channel_.get(), cq, rpcmethod_GetCapacity_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::GetCapacityResponse>* Controller::Stub::PrepareAsyncGetCapacityRaw(::grpc::ClientContext* context, const ::csi::v1::GetCapacityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::GetCapacityResponse>::Create(channel_.get(), cq, rpcmethod_GetCapacity_, context, request, false);
}

::grpc::Status Controller::Stub::ControllerGetCapabilities(::grpc::ClientContext* context, const ::csi::v1::ControllerGetCapabilitiesRequest& request, ::csi::v1::ControllerGetCapabilitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ControllerGetCapabilities_, context, request, response);
}

void Controller::Stub::experimental_async::ControllerGetCapabilities(::grpc::ClientContext* context, const ::csi::v1::ControllerGetCapabilitiesRequest* request, ::csi::v1::ControllerGetCapabilitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ControllerGetCapabilities_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ControllerGetCapabilities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ControllerGetCapabilitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ControllerGetCapabilities_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ControllerGetCapabilities(::grpc::ClientContext* context, const ::csi::v1::ControllerGetCapabilitiesRequest* request, ::csi::v1::ControllerGetCapabilitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ControllerGetCapabilities_, context, request, response, reactor);
}

void Controller::Stub::experimental_async::ControllerGetCapabilities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ControllerGetCapabilitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ControllerGetCapabilities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ControllerGetCapabilitiesResponse>* Controller::Stub::AsyncControllerGetCapabilitiesRaw(::grpc::ClientContext* context, const ::csi::v1::ControllerGetCapabilitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ControllerGetCapabilitiesResponse>::Create(channel_.get(), cq, rpcmethod_ControllerGetCapabilities_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ControllerGetCapabilitiesResponse>* Controller::Stub::PrepareAsyncControllerGetCapabilitiesRaw(::grpc::ClientContext* context, const ::csi::v1::ControllerGetCapabilitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ControllerGetCapabilitiesResponse>::Create(channel_.get(), cq, rpcmethod_ControllerGetCapabilities_, context, request, false);
}

::grpc::Status Controller::Stub::CreateSnapshot(::grpc::ClientContext* context, const ::csi::v1::CreateSnapshotRequest& request, ::csi::v1::CreateSnapshotResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateSnapshot_, context, request, response);
}

void Controller::Stub::experimental_async::CreateSnapshot(::grpc::ClientContext* context, const ::csi::v1::CreateSnapshotRequest* request, ::csi::v1::CreateSnapshotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateSnapshot_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::CreateSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::CreateSnapshotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateSnapshot_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::CreateSnapshot(::grpc::ClientContext* context, const ::csi::v1::CreateSnapshotRequest* request, ::csi::v1::CreateSnapshotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateSnapshot_, context, request, response, reactor);
}

void Controller::Stub::experimental_async::CreateSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::CreateSnapshotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateSnapshot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::CreateSnapshotResponse>* Controller::Stub::AsyncCreateSnapshotRaw(::grpc::ClientContext* context, const ::csi::v1::CreateSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::CreateSnapshotResponse>::Create(channel_.get(), cq, rpcmethod_CreateSnapshot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::CreateSnapshotResponse>* Controller::Stub::PrepareAsyncCreateSnapshotRaw(::grpc::ClientContext* context, const ::csi::v1::CreateSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::CreateSnapshotResponse>::Create(channel_.get(), cq, rpcmethod_CreateSnapshot_, context, request, false);
}

::grpc::Status Controller::Stub::DeleteSnapshot(::grpc::ClientContext* context, const ::csi::v1::DeleteSnapshotRequest& request, ::csi::v1::DeleteSnapshotResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteSnapshot_, context, request, response);
}

void Controller::Stub::experimental_async::DeleteSnapshot(::grpc::ClientContext* context, const ::csi::v1::DeleteSnapshotRequest* request, ::csi::v1::DeleteSnapshotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteSnapshot_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::DeleteSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::DeleteSnapshotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteSnapshot_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::DeleteSnapshot(::grpc::ClientContext* context, const ::csi::v1::DeleteSnapshotRequest* request, ::csi::v1::DeleteSnapshotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteSnapshot_, context, request, response, reactor);
}

void Controller::Stub::experimental_async::DeleteSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::DeleteSnapshotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteSnapshot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::DeleteSnapshotResponse>* Controller::Stub::AsyncDeleteSnapshotRaw(::grpc::ClientContext* context, const ::csi::v1::DeleteSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::DeleteSnapshotResponse>::Create(channel_.get(), cq, rpcmethod_DeleteSnapshot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::DeleteSnapshotResponse>* Controller::Stub::PrepareAsyncDeleteSnapshotRaw(::grpc::ClientContext* context, const ::csi::v1::DeleteSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::DeleteSnapshotResponse>::Create(channel_.get(), cq, rpcmethod_DeleteSnapshot_, context, request, false);
}

::grpc::Status Controller::Stub::ListSnapshots(::grpc::ClientContext* context, const ::csi::v1::ListSnapshotsRequest& request, ::csi::v1::ListSnapshotsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListSnapshots_, context, request, response);
}

void Controller::Stub::experimental_async::ListSnapshots(::grpc::ClientContext* context, const ::csi::v1::ListSnapshotsRequest* request, ::csi::v1::ListSnapshotsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListSnapshots_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ListSnapshots(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ListSnapshotsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListSnapshots_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ListSnapshots(::grpc::ClientContext* context, const ::csi::v1::ListSnapshotsRequest* request, ::csi::v1::ListSnapshotsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListSnapshots_, context, request, response, reactor);
}

void Controller::Stub::experimental_async::ListSnapshots(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ListSnapshotsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListSnapshots_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ListSnapshotsResponse>* Controller::Stub::AsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::csi::v1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ListSnapshotsResponse>::Create(channel_.get(), cq, rpcmethod_ListSnapshots_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ListSnapshotsResponse>* Controller::Stub::PrepareAsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::csi::v1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ListSnapshotsResponse>::Create(channel_.get(), cq, rpcmethod_ListSnapshots_, context, request, false);
}

::grpc::Status Controller::Stub::ControllerExpandVolume(::grpc::ClientContext* context, const ::csi::v1::ControllerExpandVolumeRequest& request, ::csi::v1::ControllerExpandVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ControllerExpandVolume_, context, request, response);
}

void Controller::Stub::experimental_async::ControllerExpandVolume(::grpc::ClientContext* context, const ::csi::v1::ControllerExpandVolumeRequest* request, ::csi::v1::ControllerExpandVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ControllerExpandVolume_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ControllerExpandVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ControllerExpandVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ControllerExpandVolume_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ControllerExpandVolume(::grpc::ClientContext* context, const ::csi::v1::ControllerExpandVolumeRequest* request, ::csi::v1::ControllerExpandVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ControllerExpandVolume_, context, request, response, reactor);
}

void Controller::Stub::experimental_async::ControllerExpandVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ControllerExpandVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ControllerExpandVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ControllerExpandVolumeResponse>* Controller::Stub::AsyncControllerExpandVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::ControllerExpandVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ControllerExpandVolumeResponse>::Create(channel_.get(), cq, rpcmethod_ControllerExpandVolume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ControllerExpandVolumeResponse>* Controller::Stub::PrepareAsyncControllerExpandVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::ControllerExpandVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ControllerExpandVolumeResponse>::Create(channel_.get(), cq, rpcmethod_ControllerExpandVolume_, context, request, false);
}

::grpc::Status Controller::Stub::ControllerGetVolume(::grpc::ClientContext* context, const ::csi::v1::ControllerGetVolumeRequest& request, ::csi::v1::ControllerGetVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ControllerGetVolume_, context, request, response);
}

void Controller::Stub::experimental_async::ControllerGetVolume(::grpc::ClientContext* context, const ::csi::v1::ControllerGetVolumeRequest* request, ::csi::v1::ControllerGetVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ControllerGetVolume_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ControllerGetVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ControllerGetVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ControllerGetVolume_, context, request, response, std::move(f));
}

void Controller::Stub::experimental_async::ControllerGetVolume(::grpc::ClientContext* context, const ::csi::v1::ControllerGetVolumeRequest* request, ::csi::v1::ControllerGetVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ControllerGetVolume_, context, request, response, reactor);
}

void Controller::Stub::experimental_async::ControllerGetVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::ControllerGetVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ControllerGetVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ControllerGetVolumeResponse>* Controller::Stub::AsyncControllerGetVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::ControllerGetVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ControllerGetVolumeResponse>::Create(channel_.get(), cq, rpcmethod_ControllerGetVolume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::ControllerGetVolumeResponse>* Controller::Stub::PrepareAsyncControllerGetVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::ControllerGetVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::ControllerGetVolumeResponse>::Create(channel_.get(), cq, rpcmethod_ControllerGetVolume_, context, request, false);
}

Controller::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::csi::v1::CreateVolumeRequest, ::csi::v1::CreateVolumeResponse>(
          [](Controller::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::CreateVolumeRequest* req,
             ::csi::v1::CreateVolumeResponse* resp) {
               return service->CreateVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::csi::v1::DeleteVolumeRequest, ::csi::v1::DeleteVolumeResponse>(
          [](Controller::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::DeleteVolumeRequest* req,
             ::csi::v1::DeleteVolumeResponse* resp) {
               return service->DeleteVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::csi::v1::ControllerPublishVolumeRequest, ::csi::v1::ControllerPublishVolumeResponse>(
          [](Controller::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::ControllerPublishVolumeRequest* req,
             ::csi::v1::ControllerPublishVolumeResponse* resp) {
               return service->ControllerPublishVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::csi::v1::ControllerUnpublishVolumeRequest, ::csi::v1::ControllerUnpublishVolumeResponse>(
          [](Controller::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::ControllerUnpublishVolumeRequest* req,
             ::csi::v1::ControllerUnpublishVolumeResponse* resp) {
               return service->ControllerUnpublishVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::csi::v1::ValidateVolumeCapabilitiesRequest, ::csi::v1::ValidateVolumeCapabilitiesResponse>(
          [](Controller::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::ValidateVolumeCapabilitiesRequest* req,
             ::csi::v1::ValidateVolumeCapabilitiesResponse* resp) {
               return service->ValidateVolumeCapabilities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::csi::v1::ListVolumesRequest, ::csi::v1::ListVolumesResponse>(
          [](Controller::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::ListVolumesRequest* req,
             ::csi::v1::ListVolumesResponse* resp) {
               return service->ListVolumes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::csi::v1::GetCapacityRequest, ::csi::v1::GetCapacityResponse>(
          [](Controller::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::GetCapacityRequest* req,
             ::csi::v1::GetCapacityResponse* resp) {
               return service->GetCapacity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::csi::v1::ControllerGetCapabilitiesRequest, ::csi::v1::ControllerGetCapabilitiesResponse>(
          [](Controller::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::ControllerGetCapabilitiesRequest* req,
             ::csi::v1::ControllerGetCapabilitiesResponse* resp) {
               return service->ControllerGetCapabilities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::csi::v1::CreateSnapshotRequest, ::csi::v1::CreateSnapshotResponse>(
          [](Controller::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::CreateSnapshotRequest* req,
             ::csi::v1::CreateSnapshotResponse* resp) {
               return service->CreateSnapshot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::csi::v1::DeleteSnapshotRequest, ::csi::v1::DeleteSnapshotResponse>(
          [](Controller::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::DeleteSnapshotRequest* req,
             ::csi::v1::DeleteSnapshotResponse* resp) {
               return service->DeleteSnapshot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::csi::v1::ListSnapshotsRequest, ::csi::v1::ListSnapshotsResponse>(
          [](Controller::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::ListSnapshotsRequest* req,
             ::csi::v1::ListSnapshotsResponse* resp) {
               return service->ListSnapshots(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::csi::v1::ControllerExpandVolumeRequest, ::csi::v1::ControllerExpandVolumeResponse>(
          [](Controller::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::ControllerExpandVolumeRequest* req,
             ::csi::v1::ControllerExpandVolumeResponse* resp) {
               return service->ControllerExpandVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::csi::v1::ControllerGetVolumeRequest, ::csi::v1::ControllerGetVolumeResponse>(
          [](Controller::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::ControllerGetVolumeRequest* req,
             ::csi::v1::ControllerGetVolumeResponse* resp) {
               return service->ControllerGetVolume(ctx, req, resp);
             }, this)));
}

Controller::Service::~Service() {
}

::grpc::Status Controller::Service::CreateVolume(::grpc::ServerContext* context, const ::csi::v1::CreateVolumeRequest* request, ::csi::v1::CreateVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::DeleteVolume(::grpc::ServerContext* context, const ::csi::v1::DeleteVolumeRequest* request, ::csi::v1::DeleteVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::ControllerPublishVolume(::grpc::ServerContext* context, const ::csi::v1::ControllerPublishVolumeRequest* request, ::csi::v1::ControllerPublishVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::ControllerUnpublishVolume(::grpc::ServerContext* context, const ::csi::v1::ControllerUnpublishVolumeRequest* request, ::csi::v1::ControllerUnpublishVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::ValidateVolumeCapabilities(::grpc::ServerContext* context, const ::csi::v1::ValidateVolumeCapabilitiesRequest* request, ::csi::v1::ValidateVolumeCapabilitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::ListVolumes(::grpc::ServerContext* context, const ::csi::v1::ListVolumesRequest* request, ::csi::v1::ListVolumesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::GetCapacity(::grpc::ServerContext* context, const ::csi::v1::GetCapacityRequest* request, ::csi::v1::GetCapacityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::ControllerGetCapabilities(::grpc::ServerContext* context, const ::csi::v1::ControllerGetCapabilitiesRequest* request, ::csi::v1::ControllerGetCapabilitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::CreateSnapshot(::grpc::ServerContext* context, const ::csi::v1::CreateSnapshotRequest* request, ::csi::v1::CreateSnapshotResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::DeleteSnapshot(::grpc::ServerContext* context, const ::csi::v1::DeleteSnapshotRequest* request, ::csi::v1::DeleteSnapshotResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::ListSnapshots(::grpc::ServerContext* context, const ::csi::v1::ListSnapshotsRequest* request, ::csi::v1::ListSnapshotsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::ControllerExpandVolume(::grpc::ServerContext* context, const ::csi::v1::ControllerExpandVolumeRequest* request, ::csi::v1::ControllerExpandVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::ControllerGetVolume(::grpc::ServerContext* context, const ::csi::v1::ControllerGetVolumeRequest* request, ::csi::v1::ControllerGetVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Node_method_names[] = {
  "/csi.v1.Node/NodeStageVolume",
  "/csi.v1.Node/NodeUnstageVolume",
  "/csi.v1.Node/NodePublishVolume",
  "/csi.v1.Node/NodeUnpublishVolume",
  "/csi.v1.Node/NodeGetVolumeStats",
  "/csi.v1.Node/NodeExpandVolume",
  "/csi.v1.Node/NodeGetCapabilities",
  "/csi.v1.Node/NodeGetInfo",
};

std::unique_ptr< Node::Stub> Node::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Node::Stub> stub(new Node::Stub(channel));
  return stub;
}

Node::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_NodeStageVolume_(Node_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NodeUnstageVolume_(Node_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NodePublishVolume_(Node_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NodeUnpublishVolume_(Node_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NodeGetVolumeStats_(Node_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NodeExpandVolume_(Node_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NodeGetCapabilities_(Node_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NodeGetInfo_(Node_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Node::Stub::NodeStageVolume(::grpc::ClientContext* context, const ::csi::v1::NodeStageVolumeRequest& request, ::csi::v1::NodeStageVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NodeStageVolume_, context, request, response);
}

void Node::Stub::experimental_async::NodeStageVolume(::grpc::ClientContext* context, const ::csi::v1::NodeStageVolumeRequest* request, ::csi::v1::NodeStageVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodeStageVolume_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodeStageVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodeStageVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodeStageVolume_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodeStageVolume(::grpc::ClientContext* context, const ::csi::v1::NodeStageVolumeRequest* request, ::csi::v1::NodeStageVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodeStageVolume_, context, request, response, reactor);
}

void Node::Stub::experimental_async::NodeStageVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodeStageVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodeStageVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodeStageVolumeResponse>* Node::Stub::AsyncNodeStageVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::NodeStageVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodeStageVolumeResponse>::Create(channel_.get(), cq, rpcmethod_NodeStageVolume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodeStageVolumeResponse>* Node::Stub::PrepareAsyncNodeStageVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::NodeStageVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodeStageVolumeResponse>::Create(channel_.get(), cq, rpcmethod_NodeStageVolume_, context, request, false);
}

::grpc::Status Node::Stub::NodeUnstageVolume(::grpc::ClientContext* context, const ::csi::v1::NodeUnstageVolumeRequest& request, ::csi::v1::NodeUnstageVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NodeUnstageVolume_, context, request, response);
}

void Node::Stub::experimental_async::NodeUnstageVolume(::grpc::ClientContext* context, const ::csi::v1::NodeUnstageVolumeRequest* request, ::csi::v1::NodeUnstageVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodeUnstageVolume_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodeUnstageVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodeUnstageVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodeUnstageVolume_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodeUnstageVolume(::grpc::ClientContext* context, const ::csi::v1::NodeUnstageVolumeRequest* request, ::csi::v1::NodeUnstageVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodeUnstageVolume_, context, request, response, reactor);
}

void Node::Stub::experimental_async::NodeUnstageVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodeUnstageVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodeUnstageVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodeUnstageVolumeResponse>* Node::Stub::AsyncNodeUnstageVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::NodeUnstageVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodeUnstageVolumeResponse>::Create(channel_.get(), cq, rpcmethod_NodeUnstageVolume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodeUnstageVolumeResponse>* Node::Stub::PrepareAsyncNodeUnstageVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::NodeUnstageVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodeUnstageVolumeResponse>::Create(channel_.get(), cq, rpcmethod_NodeUnstageVolume_, context, request, false);
}

::grpc::Status Node::Stub::NodePublishVolume(::grpc::ClientContext* context, const ::csi::v1::NodePublishVolumeRequest& request, ::csi::v1::NodePublishVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NodePublishVolume_, context, request, response);
}

void Node::Stub::experimental_async::NodePublishVolume(::grpc::ClientContext* context, const ::csi::v1::NodePublishVolumeRequest* request, ::csi::v1::NodePublishVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodePublishVolume_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodePublishVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodePublishVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodePublishVolume_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodePublishVolume(::grpc::ClientContext* context, const ::csi::v1::NodePublishVolumeRequest* request, ::csi::v1::NodePublishVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodePublishVolume_, context, request, response, reactor);
}

void Node::Stub::experimental_async::NodePublishVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodePublishVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodePublishVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodePublishVolumeResponse>* Node::Stub::AsyncNodePublishVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::NodePublishVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodePublishVolumeResponse>::Create(channel_.get(), cq, rpcmethod_NodePublishVolume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodePublishVolumeResponse>* Node::Stub::PrepareAsyncNodePublishVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::NodePublishVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodePublishVolumeResponse>::Create(channel_.get(), cq, rpcmethod_NodePublishVolume_, context, request, false);
}

::grpc::Status Node::Stub::NodeUnpublishVolume(::grpc::ClientContext* context, const ::csi::v1::NodeUnpublishVolumeRequest& request, ::csi::v1::NodeUnpublishVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NodeUnpublishVolume_, context, request, response);
}

void Node::Stub::experimental_async::NodeUnpublishVolume(::grpc::ClientContext* context, const ::csi::v1::NodeUnpublishVolumeRequest* request, ::csi::v1::NodeUnpublishVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodeUnpublishVolume_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodeUnpublishVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodeUnpublishVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodeUnpublishVolume_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodeUnpublishVolume(::grpc::ClientContext* context, const ::csi::v1::NodeUnpublishVolumeRequest* request, ::csi::v1::NodeUnpublishVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodeUnpublishVolume_, context, request, response, reactor);
}

void Node::Stub::experimental_async::NodeUnpublishVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodeUnpublishVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodeUnpublishVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodeUnpublishVolumeResponse>* Node::Stub::AsyncNodeUnpublishVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::NodeUnpublishVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodeUnpublishVolumeResponse>::Create(channel_.get(), cq, rpcmethod_NodeUnpublishVolume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodeUnpublishVolumeResponse>* Node::Stub::PrepareAsyncNodeUnpublishVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::NodeUnpublishVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodeUnpublishVolumeResponse>::Create(channel_.get(), cq, rpcmethod_NodeUnpublishVolume_, context, request, false);
}

::grpc::Status Node::Stub::NodeGetVolumeStats(::grpc::ClientContext* context, const ::csi::v1::NodeGetVolumeStatsRequest& request, ::csi::v1::NodeGetVolumeStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NodeGetVolumeStats_, context, request, response);
}

void Node::Stub::experimental_async::NodeGetVolumeStats(::grpc::ClientContext* context, const ::csi::v1::NodeGetVolumeStatsRequest* request, ::csi::v1::NodeGetVolumeStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodeGetVolumeStats_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodeGetVolumeStats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodeGetVolumeStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodeGetVolumeStats_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodeGetVolumeStats(::grpc::ClientContext* context, const ::csi::v1::NodeGetVolumeStatsRequest* request, ::csi::v1::NodeGetVolumeStatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodeGetVolumeStats_, context, request, response, reactor);
}

void Node::Stub::experimental_async::NodeGetVolumeStats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodeGetVolumeStatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodeGetVolumeStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodeGetVolumeStatsResponse>* Node::Stub::AsyncNodeGetVolumeStatsRaw(::grpc::ClientContext* context, const ::csi::v1::NodeGetVolumeStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodeGetVolumeStatsResponse>::Create(channel_.get(), cq, rpcmethod_NodeGetVolumeStats_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodeGetVolumeStatsResponse>* Node::Stub::PrepareAsyncNodeGetVolumeStatsRaw(::grpc::ClientContext* context, const ::csi::v1::NodeGetVolumeStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodeGetVolumeStatsResponse>::Create(channel_.get(), cq, rpcmethod_NodeGetVolumeStats_, context, request, false);
}

::grpc::Status Node::Stub::NodeExpandVolume(::grpc::ClientContext* context, const ::csi::v1::NodeExpandVolumeRequest& request, ::csi::v1::NodeExpandVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NodeExpandVolume_, context, request, response);
}

void Node::Stub::experimental_async::NodeExpandVolume(::grpc::ClientContext* context, const ::csi::v1::NodeExpandVolumeRequest* request, ::csi::v1::NodeExpandVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodeExpandVolume_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodeExpandVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodeExpandVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodeExpandVolume_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodeExpandVolume(::grpc::ClientContext* context, const ::csi::v1::NodeExpandVolumeRequest* request, ::csi::v1::NodeExpandVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodeExpandVolume_, context, request, response, reactor);
}

void Node::Stub::experimental_async::NodeExpandVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodeExpandVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodeExpandVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodeExpandVolumeResponse>* Node::Stub::AsyncNodeExpandVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::NodeExpandVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodeExpandVolumeResponse>::Create(channel_.get(), cq, rpcmethod_NodeExpandVolume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodeExpandVolumeResponse>* Node::Stub::PrepareAsyncNodeExpandVolumeRaw(::grpc::ClientContext* context, const ::csi::v1::NodeExpandVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodeExpandVolumeResponse>::Create(channel_.get(), cq, rpcmethod_NodeExpandVolume_, context, request, false);
}

::grpc::Status Node::Stub::NodeGetCapabilities(::grpc::ClientContext* context, const ::csi::v1::NodeGetCapabilitiesRequest& request, ::csi::v1::NodeGetCapabilitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NodeGetCapabilities_, context, request, response);
}

void Node::Stub::experimental_async::NodeGetCapabilities(::grpc::ClientContext* context, const ::csi::v1::NodeGetCapabilitiesRequest* request, ::csi::v1::NodeGetCapabilitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodeGetCapabilities_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodeGetCapabilities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodeGetCapabilitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodeGetCapabilities_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodeGetCapabilities(::grpc::ClientContext* context, const ::csi::v1::NodeGetCapabilitiesRequest* request, ::csi::v1::NodeGetCapabilitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodeGetCapabilities_, context, request, response, reactor);
}

void Node::Stub::experimental_async::NodeGetCapabilities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodeGetCapabilitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodeGetCapabilities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodeGetCapabilitiesResponse>* Node::Stub::AsyncNodeGetCapabilitiesRaw(::grpc::ClientContext* context, const ::csi::v1::NodeGetCapabilitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodeGetCapabilitiesResponse>::Create(channel_.get(), cq, rpcmethod_NodeGetCapabilities_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodeGetCapabilitiesResponse>* Node::Stub::PrepareAsyncNodeGetCapabilitiesRaw(::grpc::ClientContext* context, const ::csi::v1::NodeGetCapabilitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodeGetCapabilitiesResponse>::Create(channel_.get(), cq, rpcmethod_NodeGetCapabilities_, context, request, false);
}

::grpc::Status Node::Stub::NodeGetInfo(::grpc::ClientContext* context, const ::csi::v1::NodeGetInfoRequest& request, ::csi::v1::NodeGetInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NodeGetInfo_, context, request, response);
}

void Node::Stub::experimental_async::NodeGetInfo(::grpc::ClientContext* context, const ::csi::v1::NodeGetInfoRequest* request, ::csi::v1::NodeGetInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodeGetInfo_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodeGetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodeGetInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NodeGetInfo_, context, request, response, std::move(f));
}

void Node::Stub::experimental_async::NodeGetInfo(::grpc::ClientContext* context, const ::csi::v1::NodeGetInfoRequest* request, ::csi::v1::NodeGetInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodeGetInfo_, context, request, response, reactor);
}

void Node::Stub::experimental_async::NodeGetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::csi::v1::NodeGetInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NodeGetInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodeGetInfoResponse>* Node::Stub::AsyncNodeGetInfoRaw(::grpc::ClientContext* context, const ::csi::v1::NodeGetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodeGetInfoResponse>::Create(channel_.get(), cq, rpcmethod_NodeGetInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::csi::v1::NodeGetInfoResponse>* Node::Stub::PrepareAsyncNodeGetInfoRaw(::grpc::ClientContext* context, const ::csi::v1::NodeGetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::csi::v1::NodeGetInfoResponse>::Create(channel_.get(), cq, rpcmethod_NodeGetInfo_, context, request, false);
}

Node::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Node_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Node::Service, ::csi::v1::NodeStageVolumeRequest, ::csi::v1::NodeStageVolumeResponse>(
          [](Node::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::NodeStageVolumeRequest* req,
             ::csi::v1::NodeStageVolumeResponse* resp) {
               return service->NodeStageVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Node_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Node::Service, ::csi::v1::NodeUnstageVolumeRequest, ::csi::v1::NodeUnstageVolumeResponse>(
          [](Node::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::NodeUnstageVolumeRequest* req,
             ::csi::v1::NodeUnstageVolumeResponse* resp) {
               return service->NodeUnstageVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Node_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Node::Service, ::csi::v1::NodePublishVolumeRequest, ::csi::v1::NodePublishVolumeResponse>(
          [](Node::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::NodePublishVolumeRequest* req,
             ::csi::v1::NodePublishVolumeResponse* resp) {
               return service->NodePublishVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Node_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Node::Service, ::csi::v1::NodeUnpublishVolumeRequest, ::csi::v1::NodeUnpublishVolumeResponse>(
          [](Node::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::NodeUnpublishVolumeRequest* req,
             ::csi::v1::NodeUnpublishVolumeResponse* resp) {
               return service->NodeUnpublishVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Node_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Node::Service, ::csi::v1::NodeGetVolumeStatsRequest, ::csi::v1::NodeGetVolumeStatsResponse>(
          [](Node::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::NodeGetVolumeStatsRequest* req,
             ::csi::v1::NodeGetVolumeStatsResponse* resp) {
               return service->NodeGetVolumeStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Node_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Node::Service, ::csi::v1::NodeExpandVolumeRequest, ::csi::v1::NodeExpandVolumeResponse>(
          [](Node::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::NodeExpandVolumeRequest* req,
             ::csi::v1::NodeExpandVolumeResponse* resp) {
               return service->NodeExpandVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Node_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Node::Service, ::csi::v1::NodeGetCapabilitiesRequest, ::csi::v1::NodeGetCapabilitiesResponse>(
          [](Node::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::NodeGetCapabilitiesRequest* req,
             ::csi::v1::NodeGetCapabilitiesResponse* resp) {
               return service->NodeGetCapabilities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Node_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Node::Service, ::csi::v1::NodeGetInfoRequest, ::csi::v1::NodeGetInfoResponse>(
          [](Node::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::csi::v1::NodeGetInfoRequest* req,
             ::csi::v1::NodeGetInfoResponse* resp) {
               return service->NodeGetInfo(ctx, req, resp);
             }, this)));
}

Node::Service::~Service() {
}

::grpc::Status Node::Service::NodeStageVolume(::grpc::ServerContext* context, const ::csi::v1::NodeStageVolumeRequest* request, ::csi::v1::NodeStageVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Node::Service::NodeUnstageVolume(::grpc::ServerContext* context, const ::csi::v1::NodeUnstageVolumeRequest* request, ::csi::v1::NodeUnstageVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Node::Service::NodePublishVolume(::grpc::ServerContext* context, const ::csi::v1::NodePublishVolumeRequest* request, ::csi::v1::NodePublishVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Node::Service::NodeUnpublishVolume(::grpc::ServerContext* context, const ::csi::v1::NodeUnpublishVolumeRequest* request, ::csi::v1::NodeUnpublishVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Node::Service::NodeGetVolumeStats(::grpc::ServerContext* context, const ::csi::v1::NodeGetVolumeStatsRequest* request, ::csi::v1::NodeGetVolumeStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Node::Service::NodeExpandVolume(::grpc::ServerContext* context, const ::csi::v1::NodeExpandVolumeRequest* request, ::csi::v1::NodeExpandVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Node::Service::NodeGetCapabilities(::grpc::ServerContext* context, const ::csi::v1::NodeGetCapabilitiesRequest* request, ::csi::v1::NodeGetCapabilitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Node::Service::NodeGetInfo(::grpc::ServerContext* context, const ::csi::v1::NodeGetInfoRequest* request, ::csi::v1::NodeGetInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace csi
}  // namespace v1

